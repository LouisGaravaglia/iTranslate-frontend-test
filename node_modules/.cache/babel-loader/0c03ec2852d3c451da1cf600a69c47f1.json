{"ast":null,"code":"import axios from \"axios\";\nconst BASE_URL = process.env.REACT_APP_BASE_URL || \"http://localhost:3001\";\n\nclass BackendCall {\n  //////////////////////////////////////  REQUEST METHOD  //////////////////////////////////////\n  static async request(endpoint, paramsOrData = {}, verb = \"get\") {\n    return await axios({\n      method: verb,\n      url: `${BASE_URL}/${endpoint}`,\n      [verb === \"get\" ? \"params\" : \"data\"]: paramsOrData\n    });\n  }\n\n  //////////////////////////////////////  ADD SONG DATA  //////////////////////////////////////\n  static async addTrack(data) {\n    if (data.preview_url === null) data.preview_url = \"\";\n    let res = await this.request(\"track\", data, \"post\");\n    return res.data.response;\n  }\n\n  static async addArtist(data) {\n    let res = await this.request(\"artist\", data, \"post\");\n    return res.data.response;\n  }\n\n  static async addAlbum(data) {\n    let res = await this.request(\"album\", data, \"post\");\n    return res.data.response;\n  }\n\n  /**\n  * Adds Track, Artist, and Album data by calling the above three methods,\n  * which in then make separate requests to their respective routes\n  * adding to the database.\n  * @param {object} trackData - holds an object of data used within the components\n  * @param {object} artistData - object where the values are strings used to fire certain actions\n  * @param {object} albumData - object where the values are strings used to fire certain actions  \n  */\n  static async addTrackArtistAlbum(trackData, artistData, albumData) {\n    await this.addArtist(artistData);\n    await this.addAlbum(albumData);\n    const trackId = await this.addTrack(trackData);\n\n    if (trackId === \"This song already exists in DB\") {\n      return \"No data was added to the DB\";\n    }\n\n    ;\n    return \"Added new track to the DB\";\n  }\n\n  //////////////////////////////////////  CHECK AGAINST BACKEND FOR VARIOUS CONCNERS //////////////////////////////////////\n  static async checkIfTrackHasLyrics(data) {\n    let res = await this.request(\"track/hasLyrics\", data);\n    return res.data.response;\n  }\n\n  static async checkIfTrackIsInDB(data) {\n    let res = await this.request(\"track/inDatabase\", data);\n    return res.data.response;\n  }\n\n  static async checkIfAlbumIsInDB(data) {\n    let res = await this.request(\"album\", data);\n    return res.data.response;\n  }\n\n  //////////////////////////////////////  GET/ADD LYRICS  //////////////////////////////////////\n  static async addLyrics(data) {\n    let res = await this.request(\"track\", data, \"patch\");\n    return res.data.response;\n  }\n\n  static async getLyrics(data) {\n    let res = await this.request(\"track/getLyrics\", data);\n    return res.data.response;\n  }\n\n  //////////////////////////////////////  GET/ADD TRANSLATION  //////////////////////////////////////\n  static async getTranslationFromDB(data) {\n    let res = await this.request(\"translation\", data);\n    return res.data.response;\n  }\n\n  static async addTranslation(data) {\n    let res = await this.request(\"translation\", data, \"post\");\n    return res.data.response;\n  }\n\n  //////////////////////////////////////  GET ARTISTS/IDS  //////////////////////////////////////\n  static async getArtistsAndArtistIds() {\n    let res = await this.request(\"artist/ids\");\n    return res.data.response;\n  }\n\n  //////////////////////////////////////  GET GENRES / GET ARTISTS FROM SPECIFIC GENRE  //////////////////////////////////////\n  static async getGenres() {\n    let res = await this.request(\"artist/allGenres\");\n    return res.data.response;\n  }\n\n  static async getArtistByGenre(data) {\n    let res = await this.request(\"artist/byGenre\", data);\n    return res.data.response;\n  }\n\n  //////////////////////////////////////  GET DANCEABILITY  //////////////////////////////////////\n  static async getDanceabilityTracks(data) {\n    let res = await this.request(\"track/danceability\", data);\n    return res.data.response;\n  }\n\n  //////////////////////////////////////  GET ALBUMS  //////////////////////////////////////\n  static async getAlbums(data) {\n    let res = await this.request(\"album\", data);\n    return res.data.response;\n  }\n\n  //////////////////////////////////////  GET ALBUMS  //////////////////////////////////////\n  static async getTracks(data) {\n    let res = await this.request(\"track/getTracks\", data);\n    return res.data.response;\n  }\n\n  //////////////////////////////////////  GET SELECTED SEARCH RESULT DB INFO  //////////////////////////////////////\n\n  /**\n  * A function that restructures the object given in the argument\n  * to have the a consistent pattern, and remove any uncessary information,\n  * as well as add boolean values as to whether that track has lyrics or is\n  * already in the database by making two separate backend calls.\n  * @param {object} track - holds an object of Spotify data for a given track\n  */\n  static async consolidateSelectedSearchResultInfo(track) {\n    const selectedTrack = {};\n    let hasLyrics = await BackendCall.checkIfTrackHasLyrics({\n      trackId: track.id\n    });\n    let inDatabase = await BackendCall.checkIfTrackIsInDB({\n      trackId: track.id\n    });\n    selectedTrack[\"trackId\"] = track.id;\n    selectedTrack[\"trackName\"] = track.name;\n    selectedTrack[\"artistId\"] = track.artists[0].id;\n    selectedTrack[\"artistName\"] = track.artists[0].name;\n    selectedTrack[\"albumId\"] = track.album.id;\n    selectedTrack[\"albumName\"] = track.album.name;\n    selectedTrack[\"hasLyrics\"] = hasLyrics;\n    selectedTrack[\"inDatabase\"] = inDatabase;\n    return selectedTrack;\n  }\n\n  //////////////////////////////////////  GET LYRICS FROM LYRICS API  //////////////////////////////////////\n  static async getLyricsFromAPI(data) {\n    let res = await this.request(\"lyrics\", data);\n    return res.data.response;\n  }\n\n}\n\n;\nexport default BackendCall;","map":{"version":3,"sources":["/Users/louieg3/Documents/Web_development/iTranslate/Frontend/src/BackendCall.js"],"names":["axios","BASE_URL","process","env","REACT_APP_BASE_URL","BackendCall","request","endpoint","paramsOrData","verb","method","url","addTrack","data","preview_url","res","response","addArtist","addAlbum","addTrackArtistAlbum","trackData","artistData","albumData","trackId","checkIfTrackHasLyrics","checkIfTrackIsInDB","checkIfAlbumIsInDB","addLyrics","getLyrics","getTranslationFromDB","addTranslation","getArtistsAndArtistIds","getGenres","getArtistByGenre","getDanceabilityTracks","getAlbums","getTracks","consolidateSelectedSearchResultInfo","track","selectedTrack","hasLyrics","id","inDatabase","name","artists","album","getLyricsFromAPI"],"mappings":"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","sourcesContent":["import axios from \"axios\";\n\nconst BASE_URL = process.env.REACT_APP_BASE_URL || \"http://localhost:3001\";\n\nclass BackendCall {\n\n//////////////////////////////////////  REQUEST METHOD  //////////////////////////////////////\n\n  static async request(endpoint, paramsOrData = {}, verb = \"get\") {\n    return (await axios({\n      method: verb,\n      url: `${BASE_URL}/${endpoint}`,\n      [verb === \"get\" ? \"params\" : \"data\"]: paramsOrData}));\n  };\n\n//////////////////////////////////////  ADD SONG DATA  //////////////////////////////////////\n\n  static async addTrack(data) {\n    if ( data.preview_url === null ) data.preview_url = \"\";\n    let res = await this.request(\"track\", data, \"post\");\n    return res.data.response;\n  };\n\n  static async addArtist(data) {\n    let res = await this.request(\"artist\", data, \"post\");\n    return res.data.response;\n  };\n\n  static async addAlbum(data) {\n    let res = await this.request(\"album\", data, \"post\");\n    return res.data.response;\n  };\n\n  /**\n  * Adds Track, Artist, and Album data by calling the above three methods,\n  * which in then make separate requests to their respective routes\n  * adding to the database.\n  * @param {object} trackData - holds an object of data used within the components\n  * @param {object} artistData - object where the values are strings used to fire certain actions\n  * @param {object} albumData - object where the values are strings used to fire certain actions  \n  */\n  static async addTrackArtistAlbum(trackData, artistData, albumData) {\n    await this.addArtist(artistData);\n    await this.addAlbum(albumData);\n    const trackId = await this.addTrack(trackData);\n\n    if (trackId === \"This song already exists in DB\") {\n      return \"No data was added to the DB\";\n    };\n\n    return \"Added new track to the DB\";\n  };\n\n//////////////////////////////////////  CHECK AGAINST BACKEND FOR VARIOUS CONCNERS //////////////////////////////////////\n\n  static async checkIfTrackHasLyrics(data) {\n    let res = await this.request(\"track/hasLyrics\", data);\n    return res.data.response;\n  };\n\n  static async checkIfTrackIsInDB(data) {\n    let res = await this.request(\"track/inDatabase\", data);\n    return res.data.response;\n  };\n\n  static async checkIfAlbumIsInDB(data) {\n    let res = await this.request(\"album\", data);\n    return res.data.response;\n  };\n\n//////////////////////////////////////  GET/ADD LYRICS  //////////////////////////////////////\n\n  static async addLyrics(data) {\n    let res = await this.request(\"track\", data, \"patch\");\n    return res.data.response;\n  };\n\n  static async getLyrics(data) {\n    let res = await this.request(\"track/getLyrics\", data);\n    return res.data.response;\n  };\n\n//////////////////////////////////////  GET/ADD TRANSLATION  //////////////////////////////////////\n\n  static async getTranslationFromDB(data) {\n    let res = await this.request(\"translation\", data);\n    return res.data.response;\n  };\n\n  static async addTranslation(data) {\n    let res = await this.request(\"translation\", data, \"post\");\n    return res.data.response;\n  };\n\n//////////////////////////////////////  GET ARTISTS/IDS  //////////////////////////////////////\n\n  static async getArtistsAndArtistIds() {\n    let res = await this.request(\"artist/ids\");\n    return res.data.response;\n  };\n\n//////////////////////////////////////  GET GENRES / GET ARTISTS FROM SPECIFIC GENRE  //////////////////////////////////////\n\n  static async getGenres() {\n    let res = await this.request(\"artist/allGenres\");\n    return res.data.response;\n  };\n\n  static async getArtistByGenre(data) {\n    let res = await this.request(\"artist/byGenre\", data);\n    return res.data.response;\n  };\n\n//////////////////////////////////////  GET DANCEABILITY  //////////////////////////////////////\n\n  static async getDanceabilityTracks(data) {\n    let res = await this.request(\"track/danceability\", data);\n    return res.data.response;\n  };\n\n//////////////////////////////////////  GET ALBUMS  //////////////////////////////////////\n\n  static async getAlbums(data) {\n    let res = await this.request(\"album\", data);\n    return res.data.response;\n  };\n\n//////////////////////////////////////  GET ALBUMS  //////////////////////////////////////\n\n  static async getTracks(data) {\n    let res = await this.request(\"track/getTracks\", data);\n    return res.data.response;\n  };\n\n//////////////////////////////////////  GET SELECTED SEARCH RESULT DB INFO  //////////////////////////////////////\n\n  /**\n  * A function that restructures the object given in the argument\n  * to have the a consistent pattern, and remove any uncessary information,\n  * as well as add boolean values as to whether that track has lyrics or is\n  * already in the database by making two separate backend calls.\n  * @param {object} track - holds an object of Spotify data for a given track\n  */\n  static async consolidateSelectedSearchResultInfo(track) {\n    const selectedTrack = {};\n    let hasLyrics = await BackendCall.checkIfTrackHasLyrics({trackId: track.id});\n    let inDatabase = await BackendCall.checkIfTrackIsInDB({trackId: track.id});\n\n    selectedTrack[\"trackId\"] = track.id;\n    selectedTrack[\"trackName\"] = track.name;\n    selectedTrack[\"artistId\"] = track.artists[0].id;\n    selectedTrack[\"artistName\"] = track.artists[0].name;\n    selectedTrack[\"albumId\"] = track.album.id;\n    selectedTrack[\"albumName\"] = track.album.name;\n    selectedTrack[\"hasLyrics\"] = hasLyrics;\n    selectedTrack[\"inDatabase\"] = inDatabase;\n\n    return selectedTrack;\n  };\n\n//////////////////////////////////////  GET LYRICS FROM LYRICS API  //////////////////////////////////////\n\n  static async getLyricsFromAPI(data) {\n    let res = await this.request(\"lyrics\", data);\n    return res.data.response;\n  };\n};\n\nexport default BackendCall;"]},"metadata":{},"sourceType":"module"}