{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/louieg3/Documents/Web_development/iTranslate/Frontend/src/BrowseByGenre.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useRef, useEffect, useCallback } from 'react';\nimport { useSpring, animated } from 'react-spring';\nimport './Sass/App.scss'; //COMPONENT IMPORTS\n\nimport LyricsTranslation from \"./LyricsTranslation\";\nimport Tracks from \"./Tracks\";\nimport LanguageSelect from \"./LanguageSelect\";\nimport Artists from \"./Artists\";\nimport Albums from \"./Albums\";\nimport Genres from \"./Genres\";\nimport Categories from \"./BrowseCategories\";\nimport FlashMessage from \"./FlashMessage\";\nimport ToTopArrow from \"./ToTopArrow\"; //REDUX IMPORTS\n\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { getGenres } from \"./actionCreators/BrowseRoute/Genre/getGenresCreator\";\nimport { resetLanguageError, resetTranslationError, resetLyricsError, resetGeneralError } from \"./actionCreators/handleErrorsCreator\"; //CUSTOM HOOK IMPORTS\n\nimport useOnScreen from \"./hooks/useOnScreen\"; //IONICONS IMPORTS\n\nimport IosMusicalNotes from 'react-ionicons/lib/IosMusicalNotes';\n\nfunction BrowseByGenre() {\n  _s();\n\n  //STATE FOR ANIMATIONS\n  const [bgColor, setBgColor] = useState(\"#4e1eff\"); //REDUX STORE\n\n  const dispatch = useDispatch();\n  const genres = useSelector(store => store.genres);\n  const lyrics = useSelector(store => store.lyrics);\n  const artists = useSelector(store => store.artists);\n  const albums = useSelector(store => store.albums);\n  const tracks = useSelector(store => store.tracks);\n  const selectedTrackId = useSelector(store => store.selectedTrack.trackId);\n  const translation = useSelector(store => store.translation);\n  const translationError = useSelector(store => store.errors.translationError);\n  const languageError = useSelector(store => store.errors.languageError);\n  const lyricsError = useSelector(store => store.errors.lyricsError);\n  const generalError = useSelector(store => store.errors.generalError); //REFS FOR PAGE TRAVERSAL\n\n  const categoryRef = useRef();\n  const selectGenresRef = useRef();\n  const artistsResultsRef = useRef();\n  const albumResultsRef = useRef();\n  const selectLanguageRef = useRef();\n  const trackResultsRef = useRef();\n  const showLyricsTranslationRef = useRef(); //STATE FOR FLASH MESSAGES\n\n  const [noLyricsFlashMessage, setNoLyricsFlashMessage] = useState(false);\n  const [languageNotFoundFlashMessage, setLanguageNotFoundFlashMessage] = useState(false);\n  const [translationErrorFlashMessage, setTranslationErrorFlashMessage] = useState(false);\n  const [generalErrorFlashMessage, setGeneralErrorFlashMessage] = useState(false); ////////////////////////////////////////////////////  USE EFFECTS  ////////////////////////////////////////////////////\n  //LISTENS FOR ANY CHANGES IN ERRORS IN STATE AND WILL TRIGGER FLASH MESSAGES ACCORDINGLY\n\n  useEffect(() => {\n    const displayFlashMessage = () => {\n      if (lyricsError) {\n        setNoLyricsFlashMessage(true);\n        dispatch(resetLyricsError());\n      }\n\n      ;\n\n      if (languageError) {\n        setLanguageNotFoundFlashMessage(true);\n        dispatch(resetLanguageError());\n      }\n\n      ;\n\n      if (translationError) {\n        setTranslationErrorFlashMessage(true);\n        dispatch(resetTranslationError());\n      }\n\n      ;\n\n      if (generalError) {\n        setGeneralErrorFlashMessage(true);\n        dispatch(resetGeneralError());\n      }\n\n      ;\n    };\n\n    displayFlashMessage();\n  }, [languageError, translationError, lyricsError, generalError, dispatch]); //GET ALL GENRES IN DB AND STORE THEM FOR THE BROWSE BY GENRE COMPONENT\n\n  useEffect(() => {\n    async function getSeedData() {\n      dispatch(getGenres());\n    }\n\n    ;\n    getSeedData();\n  }, [dispatch]); //SKIP OVER THE CATEGORIES SINCE THE USER NEEDED TO SEE THAT IN ORDER TO GET TO THIS COMPONENT\n\n  useEffect(() => {\n    const scrollPastCategories = () => {\n      selectGenresRef.current.scrollIntoView({\n        behavior: \"smooth\"\n      });\n    };\n\n    scrollPastCategories();\n  }, []); //FUNCTION TO BE CALLED IN BELOW USE-EFFECTS TO SCROLL TO NEXT DIV AFTER CLICK\n\n  const scrollToNextDiv = useCallback(async (state, ref) => {\n    if (state && state !== \"Could not read language value\") {\n      ref.current.scrollIntoView({\n        behavior: \"smooth\"\n      });\n    }\n\n    ;\n  }, []); //SCROLL DOWN TO SHOW ARTISTS WHEN GENRE HAS BEEN SELECTED AND CORRESPONDING ARTISTS SET IN STATE\n\n  useEffect(() => {\n    scrollToNextDiv(artists, artistsResultsRef);\n  }, [artists, artistsResultsRef, scrollToNextDiv]); //SCROLL DOWN TO ALBUMS RESULTS DIV WHEN ALBUMS ARE SET IN STATE\n\n  useEffect(() => {\n    scrollToNextDiv(albums, albumResultsRef);\n  }, [albums, albumResultsRef, scrollToNextDiv]); //SCROLL DOWN TO TRACKS DIV WHEN TRACKS HAS BEEN SELECTED AND SET IN STATE\n\n  useEffect(() => {\n    scrollToNextDiv(tracks, trackResultsRef);\n  }, [tracks, trackResultsRef, scrollToNextDiv]); //SCROLL DOWN TO LANGUAGE SEARCH BAR WHEN SELECTED TRACK HAS BE SET IN STATE\n\n  useEffect(() => {\n    scrollToNextDiv(lyrics, selectLanguageRef);\n  }, [lyrics, selectLanguageRef, scrollToNextDiv]); //SCROLL DOWN TO SHOW LYRICS AND TRANSLATION WHEN TRANSLATION HAS BE SET IN STATE\n\n  useEffect(() => {\n    scrollToNextDiv(translation, showLyricsTranslationRef);\n  }, [translation, showLyricsTranslationRef, scrollToNextDiv]); ////////////////////////////////////////////////////  ANIMATION FOR BACKGROUND COLOR  ////////////////////////////////////////////////////\n\n  const categoriesInView = useOnScreen(categoryRef, {\n    threshold: 0.7\n  });\n  const genresInView = useOnScreen(selectGenresRef, {\n    threshold: 0.7\n  });\n  const artistsInView = useOnScreen(artistsResultsRef, {\n    threshold: 0.7\n  });\n  const albumsInView = useOnScreen(albumResultsRef, {\n    threshold: 0.7\n  });\n  const selectLanguageInView = useOnScreen(selectLanguageRef, {\n    threshold: 0.7\n  });\n  const trackResultsInView = useOnScreen(trackResultsRef, {\n    threshold: 0.7\n  });\n  const lyricsTranslationInvView = useOnScreen(showLyricsTranslationRef, {\n    threshold: 0.7\n  });\n  useEffect(() => {\n    const changeInView = (selectLanguageInView, albumsInView, trackResultsInView, lyricsTranslationInvView, artistsInView, categoriesInView, genresInView) => {\n      if (categoriesInView) {\n        setBgColor(\"#4e1eff\");\n      } else if (genresInView) {\n        setBgColor(\"#6e3eee\");\n      } else if (artistsInView) {\n        setBgColor(\"#9161db\");\n      } else if (albumsInView) {\n        setBgColor(\"#aa79ce\");\n      } else if (trackResultsInView) {\n        setBgColor(\"#c594bf\");\n      } else if (selectLanguageInView) {\n        setBgColor(\"#e3b2af\");\n      } else if (lyricsTranslationInvView) {\n        setBgColor(\"#fecda1\");\n      }\n\n      ;\n    };\n\n    changeInView(selectLanguageInView, albumsInView, trackResultsInView, lyricsTranslationInvView, artistsInView, categoriesInView, genresInView);\n  }, [selectLanguageInView, albumsInView, trackResultsInView, lyricsTranslationInvView, artistsInView, categoriesInView, genresInView]);\n  const springProps = useSpring({\n    backgroundColor: bgColor,\n    config: {\n      duration: 300\n    }\n  }); ////////////////////////////////////////////////////  CLICK EVENTS  ////////////////////////////////////////////////////\n\n  const scrollToGenres = () => {\n    selectGenresRef.current.scrollIntoView({\n      behavior: \"smooth\"\n    });\n  }; ////////////////////////////////////////////////////  JSX VARIABLES  ////////////////////////////////////////////////////\n  //DISPLAY THE THREE CATEGORIES\n\n\n  const ChooseCategoryDiv = /*#__PURE__*/_jsxDEV(animated.div, {\n    onClick: scrollToGenres,\n    style: springProps,\n    ref: categoryRef,\n    children: /*#__PURE__*/_jsxDEV(Categories, {\n      needAnimation: false\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 169,\n    columnNumber: 5\n  }, this); //DISPLAY GENRES\n\n\n  let selectGenresDiv;\n  if (genres) selectGenresDiv = /*#__PURE__*/_jsxDEV(animated.div, {\n    style: springProps,\n    ref: selectGenresRef,\n    children: /*#__PURE__*/_jsxDEV(Genres, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 8\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 178,\n    columnNumber: 6\n  }, this); //DISPLAY MUSIC ICON IF THERE IS AN ERROR LOADING GENRES\n\n  if (!genres) selectGenresDiv = /*#__PURE__*/_jsxDEV(animated.div, {\n    style: springProps,\n    ref: selectGenresRef,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Main-Container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"Loading-Box\",\n        children: /*#__PURE__*/_jsxDEV(IosMusicalNotes, {\n          fontSize: \"300px\",\n          color: \"orange\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 188,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 185,\n    columnNumber: 5\n  }, this); //DISPLAY ARTISTS FROM SELECTED GENRE\n\n  let ArtistsResultsDiv;\n  if (artists) ArtistsResultsDiv = /*#__PURE__*/_jsxDEV(animated.div, {\n    style: springProps,\n    ref: artistsResultsRef,\n    children: /*#__PURE__*/_jsxDEV(Artists, {\n      typeOfArtists: \"genre\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 198,\n    columnNumber: 5\n  }, this); //DISPLAY ALBUMS FROM SELECTED ARTIST\n\n  let AlbumResultsDiv;\n  if (albums) AlbumResultsDiv = /*#__PURE__*/_jsxDEV(animated.div, {\n    style: springProps,\n    ref: albumResultsRef,\n    children: /*#__PURE__*/_jsxDEV(Albums, {\n      typeOfAlbums: \"genre\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 207,\n    columnNumber: 5\n  }, this); //DISPLAY TRACKS FROM SELECTED ALBUM\n\n  let TrackResultsDiv;\n  if (tracks) TrackResultsDiv = /*#__PURE__*/_jsxDEV(animated.div, {\n    style: springProps,\n    ref: trackResultsRef,\n    children: /*#__PURE__*/_jsxDEV(Tracks, {\n      results: tracks,\n      typeOfResults: \"tracks\",\n      itemsPerPage: 1,\n      animateIn: true,\n      typeOfTracks: \"genre\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 11\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 218,\n    columnNumber: 9\n  }, this);\n  if (!tracks) TrackResultsDiv = /*#__PURE__*/_jsxDEV(animated.div, {\n    style: springProps,\n    ref: trackResultsRef\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 224,\n    columnNumber: 9\n  }, this); //DISPLAY LANGUAGE SELECTION SEARCH BAR\n\n  let LanguageSelectDiv;\n  if (lyrics) LanguageSelectDiv = /*#__PURE__*/_jsxDEV(animated.div, {\n    style: springProps,\n    ref: selectLanguageRef,\n    children: /*#__PURE__*/_jsxDEV(LanguageSelect, {\n      selectedTrackId: selectedTrackId,\n      typeOfSearch: \"genre-language\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 234,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 233,\n    columnNumber: 5\n  }, this); //DISPLAY LYRICS AND TRANSLATION\n\n  let LyricsTranslationDiv;\n  if (translation && translation !== \"Could not read language value\") LyricsTranslationDiv = /*#__PURE__*/_jsxDEV(animated.div, {\n    style: springProps,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"inViewPlaceholder\",\n      ref: showLyricsTranslationRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 243,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ToTopArrow, {\n      topRef: categoryRef,\n      topInView: categoriesInView\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 244,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(LyricsTranslation, {\n      typeOfLyricsTranslation: \"genre\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 245,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 242,\n    columnNumber: 5\n  }, this); ////////////////////////////////////////////////////  RETURN  ////////////////////////////////////////////////////\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Flash-Messages-Container\",\n      children: [noLyricsFlashMessage && /*#__PURE__*/_jsxDEV(FlashMessage, {\n        setState: setNoLyricsFlashMessage,\n        message: \"Unfortunately there are no Lyrics for that song yet.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 254,\n        columnNumber: 35\n      }, this), languageNotFoundFlashMessage && /*#__PURE__*/_jsxDEV(FlashMessage, {\n        setState: setLanguageNotFoundFlashMessage,\n        message: \"That Language was not found, please try again.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 255,\n        columnNumber: 43\n      }, this), translationErrorFlashMessage && /*#__PURE__*/_jsxDEV(FlashMessage, {\n        setState: setTranslationErrorFlashMessage,\n        message: \"Sorry, we couldn't get a translation at this moment.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 256,\n        columnNumber: 43\n      }, this), generalErrorFlashMessage && /*#__PURE__*/_jsxDEV(FlashMessage, {\n        setState: setGeneralErrorFlashMessage,\n        message: \"Uh oh, something went wrong. Please try again.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 257,\n        columnNumber: 39\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 253,\n      columnNumber: 7\n    }, this), ChooseCategoryDiv, selectGenresDiv, ArtistsResultsDiv, AlbumResultsDiv, TrackResultsDiv, LanguageSelectDiv, LyricsTranslationDiv]\n  }, void 0, true);\n}\n\n_s(BrowseByGenre, \"grgt6qYQyBCxHoMSRu0ViLcm7rQ=\", false, function () {\n  return [useDispatch, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useOnScreen, useOnScreen, useOnScreen, useOnScreen, useOnScreen, useOnScreen, useOnScreen, useSpring];\n});\n\n_c = BrowseByGenre;\n;\nexport default BrowseByGenre;\n\nvar _c;\n\n$RefreshReg$(_c, \"BrowseByGenre\");","map":{"version":3,"sources":["/Users/louieg3/Documents/Web_development/iTranslate/Frontend/src/BrowseByGenre.js"],"names":["React","useState","useRef","useEffect","useCallback","useSpring","animated","LyricsTranslation","Tracks","LanguageSelect","Artists","Albums","Genres","Categories","FlashMessage","ToTopArrow","useDispatch","useSelector","getGenres","resetLanguageError","resetTranslationError","resetLyricsError","resetGeneralError","useOnScreen","IosMusicalNotes","BrowseByGenre","bgColor","setBgColor","dispatch","genres","store","lyrics","artists","albums","tracks","selectedTrackId","selectedTrack","trackId","translation","translationError","errors","languageError","lyricsError","generalError","categoryRef","selectGenresRef","artistsResultsRef","albumResultsRef","selectLanguageRef","trackResultsRef","showLyricsTranslationRef","noLyricsFlashMessage","setNoLyricsFlashMessage","languageNotFoundFlashMessage","setLanguageNotFoundFlashMessage","translationErrorFlashMessage","setTranslationErrorFlashMessage","generalErrorFlashMessage","setGeneralErrorFlashMessage","displayFlashMessage","getSeedData","scrollPastCategories","current","scrollIntoView","behavior","scrollToNextDiv","state","ref","categoriesInView","threshold","genresInView","artistsInView","albumsInView","selectLanguageInView","trackResultsInView","lyricsTranslationInvView","changeInView","springProps","backgroundColor","config","duration","scrollToGenres","ChooseCategoryDiv","selectGenresDiv","ArtistsResultsDiv","AlbumResultsDiv","TrackResultsDiv","LanguageSelectDiv","LyricsTranslationDiv"],"mappings":"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","sourcesContent":["import React,  {useState, useRef, useEffect, useCallback} from 'react';\nimport {useSpring, animated} from 'react-spring';\nimport './Sass/App.scss';\n//COMPONENT IMPORTS\nimport LyricsTranslation from \"./LyricsTranslation\";\nimport Tracks from \"./Tracks\";\nimport LanguageSelect from \"./LanguageSelect\";\nimport Artists from \"./Artists\";\nimport Albums from \"./Albums\";\nimport Genres from \"./Genres\";\nimport Categories from \"./BrowseCategories\";\nimport FlashMessage from \"./FlashMessage\";\nimport ToTopArrow from \"./ToTopArrow\";\n//REDUX IMPORTS\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {getGenres} from \"./actionCreators/BrowseRoute/Genre/getGenresCreator\";\nimport {resetLanguageError, resetTranslationError, resetLyricsError, resetGeneralError} from \"./actionCreators/handleErrorsCreator\";\n//CUSTOM HOOK IMPORTS\nimport useOnScreen from \"./hooks/useOnScreen\";\n//IONICONS IMPORTS\nimport IosMusicalNotes from 'react-ionicons/lib/IosMusicalNotes';\n\nfunction BrowseByGenre() {\n  //STATE FOR ANIMATIONS\n  const [bgColor, setBgColor] = useState(\"#4e1eff\");\n  //REDUX STORE\n  const dispatch = useDispatch();\n  const genres = useSelector(store => store.genres);\n  const lyrics = useSelector(store => store.lyrics);\n  const artists = useSelector(store => store.artists);\n  const albums = useSelector(store => store.albums);\n  const tracks = useSelector(store => store.tracks);\n  const selectedTrackId = useSelector(store => store.selectedTrack.trackId);\n  const translation = useSelector(store => store.translation);\n  const translationError = useSelector(store => store.errors.translationError);\n  const languageError = useSelector(store => store.errors.languageError);\n  const lyricsError = useSelector(store => store.errors.lyricsError);\n  const generalError = useSelector(store => store.errors.generalError);\n  //REFS FOR PAGE TRAVERSAL\n  const categoryRef = useRef();\n  const selectGenresRef = useRef();\n  const artistsResultsRef = useRef();\n  const albumResultsRef = useRef();\n  const selectLanguageRef = useRef();\n  const trackResultsRef = useRef();\n  const showLyricsTranslationRef = useRef();\n  //STATE FOR FLASH MESSAGES\n  const [noLyricsFlashMessage, setNoLyricsFlashMessage] = useState(false);\n  const [languageNotFoundFlashMessage, setLanguageNotFoundFlashMessage] = useState(false);\n  const [translationErrorFlashMessage, setTranslationErrorFlashMessage] = useState(false);\n  const [generalErrorFlashMessage, setGeneralErrorFlashMessage] = useState(false);\n\n////////////////////////////////////////////////////  USE EFFECTS  ////////////////////////////////////////////////////\n\n  //LISTENS FOR ANY CHANGES IN ERRORS IN STATE AND WILL TRIGGER FLASH MESSAGES ACCORDINGLY\n  useEffect(() => {\n\n    const displayFlashMessage = () => {\n\n        if (lyricsError) {\n          setNoLyricsFlashMessage(true);\n          dispatch(resetLyricsError());\n        };\n        if (languageError) {\n          setLanguageNotFoundFlashMessage(true);\n          dispatch(resetLanguageError());\n        };\n        if (translationError) {\n          setTranslationErrorFlashMessage(true);\n          dispatch(resetTranslationError());\n        };\n        if (generalError) {\n          setGeneralErrorFlashMessage(true);\n          dispatch(resetGeneralError());\n        };\n    };\n    displayFlashMessage();\n  }, [languageError, translationError, lyricsError, generalError, dispatch]);\n\n  //GET ALL GENRES IN DB AND STORE THEM FOR THE BROWSE BY GENRE COMPONENT\n  useEffect(() => {\n\n    async function getSeedData() {\n      dispatch(getGenres());\n    };\n    getSeedData();\n  }, [dispatch]);\n\n\n  //SKIP OVER THE CATEGORIES SINCE THE USER NEEDED TO SEE THAT IN ORDER TO GET TO THIS COMPONENT\n  useEffect(() => {\n\n    const scrollPastCategories = () => {\n      selectGenresRef.current.scrollIntoView({behavior: \"smooth\"});\n    };\n    scrollPastCategories();\n  }, []);\n\n  //FUNCTION TO BE CALLED IN BELOW USE-EFFECTS TO SCROLL TO NEXT DIV AFTER CLICK\n  const scrollToNextDiv = useCallback(async (state, ref) => {\n\n    if (state && state !== \"Could not read language value\") {\n      ref.current.scrollIntoView({behavior: \"smooth\"});\n    };\n  }, []);\n\n  //SCROLL DOWN TO SHOW ARTISTS WHEN GENRE HAS BEEN SELECTED AND CORRESPONDING ARTISTS SET IN STATE\n  useEffect(() => {scrollToNextDiv(artists, artistsResultsRef);}, [artists, artistsResultsRef, scrollToNextDiv]);\n\n  //SCROLL DOWN TO ALBUMS RESULTS DIV WHEN ALBUMS ARE SET IN STATE\n  useEffect(() => {scrollToNextDiv(albums, albumResultsRef);}, [albums, albumResultsRef, scrollToNextDiv]);\n\n  //SCROLL DOWN TO TRACKS DIV WHEN TRACKS HAS BEEN SELECTED AND SET IN STATE\n  useEffect(() => {scrollToNextDiv(tracks, trackResultsRef);}, [tracks, trackResultsRef, scrollToNextDiv]);\n\n  //SCROLL DOWN TO LANGUAGE SEARCH BAR WHEN SELECTED TRACK HAS BE SET IN STATE\n  useEffect(() => {scrollToNextDiv(lyrics, selectLanguageRef);}, [lyrics, selectLanguageRef, scrollToNextDiv]);\n\n  //SCROLL DOWN TO SHOW LYRICS AND TRANSLATION WHEN TRANSLATION HAS BE SET IN STATE\n  useEffect(() => {scrollToNextDiv(translation, showLyricsTranslationRef);}, [translation, showLyricsTranslationRef, scrollToNextDiv]);\n\n////////////////////////////////////////////////////  ANIMATION FOR BACKGROUND COLOR  ////////////////////////////////////////////////////\n\n  const categoriesInView = useOnScreen(categoryRef, {threshold: 0.7});\n  const genresInView = useOnScreen(selectGenresRef, {threshold: 0.7});\n  const artistsInView = useOnScreen(artistsResultsRef, {threshold: 0.7});\n  const albumsInView = useOnScreen(albumResultsRef, {threshold: 0.7});\n  const selectLanguageInView = useOnScreen(selectLanguageRef, {threshold: 0.7});\n  const trackResultsInView = useOnScreen(trackResultsRef, {threshold: 0.7});\n  const lyricsTranslationInvView = useOnScreen(showLyricsTranslationRef, {threshold: 0.7});\n\n  useEffect(() => {\n    const changeInView = (selectLanguageInView, albumsInView, trackResultsInView, lyricsTranslationInvView, artistsInView, categoriesInView, genresInView) => {\n\n      if (categoriesInView) {\n        setBgColor(\"#4e1eff\");\n      } else if (genresInView) {\n        setBgColor(\"#6e3eee\");\n      } else if (artistsInView) {\n        setBgColor(\"#9161db\");\n      } else if (albumsInView) {\n        setBgColor(\"#aa79ce\");\n      } else if (trackResultsInView) {\n        setBgColor(\"#c594bf\");\n      } else if (selectLanguageInView) {\n        setBgColor(\"#e3b2af\");\n      } else if (lyricsTranslationInvView) {\n        setBgColor(\"#fecda1\");\n      };\n    };\n  changeInView(selectLanguageInView, albumsInView, trackResultsInView, lyricsTranslationInvView, artistsInView, categoriesInView, genresInView);\n  }, [selectLanguageInView, albumsInView, trackResultsInView, lyricsTranslationInvView, artistsInView, categoriesInView, genresInView]);\n\n  const springProps = useSpring({\n    backgroundColor: bgColor,\n    config: {duration: 300}\n  });\n\n////////////////////////////////////////////////////  CLICK EVENTS  ////////////////////////////////////////////////////\n\n  const scrollToGenres = () => {\n    selectGenresRef.current.scrollIntoView({behavior: \"smooth\"});\n  };\n\n////////////////////////////////////////////////////  JSX VARIABLES  ////////////////////////////////////////////////////\n\n  //DISPLAY THE THREE CATEGORIES\n  const ChooseCategoryDiv = (\n    <animated.div onClick={scrollToGenres} style={springProps} ref={categoryRef}>\n      <Categories needAnimation={false}/>\n    </animated.div>\n  );\n\n  //DISPLAY GENRES\n  let selectGenresDiv;\n  \n  if (genres) selectGenresDiv = (\n     <animated.div style={springProps} ref={selectGenresRef}>\n       <Genres />\n     </animated.div>\n  );\n\n  //DISPLAY MUSIC ICON IF THERE IS AN ERROR LOADING GENRES\n  if (!genres) selectGenresDiv = (\n    <animated.div style={springProps} ref={selectGenresRef}>\n      <div className=\"Main-Container\">\n        <div className=\"Loading-Box\">\n          <IosMusicalNotes fontSize=\"300px\" color=\"orange\"/>\n        </div>\n      </div>\n    </animated.div>\n  );\n\n  //DISPLAY ARTISTS FROM SELECTED GENRE\n  let ArtistsResultsDiv;\n  \n  if (artists) ArtistsResultsDiv = (\n    <animated.div style={springProps} ref={artistsResultsRef}>\n      <Artists typeOfArtists=\"genre\"/>\n    </animated.div>\n  );\n\n  //DISPLAY ALBUMS FROM SELECTED ARTIST\n  let AlbumResultsDiv;\n  \n  if (albums) AlbumResultsDiv = (\n    <animated.div style={springProps} ref={albumResultsRef}>\n      <Albums typeOfAlbums=\"genre\"/>\n    </animated.div>\n  );\n\n  //DISPLAY TRACKS FROM SELECTED ALBUM\n  let TrackResultsDiv;\n\n\n\n    if (tracks) TrackResultsDiv = (\n        <animated.div style={springProps} ref={trackResultsRef}>\n          <Tracks results={tracks} typeOfResults={\"tracks\"} itemsPerPage={1} animateIn={true} typeOfTracks=\"genre\"/>\n        </animated.div>\n      );\n\n      if (!tracks) TrackResultsDiv = (\n        <animated.div style={springProps} ref={trackResultsRef}>\n        </animated.div>\n      );\n\n \n  //DISPLAY LANGUAGE SELECTION SEARCH BAR\n  let LanguageSelectDiv;\n\n  if (lyrics) LanguageSelectDiv = (\n    <animated.div style={springProps} ref={selectLanguageRef}>\n      <LanguageSelect selectedTrackId={selectedTrackId} typeOfSearch=\"genre-language\"/>\n    </animated.div>\n  );\n\n  //DISPLAY LYRICS AND TRANSLATION\n  let LyricsTranslationDiv;\n  \n  if (translation && translation !== \"Could not read language value\") LyricsTranslationDiv = (\n    <animated.div style={springProps}>\n      <div className=\"inViewPlaceholder\" ref={showLyricsTranslationRef}></div>\n      <ToTopArrow topRef={categoryRef} topInView={categoriesInView}/>\n      <LyricsTranslation  typeOfLyricsTranslation=\"genre\"/>\n    </animated.div>\n  );\n\n////////////////////////////////////////////////////  RETURN  ////////////////////////////////////////////////////\n\n  return (\n    <>\n      <div className=\"Flash-Messages-Container\">\n        {noLyricsFlashMessage && (<FlashMessage setState={setNoLyricsFlashMessage} message=\"Unfortunately there are no Lyrics for that song yet.\"/> )}\n        {languageNotFoundFlashMessage && (<FlashMessage setState={setLanguageNotFoundFlashMessage} message=\"That Language was not found, please try again.\"/> )}\n        {translationErrorFlashMessage && (<FlashMessage setState={setTranslationErrorFlashMessage} message=\"Sorry, we couldn't get a translation at this moment.\"/> )}\n        {generalErrorFlashMessage && (<FlashMessage setState={setGeneralErrorFlashMessage} message=\"Uh oh, something went wrong. Please try again.\"/> )}\n      </div>\n      {ChooseCategoryDiv}\n      {selectGenresDiv}\n      {ArtistsResultsDiv}\n      {AlbumResultsDiv}\n      {TrackResultsDiv}\n      {LanguageSelectDiv}\n      {LyricsTranslationDiv}\n    </>\n  );\n};\n\nexport default BrowseByGenre;"]},"metadata":{},"sourceType":"module"}