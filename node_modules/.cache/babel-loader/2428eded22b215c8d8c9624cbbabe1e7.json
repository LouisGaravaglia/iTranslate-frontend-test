{"ast":null,"code":"import { GET_TRACKS, UPDATE_GENERAL_ERROR } from \"../../../actionTypes\";\nimport BackendCall from \"../../../BackendCall\";\n/**\n* Makes a call to the backend and queries for all tracks with a given \n* danceability score that falls in the range passed in as the arguments. Adds\n* that array to tracks state.\n* @param {float} lowerLimit - lowerLimit of range for danceability score\n* @param {float} upperLimit - upperLimit of range for danceability score\n*/\n\nexport function getDanceabilityTracks(lowerLimit, upperLimit) {\n  return async function (dispatch) {\n    try {\n      const tracks = await BackendCall.getDanceabilityTracks({\n        lowerLimit,\n        upperLimit\n      });\n\n      if (!tracks.length) {\n        dispatch(addTracks(\"\"));\n        return;\n      }\n\n      ;\n\n      for (let track of tracks) {\n        track[\"hasLyrics\"] = true;\n        track[\"inDatabase\"] = true;\n      }\n\n      ;\n      dispatch(addTracks(tracks));\n    } catch (e) {\n      dispatch(updateGeneralError(true));\n    }\n\n    ;\n  };\n}\n;\n\nfunction addTracks(tracks) {\n  return {\n    type: GET_TRACKS,\n    tracks\n  };\n}\n\n;\n\nfunction updateGeneralError(generalError) {\n  return {\n    type: UPDATE_GENERAL_ERROR,\n    generalError\n  };\n}\n\n;","map":{"version":3,"sources":["/Users/louieg3/Documents/Web_development/iTranslate/Frontend/src/actionCreators/BrowseRoute/Danceability/getDanceabilityTracksCreator.js"],"names":["GET_TRACKS","UPDATE_GENERAL_ERROR","BackendCall","getDanceabilityTracks","lowerLimit","upperLimit","dispatch","tracks","length","addTracks","track","e","updateGeneralError","type","generalError"],"mappings":"AAAA,SAAQA,UAAR,EAAoBC,oBAApB,QAA+C,sBAA/C;AACA,OAAOC,WAAP,MAAwB,sBAAxB;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,qBAAT,CAA+BC,UAA/B,EAA2CC,UAA3C,EAAuD;AAE5D,SAAO,gBAAeC,QAAf,EAAyB;AAC9B,QAAI;AACF,YAAMC,MAAM,GAAG,MAAML,WAAW,CAACC,qBAAZ,CAAkC;AAACC,QAAAA,UAAD;AAAaC,QAAAA;AAAb,OAAlC,CAArB;;AAEA,UAAI,CAACE,MAAM,CAACC,MAAZ,EAAoB;AAClBF,QAAAA,QAAQ,CAACG,SAAS,CAAC,EAAD,CAAV,CAAR;AACA;AACD;;AAAA;;AAED,WAAK,IAAIC,KAAT,IAAkBH,MAAlB,EAA0B;AACxBG,QAAAA,KAAK,CAAC,WAAD,CAAL,GAAqB,IAArB;AACAA,QAAAA,KAAK,CAAC,YAAD,CAAL,GAAsB,IAAtB;AACD;;AAAA;AAEDJ,MAAAA,QAAQ,CAACG,SAAS,CAACF,MAAD,CAAV,CAAR;AACD,KAdD,CAcE,OAAMI,CAAN,EAAS;AACTL,MAAAA,QAAQ,CAACM,kBAAkB,CAAC,IAAD,CAAnB,CAAR;AACD;;AAAA;AACF,GAlBD;AAmBD;AAAA;;AAED,SAASH,SAAT,CAAmBF,MAAnB,EAA2B;AACzB,SAAO;AAACM,IAAAA,IAAI,EAAEb,UAAP;AAAmBO,IAAAA;AAAnB,GAAP;AACD;;AAAA;;AAED,SAASK,kBAAT,CAA4BE,YAA5B,EAA0C;AACxC,SAAO;AAACD,IAAAA,IAAI,EAAEZ,oBAAP;AAA6Ba,IAAAA;AAA7B,GAAP;AACD;;AAAA","sourcesContent":["import {GET_TRACKS, UPDATE_GENERAL_ERROR} from \"../../../actionTypes\";\nimport BackendCall from \"../../../BackendCall\";\n\n\n/**\n* Makes a call to the backend and queries for all tracks with a given \n* danceability score that falls in the range passed in as the arguments. Adds\n* that array to tracks state.\n* @param {float} lowerLimit - lowerLimit of range for danceability score\n* @param {float} upperLimit - upperLimit of range for danceability score\n*/\nexport function getDanceabilityTracks(lowerLimit, upperLimit) {\n\n  return async function(dispatch) {\n    try {\n      const tracks = await BackendCall.getDanceabilityTracks({lowerLimit, upperLimit});\n\n      if (!tracks.length) {\n        dispatch(addTracks(\"\"));\n        return;\n      };\n\n      for (let track of tracks) {\n        track[\"hasLyrics\"] = true;\n        track[\"inDatabase\"] = true;\n      };\n\n      dispatch(addTracks(tracks));\n    } catch(e) {\n      dispatch(updateGeneralError(true));\n    };\n  };\n};\n\nfunction addTracks(tracks) {\n  return {type: GET_TRACKS, tracks};\n};\n\nfunction updateGeneralError(generalError) {\n  return {type: UPDATE_GENERAL_ERROR, generalError};\n};"]},"metadata":{},"sourceType":"module"}