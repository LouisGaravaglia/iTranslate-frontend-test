{"ast":null,"code":"import { GET_TRACKS, UPDATE_GENERAL_ERROR } from \"../../../actionTypes\";\nimport BackendCall from \"../../../BackendCall\";\n/**\n* Gets all tracks for the selected album that exist in our backend and\n* that contain at least one track that has lyrics. Updates tracks state.\n* @param {string} albumId - spotify id for the selected album\n*/\n\nexport function getTracks(albumId) {\n  return async function (dispatch) {\n    try {\n      let tracks = await BackendCall.getTracks({\n        albumId\n      });\n\n      for (let track of tracks) {\n        track[\"hasLyrics\"] = true;\n        track[\"inDatabase\"] = true;\n      }\n\n      ;\n      dispatch(addTracks(tracks));\n    } catch (e) {\n      dispatch(updateGeneralError(true));\n    }\n\n    ;\n  };\n}\n;\n\nfunction addTracks(tracks) {\n  return {\n    type: GET_TRACKS,\n    tracks\n  };\n}\n\n;\n\nfunction updateGeneralError(generalError) {\n  return {\n    type: UPDATE_GENERAL_ERROR,\n    generalError\n  };\n}\n\n;","map":{"version":3,"sources":["/Users/louieg3/Documents/Web_development/iTranslate/Frontend/src/actionCreators/BrowseRoute/Artists/getTracksCreator.js"],"names":["GET_TRACKS","UPDATE_GENERAL_ERROR","BackendCall","getTracks","albumId","dispatch","tracks","track","addTracks","e","updateGeneralError","type","generalError"],"mappings":"AAAA,SAAQA,UAAR,EAAoBC,oBAApB,QAA+C,sBAA/C;AACA,OAAOC,WAAP,MAAwB,sBAAxB;AAEA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,SAAT,CAAmBC,OAAnB,EAA4B;AAEjC,SAAO,gBAAeC,QAAf,EAAyB;AAC9B,QAAI;AACF,UAAIC,MAAM,GAAG,MAAMJ,WAAW,CAACC,SAAZ,CAAsB;AAACC,QAAAA;AAAD,OAAtB,CAAnB;;AAEA,WAAK,IAAIG,KAAT,IAAkBD,MAAlB,EAA0B;AACxBC,QAAAA,KAAK,CAAC,WAAD,CAAL,GAAqB,IAArB;AACAA,QAAAA,KAAK,CAAC,YAAD,CAAL,GAAsB,IAAtB;AACD;;AAAA;AACDF,MAAAA,QAAQ,CAACG,SAAS,CAACF,MAAD,CAAV,CAAR;AACD,KARD,CAQE,OAAMG,CAAN,EAAS;AACTJ,MAAAA,QAAQ,CAACK,kBAAkB,CAAC,IAAD,CAAnB,CAAR;AACD;;AAAA;AACF,GAZD;AAaD;AAAA;;AAED,SAASF,SAAT,CAAmBF,MAAnB,EAA2B;AACzB,SAAO;AAACK,IAAAA,IAAI,EAAEX,UAAP;AAAmBM,IAAAA;AAAnB,GAAP;AACD;;AAAA;;AAED,SAASI,kBAAT,CAA4BE,YAA5B,EAA0C;AACxC,SAAO;AAACD,IAAAA,IAAI,EAAEV,oBAAP;AAA6BW,IAAAA;AAA7B,GAAP;AACD;;AAAA","sourcesContent":["import {GET_TRACKS, UPDATE_GENERAL_ERROR} from \"../../../actionTypes\";\nimport BackendCall from \"../../../BackendCall\";\n\n/**\n* Gets all tracks for the selected album that exist in our backend and\n* that contain at least one track that has lyrics. Updates tracks state.\n* @param {string} albumId - spotify id for the selected album\n*/\nexport function getTracks(albumId) {\n\n  return async function(dispatch) {\n    try {\n      let tracks = await BackendCall.getTracks({albumId});\n\n      for (let track of tracks) {\n        track[\"hasLyrics\"] = true;\n        track[\"inDatabase\"] = true;\n      };\n      dispatch(addTracks(tracks));\n    } catch(e) {\n      dispatch(updateGeneralError(true));\n    };\n  };\n};\n\nfunction addTracks(tracks) {\n  return {type: GET_TRACKS, tracks};\n};\n\nfunction updateGeneralError(generalError) {\n  return {type: UPDATE_GENERAL_ERROR, generalError};\n};"]},"metadata":{},"sourceType":"module"}