{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\n/**\n* Hook that utilizes an IntersectionObserver to determine whether or not\n* a component is in the viewport. This will be used to set the appropriate \n* background color.\n* @param {useRef} ref - input value form the search field\n* @param {object} options - input value form the search field\n*/\n\nfunction useOnScreen(ref, options = {\n  threshold: 0.3\n}) {\n  _s();\n\n  // STATE AND SETTER FOR STORING WHETER ELEMENT IS VISIBLE\n  const [isIntersecting, setIntersecting] = useState(false);\n  useEffect(() => {\n    const elementRef = ref;\n    const observer = new IntersectionObserver(([entry]) => {\n      // UPDATE OUR STATE WHEN OBSERVER CALLBACK FIRES\n      setIntersecting(entry.isIntersecting);\n    }, options);\n\n    if (elementRef.current) {\n      observer.observe(elementRef.current);\n    }\n\n    ;\n    return () => {\n      if (elementRef.current) {\n        observer.unobserve(elementRef.current);\n      }\n\n      ;\n    };\n  }, [ref, options]);\n  return isIntersecting;\n}\n\n_s(useOnScreen, \"+TWZGT8mxcpNH+JS7IkSFv1hR0A=\");\n\n;\nexport default useOnScreen;","map":{"version":3,"sources":["/Users/louieg3/Documents/Web_development/iTranslate/Frontend/src/hooks/useOnScreen.js"],"names":["useState","useEffect","useOnScreen","ref","options","threshold","isIntersecting","setIntersecting","elementRef","observer","IntersectionObserver","entry","current","observe","unobserve"],"mappings":";;AAAA,SAAQA,QAAR,EAAkBC,SAAlB,QAAkC,OAAlC;AAEE;AACF;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,WAAT,CAAqBC,GAArB,EAA0BC,OAAO,GAAC;AAACC,EAAAA,SAAS,EAAE;AAAZ,CAAlC,EAAoD;AAAA;;AAClD;AACA,QAAM,CAACC,cAAD,EAAiBC,eAAjB,IAAoCP,QAAQ,CAAC,KAAD,CAAlD;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMO,UAAU,GAAGL,GAAnB;AACA,UAAMM,QAAQ,GAAG,IAAIC,oBAAJ,CAAyB,CAAC,CAACC,KAAD,CAAD,KAAa;AAErD;AACAJ,MAAAA,eAAe,CAACI,KAAK,CAACL,cAAP,CAAf;AACD,KAJgB,EAIdF,OAJc,CAAjB;;AAMA,QAAII,UAAU,CAACI,OAAf,EAAwB;AACtBH,MAAAA,QAAQ,CAACI,OAAT,CAAiBL,UAAU,CAACI,OAA5B;AACD;;AAAA;AAED,WAAO,MAAM;AACX,UAAIJ,UAAU,CAACI,OAAf,EAAwB;AACtBH,QAAAA,QAAQ,CAACK,SAAT,CAAmBN,UAAU,CAACI,OAA9B;AACD;;AAAA;AACF,KAJD;AAKD,GAjBQ,EAiBN,CAACT,GAAD,EAAMC,OAAN,CAjBM,CAAT;AAkBA,SAAOE,cAAP;AACD;;GAvBQJ,W;;AAuBR;AAED,eAAeA,WAAf","sourcesContent":["import {useState, useEffect} from \"react\";\n\n  /**\n* Hook that utilizes an IntersectionObserver to determine whether or not\n* a component is in the viewport. This will be used to set the appropriate \n* background color.\n* @param {useRef} ref - input value form the search field\n* @param {object} options - input value form the search field\n*/\nfunction useOnScreen(ref, options={threshold: 0.3}) {\n  // STATE AND SETTER FOR STORING WHETER ELEMENT IS VISIBLE\n  const [isIntersecting, setIntersecting] = useState(false);\n\n  useEffect(() => {\n    const elementRef = ref;\n    const observer = new IntersectionObserver(([entry]) => {\n      \n      // UPDATE OUR STATE WHEN OBSERVER CALLBACK FIRES\n      setIntersecting(entry.isIntersecting);\n    }, options);\n\n    if (elementRef.current) {\n      observer.observe(elementRef.current);\n    };\n\n    return () => {\n      if (elementRef.current) {\n        observer.unobserve(elementRef.current);\n      };\n    };\n  }, [ref, options]); \n  return isIntersecting;\n};\n\nexport default useOnScreen;"]},"metadata":{},"sourceType":"module"}