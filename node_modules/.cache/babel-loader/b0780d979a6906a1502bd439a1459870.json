{"ast":null,"code":"import { GET_LYRICS, UPDATE_LYRICS_ERROR } from \"../actionTypes\";\nimport BackendCall from '../BackendCall';\n/**\n* Contacts the database to get lyrics for the selected track.\n* @param {string} trackId - spotify id of selected track\n*/\n\nexport function getLyricsFromDB(trackId) {\n  return async function (dispatch) {\n    try {\n      const lyrics = await BackendCall.getLyrics({\n        trackId\n      });\n\n      if (lyrics === undefined || lyrics === null || lyrics === 'No Lyrics') {\n        throw new Error(\"Lyrics are not actual lyrics\");\n      }\n\n      ;\n      dispatch(addLyrics(lyrics));\n    } catch (e) {\n      dispatch(updateLyricsError(true));\n    }\n\n    ;\n  };\n}\n;\n\nfunction addLyrics(lyrics) {\n  return {\n    type: GET_LYRICS,\n    lyrics\n  };\n}\n\n;\n\nfunction updateLyricsError(lyricsError) {\n  return {\n    type: UPDATE_LYRICS_ERROR,\n    lyricsError\n  };\n}\n\n;","map":{"version":3,"sources":["/Users/louieg3/Documents/Web_development/iTranslate/Frontend/src/actionCreators/getLyricsFromDBCreator.js"],"names":["GET_LYRICS","UPDATE_LYRICS_ERROR","BackendCall","getLyricsFromDB","trackId","dispatch","lyrics","getLyrics","undefined","Error","addLyrics","e","updateLyricsError","type","lyricsError"],"mappings":"AAAA,SAAQA,UAAR,EAAoBC,mBAApB,QAA8C,gBAA9C;AACA,OAAOC,WAAP,MAAwB,gBAAxB;AAEA;AACA;AACA;AACA;;AACA,OAAO,SAASC,eAAT,CAAyBC,OAAzB,EAAkC;AAEvC,SAAO,gBAAeC,QAAf,EAAyB;AAC9B,QAAI;AACF,YAAMC,MAAM,GAAG,MAAMJ,WAAW,CAACK,SAAZ,CAAsB;AAACH,QAAAA;AAAD,OAAtB,CAArB;;AAEA,UAAIE,MAAM,KAAKE,SAAX,IAAwBF,MAAM,KAAK,IAAnC,IAA2CA,MAAM,KAAK,WAA1D,EAAuE;AACrE,cAAM,IAAIG,KAAJ,CAAU,8BAAV,CAAN;AACD;;AAAA;AACDJ,MAAAA,QAAQ,CAACK,SAAS,CAACJ,MAAD,CAAV,CAAR;AACD,KAPD,CAOE,OAAMK,CAAN,EAAS;AACTN,MAAAA,QAAQ,CAACO,iBAAiB,CAAC,IAAD,CAAlB,CAAR;AACD;;AAAA;AACF,GAXD;AAYD;AAAA;;AAED,SAASF,SAAT,CAAmBJ,MAAnB,EAA2B;AACzB,SAAO;AAACO,IAAAA,IAAI,EAAEb,UAAP;AAAmBM,IAAAA;AAAnB,GAAP;AACD;;AAAA;;AAED,SAASM,iBAAT,CAA2BE,WAA3B,EAAwC;AACtC,SAAO;AAACD,IAAAA,IAAI,EAAEZ,mBAAP;AAA4Ba,IAAAA;AAA5B,GAAP;AACD;;AAAA","sourcesContent":["import {GET_LYRICS, UPDATE_LYRICS_ERROR} from \"../actionTypes\";\nimport BackendCall from '../BackendCall';\n\n/**\n* Contacts the database to get lyrics for the selected track.\n* @param {string} trackId - spotify id of selected track\n*/\nexport function getLyricsFromDB(trackId) {\n\n  return async function(dispatch) {\n    try {\n      const lyrics = await BackendCall.getLyrics({trackId});\n\n      if (lyrics === undefined || lyrics === null || lyrics === 'No Lyrics') {\n        throw new Error(\"Lyrics are not actual lyrics\");\n      };\n      dispatch(addLyrics(lyrics));\n    } catch(e) {\n      dispatch(updateLyricsError(true));\n    };\n  };\n};\n\nfunction addLyrics(lyrics) {\n  return {type: GET_LYRICS, lyrics};\n};\n\nfunction updateLyricsError(lyricsError) {\n  return {type: UPDATE_LYRICS_ERROR, lyricsError};\n};"]},"metadata":{},"sourceType":"module"}