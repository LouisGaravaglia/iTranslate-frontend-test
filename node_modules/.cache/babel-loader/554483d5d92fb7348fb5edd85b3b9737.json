{"ast":null,"code":"import { GET_ALBUMS, UPDATE_GENERAL_ERROR } from \"../../../actionTypes\";\nimport BackendCall from \"../../../BackendCall\";\n/**\n* Makes a call to the backend to get all albums by a particular aritst\n* as long as they contain at least one track that has lyrics. Updates albums state.\n* @param {string} artistId - spotify id for selected artist\n*/\n\nexport function getAlbums(artistId) {\n  return async function (dispatch) {\n    try {\n      let albums = await BackendCall.getAlbums({\n        artistId\n      });\n      dispatch(addAlbums(albums));\n    } catch (e) {\n      dispatch(updateGeneralError(true));\n    }\n\n    ;\n  };\n}\n;\n\nfunction addAlbums(albums) {\n  return {\n    type: GET_ALBUMS,\n    albums\n  };\n}\n\n;\n\nfunction updateGeneralError(generalError) {\n  return {\n    type: UPDATE_GENERAL_ERROR,\n    generalError\n  };\n}\n\n;","map":{"version":3,"sources":["/Users/louieg3/Documents/Web_development/iTranslate/Frontend/src/actionCreators/BrowseRoute/Artists/getAlbumsCreator.js"],"names":["GET_ALBUMS","UPDATE_GENERAL_ERROR","BackendCall","getAlbums","artistId","dispatch","albums","addAlbums","e","updateGeneralError","type","generalError"],"mappings":"AAAA,SAAQA,UAAR,EAAoBC,oBAApB,QAA+C,sBAA/C;AACA,OAAOC,WAAP,MAAwB,sBAAxB;AAEA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,SAAT,CAAmBC,QAAnB,EAA6B;AAElC,SAAO,gBAAeC,QAAf,EAAyB;AAC9B,QAAI;AACF,UAAIC,MAAM,GAAG,MAAMJ,WAAW,CAACC,SAAZ,CAAsB;AAACC,QAAAA;AAAD,OAAtB,CAAnB;AACAC,MAAAA,QAAQ,CAACE,SAAS,CAACD,MAAD,CAAV,CAAR;AACD,KAHD,CAGE,OAAME,CAAN,EAAS;AACTH,MAAAA,QAAQ,CAACI,kBAAkB,CAAC,IAAD,CAAnB,CAAR;AACD;;AAAA;AACF,GAPD;AAQD;AAAA;;AAED,SAASF,SAAT,CAAmBD,MAAnB,EAA2B;AACzB,SAAO;AAACI,IAAAA,IAAI,EAAEV,UAAP;AAAmBM,IAAAA;AAAnB,GAAP;AACD;;AAAA;;AAED,SAASG,kBAAT,CAA4BE,YAA5B,EAA0C;AACxC,SAAO;AAACD,IAAAA,IAAI,EAAET,oBAAP;AAA6BU,IAAAA;AAA7B,GAAP;AACD;;AAAA","sourcesContent":["import {GET_ALBUMS, UPDATE_GENERAL_ERROR} from \"../../../actionTypes\";\nimport BackendCall from \"../../../BackendCall\";\n\n/**\n* Makes a call to the backend to get all albums by a particular aritst\n* as long as they contain at least one track that has lyrics. Updates albums state.\n* @param {string} artistId - spotify id for selected artist\n*/\nexport function getAlbums(artistId) {\n\n  return async function(dispatch) {\n    try {\n      let albums = await BackendCall.getAlbums({artistId});\n      dispatch(addAlbums(albums));\n    } catch(e) {\n      dispatch(updateGeneralError(true));\n    };\n  };\n};\n\nfunction addAlbums(albums) {\n  return {type: GET_ALBUMS, albums};\n};\n\nfunction updateGeneralError(generalError) {\n  return {type: UPDATE_GENERAL_ERROR, generalError};\n};"]},"metadata":{},"sourceType":"module"}