{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/louieg3/Documents/Web_development/iTranslate/Frontend/src/Tracks.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { Spring } from 'react-spring/renderprops'; //API IMPORTS\n\nimport SpotifyAPI from \"./SpotifyAPI\";\nimport BackendCall from \"./BackendCall\"; //COMPONENT IMPORTS\n\nimport SearchResultList from \"./SearchResultList\"; //REDUX IMPORTS\n\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { resetStore } from \"./actionCreators/resetStoreCreator\";\nimport { getLyricsFromDB } from \"./actionCreators/getLyricsFromDBCreator\";\nimport { findLyricsFromAPI } from \"./actionCreators/findLyricsFromAPICreator\";\nimport { addSelectedTrack } from \"./actionCreators/addSelectedTrackCreator\";\nimport { sendGeneralError } from \"./actionCreators/sendGeneralErrorCreator\"; //IONICONS IMPORTS\n\nimport IosMusicalNotes from 'react-ionicons/lib/IosMusicalNotes';\n\nconst Tracks = ({\n  typeOfResults,\n  results,\n  itemsPerPage,\n  animateIn,\n  typeOfTracks\n}) => {\n  _s();\n\n  //REACT STATE\n  const [isLoading, setIsLoading] = useState(false); //REDUX STORE\n\n  const lyrics = useSelector(store => store.lyrics);\n  const lyricsError = useSelector(store => store.errors.lyricsError);\n  const generalError = useSelector(store => store.errors.generalError);\n  const selectedTrackId = useSelector(store => store.selectedTrack.trackId);\n  const dispatch = useDispatch(); ////////////////////////////////////////////////////  USE EFFECTS  ////////////////////////////////////////////////////\n  //WATCHES FOR EITHER AN ERROR OR THE LYRICS TO COME THROUGH TO REMOVE LOADING ICON\n\n  useEffect(() => {\n    const updateIsLoading = () => {\n      if (lyrics || lyricsError || generalError) setIsLoading(false);\n    };\n\n    updateIsLoading();\n  }, [lyrics, lyricsError, generalError]); ////////////////////////////////////////////////////  HANDLE CLICK AND SUBMIT FUNCTIONS  ////////////////////////////////////////////////////\n\n  const handleTrackResultsClick = async track => {\n    const trackId = track.trackId;\n    const artistId = track.artistId;\n    const albumId = track.albumId;\n\n    if (trackId !== selectedTrackId) {\n      setIsLoading(true);\n    }\n\n    ;\n    dispatch(addSelectedTrack(track));\n    dispatch(resetStore(\"translation\"));\n\n    try {\n      //MAKE CALL TO SPOTIFY API TO GET ADDITIONAL TRACK AND ARTIST INFO (GENRE, TEMPO, DANCEABILITY, ETC).\n      //THIS ALSO MAKES THE PROCESS OF GETTING INFO FOR DB STREAMLINED SINCE WE ONLY NEED 3 ID'S\n      if (track.hasLyrics) {\n        dispatch(getLyricsFromDB(trackId));\n      } else {\n        if (track.inDatabase) {\n          dispatch(findLyricsFromAPI(trackId, track.artistName, track.trackName));\n        } else {\n          const [trackData, artistData, albumData] = await SpotifyAPI.getTrackArtistAlbumData({\n            trackId,\n            artistId,\n            albumId\n          });\n          await BackendCall.addTrackArtistAlbum(trackData, artistData, albumData);\n          dispatch(findLyricsFromAPI(trackId, track.artistName, track.trackName));\n        }\n\n        ;\n      }\n\n      ;\n    } catch (e) {\n      setIsLoading(false);\n      dispatch(sendGeneralError());\n    }\n\n    ;\n  }; ////////////////////////////////////////////////////  JSX  ////////////////////////////////////////////////////\n  //DISPLAY LOADING ICON\n\n\n  let LoadingIconDiv;\n  if (isLoading) LoadingIconDiv = /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Loading-Box\",\n    children: /*#__PURE__*/_jsxDEV(IosMusicalNotes, {\n      rotate: true,\n      fontSize: \"200px\",\n      color: \"#fff\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 5\n  }, this);\n  if (!isLoading) LoadingIconDiv = /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Loading-Box\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 86,\n    columnNumber: 5\n  }, this); //DISPLAY TRACK SELECTION\n\n  let TrackResults;\n  if (animateIn) TrackResults = /*#__PURE__*/_jsxDEV(Spring, {\n    from: {\n      opacity: 0\n    },\n    to: {\n      opacity: 1\n    },\n    config: {\n      delay: 300,\n      duration: 300\n    },\n    children: props => /*#__PURE__*/_jsxDEV(\"div\", {\n      style: props,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"Main-Container\",\n        children: /*#__PURE__*/_jsxDEV(SearchResultList, {\n          typeOfResults: typeOfResults,\n          resultsArray: results,\n          handleSearch: handleTrackResultsClick,\n          itemsPerPage: itemsPerPage,\n          loadingIcon: LoadingIconDiv,\n          typeOfTracks: typeOfTracks\n        }, results[0].trackId, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 93,\n    columnNumber: 5\n  }, this);\n  if (!animateIn) TrackResults = /*#__PURE__*/_jsxDEV(SearchResultList, {\n    typeOfResults: typeOfResults,\n    resultsArray: results,\n    handleSearch: handleTrackResultsClick,\n    itemsPerPage: itemsPerPage,\n    loadingIcon: LoadingIconDiv,\n    typeOfTracks: typeOfTracks\n  }, results[0].trackId, false, {\n    fileName: _jsxFileName,\n    lineNumber: 111,\n    columnNumber: 5\n  }, this); ////////////////////////////////////////////////////  RETURN  ////////////////////////////////////////////////////\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: TrackResults\n  }, void 0, false);\n};\n\n_s(Tracks, \"z3+PGZaHJIj0vEzub0MiwGUZB4Y=\", false, function () {\n  return [useSelector, useSelector, useSelector, useSelector, useDispatch];\n});\n\n_c = Tracks;\nexport default Tracks;\n\nvar _c;\n\n$RefreshReg$(_c, \"Tracks\");","map":{"version":3,"sources":["/Users/louieg3/Documents/Web_development/iTranslate/Frontend/src/Tracks.js"],"names":["React","useState","useEffect","Spring","SpotifyAPI","BackendCall","SearchResultList","useDispatch","useSelector","resetStore","getLyricsFromDB","findLyricsFromAPI","addSelectedTrack","sendGeneralError","IosMusicalNotes","Tracks","typeOfResults","results","itemsPerPage","animateIn","typeOfTracks","isLoading","setIsLoading","lyrics","store","lyricsError","errors","generalError","selectedTrackId","selectedTrack","trackId","dispatch","updateIsLoading","handleTrackResultsClick","track","artistId","albumId","hasLyrics","inDatabase","artistName","trackName","trackData","artistData","albumData","getTrackArtistAlbumData","addTrackArtistAlbum","e","LoadingIconDiv","TrackResults","opacity","delay","duration","props"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from 'react';\nimport {Spring} from 'react-spring/renderprops';\n//API IMPORTS\nimport SpotifyAPI from \"./SpotifyAPI\";\nimport BackendCall from \"./BackendCall\";\n//COMPONENT IMPORTS\nimport SearchResultList from \"./SearchResultList\";\n//REDUX IMPORTS\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {resetStore} from \"./actionCreators/resetStoreCreator\";\nimport {getLyricsFromDB} from \"./actionCreators/getLyricsFromDBCreator\";\nimport {findLyricsFromAPI} from \"./actionCreators/findLyricsFromAPICreator\";\nimport {addSelectedTrack} from \"./actionCreators/addSelectedTrackCreator\";\nimport {sendGeneralError} from \"./actionCreators/sendGeneralErrorCreator\";\n//IONICONS IMPORTS\nimport IosMusicalNotes from 'react-ionicons/lib/IosMusicalNotes';\n\nconst Tracks = ({typeOfResults, results, itemsPerPage, animateIn, typeOfTracks}) => {\n  //REACT STATE\n  const [isLoading, setIsLoading] = useState(false);\n  //REDUX STORE\n  const lyrics = useSelector(store => store.lyrics);\n  const lyricsError = useSelector(store => store.errors.lyricsError);\n  const generalError = useSelector(store => store.errors.generalError);\n  const selectedTrackId = useSelector(store => store.selectedTrack.trackId);\n  const dispatch = useDispatch();\n\n////////////////////////////////////////////////////  USE EFFECTS  ////////////////////////////////////////////////////\n\n  //WATCHES FOR EITHER AN ERROR OR THE LYRICS TO COME THROUGH TO REMOVE LOADING ICON\n  useEffect(() => {\n\n    const updateIsLoading = () => {\n\n      if (lyrics || lyricsError || generalError) setIsLoading(false);\n    };\n    updateIsLoading();\n  }, [lyrics, lyricsError, generalError]);\n\n////////////////////////////////////////////////////  HANDLE CLICK AND SUBMIT FUNCTIONS  ////////////////////////////////////////////////////\n\n  const handleTrackResultsClick = async (track) => {\n    const trackId = track.trackId;\n    const artistId = track.artistId;\n    const albumId = track.albumId;\n\n    if (trackId !== selectedTrackId) {\n      setIsLoading(true);\n    };\n\n    dispatch(addSelectedTrack(track));\n    dispatch(resetStore(\"translation\"));\n\n    try {\n      //MAKE CALL TO SPOTIFY API TO GET ADDITIONAL TRACK AND ARTIST INFO (GENRE, TEMPO, DANCEABILITY, ETC).\n      //THIS ALSO MAKES THE PROCESS OF GETTING INFO FOR DB STREAMLINED SINCE WE ONLY NEED 3 ID'S\n      if (track.hasLyrics) {\n        dispatch(getLyricsFromDB(trackId));\n      } else {\n        if (track.inDatabase) {\n          dispatch(findLyricsFromAPI(trackId, track.artistName, track.trackName));\n        } else {\n          const [trackData, artistData, albumData] = await SpotifyAPI.getTrackArtistAlbumData({trackId, artistId, albumId});\n          await BackendCall.addTrackArtistAlbum(trackData, artistData, albumData);\n          dispatch(findLyricsFromAPI(trackId, track.artistName, track.trackName));\n        };\n      };\n    } catch(e) {\n      setIsLoading(false);\n      dispatch(sendGeneralError());\n    };\n  };\n\n////////////////////////////////////////////////////  JSX  ////////////////////////////////////////////////////\n\n  //DISPLAY LOADING ICON\n  let LoadingIconDiv;\n  \n  if (isLoading) LoadingIconDiv = (\n    <div className=\"Loading-Box\">\n      <IosMusicalNotes rotate={true} fontSize=\"200px\" color=\"#fff\" />\n    </div>\n  );\n\n  if (!isLoading) LoadingIconDiv = (\n    <div className=\"Loading-Box\"></div>\n  );\n\n  //DISPLAY TRACK SELECTION\n  let TrackResults;\n  \n  if (animateIn) TrackResults = (\n    <Spring\n      from={{opacity: 0}}\n      to={{opacity: 1}}\n      config={{delay: 300, duration: 300}}\n    >\n      {props => (\n        <div style={props}>\n\n          <div className=\"Main-Container\">\n            <SearchResultList key={results[0].trackId} typeOfResults={typeOfResults} resultsArray={results} handleSearch={handleTrackResultsClick} itemsPerPage={itemsPerPage} loadingIcon={LoadingIconDiv} typeOfTracks={typeOfTracks}/>\n          </div>\n\n        </div>\n      )}\n    </Spring>\n  );\n\n  if (!animateIn) TrackResults = (\n    <SearchResultList key={results[0].trackId} typeOfResults={typeOfResults} resultsArray={results} handleSearch={handleTrackResultsClick} itemsPerPage={itemsPerPage} loadingIcon={LoadingIconDiv} typeOfTracks={typeOfTracks}/>\n  );\n\n\n////////////////////////////////////////////////////  RETURN  ////////////////////////////////////////////////////\n\n  return (\n    <>\n      {TrackResults}\n    </>\n  );\n};\n\nexport default Tracks;"]},"metadata":{},"sourceType":"module"}