{"ast":null,"code":"import { GET_GENRES, UPDATE_GENERAL_ERROR } from \"../../../actionTypes\";\nimport BackendCall from \"../../../BackendCall\";\n/**\n* Gets the array of genres compiled from all artists who have at least\n* one song in the database.\n*/\n\nexport function getGenres() {\n  return async function (dispatch) {\n    try {\n      const response = await BackendCall.getGenres();\n      const genreArray = response[0].genres.split(\",\");\n      const sortedGenres = [];\n\n      for (let i = 0; i < genreArray.length; i++) {\n        sortedGenres.push(genreArray[i].trim().toUpperCase());\n      }\n\n      ;\n      const genres = [...new Set(sortedGenres.sort())];\n      dispatch(addGenres(genres));\n    } catch (e) {\n      dispatch(updateGeneralError(true));\n    }\n\n    ;\n  };\n}\n;\n\nfunction addGenres(genres) {\n  return {\n    type: GET_GENRES,\n    genres\n  };\n}\n\n;\n\nfunction updateGeneralError(generalError) {\n  return {\n    type: UPDATE_GENERAL_ERROR,\n    generalError\n  };\n}\n\n;","map":{"version":3,"sources":["/Users/louieg3/Documents/Web_development/iTranslate/Frontend/src/actionCreators/BrowseRoute/Genre/getGenresCreator.js"],"names":["GET_GENRES","UPDATE_GENERAL_ERROR","BackendCall","getGenres","dispatch","response","genreArray","genres","split","sortedGenres","i","length","push","trim","toUpperCase","Set","sort","addGenres","e","updateGeneralError","type","generalError"],"mappings":"AAAA,SAAQA,UAAR,EAAoBC,oBAApB,QAA+C,sBAA/C;AACA,OAAOC,WAAP,MAAwB,sBAAxB;AAEA;AACA;AACA;AACA;;AACA,OAAO,SAASC,SAAT,GAAqB;AAE1B,SAAO,gBAAeC,QAAf,EAAyB;AAC9B,QAAI;AACF,YAAMC,QAAQ,GAAG,MAAMH,WAAW,CAACC,SAAZ,EAAvB;AACA,YAAMG,UAAU,GAAGD,QAAQ,CAAC,CAAD,CAAR,CAAYE,MAAZ,CAAmBC,KAAnB,CAAyB,GAAzB,CAAnB;AACA,YAAMC,YAAY,GAAG,EAArB;;AAEA,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,UAAU,CAACK,MAA/B,EAAuCD,CAAC,EAAxC,EAA4C;AAC1CD,QAAAA,YAAY,CAACG,IAAb,CAAkBN,UAAU,CAACI,CAAD,CAAV,CAAcG,IAAd,GAAqBC,WAArB,EAAlB;AACD;;AAAA;AACD,YAAMP,MAAM,GAAG,CAAC,GAAG,IAAIQ,GAAJ,CAAQN,YAAY,CAACO,IAAb,EAAR,CAAJ,CAAf;AACAZ,MAAAA,QAAQ,CAACa,SAAS,CAACV,MAAD,CAAV,CAAR;AACD,KAVD,CAUE,OAAMW,CAAN,EAAS;AACTd,MAAAA,QAAQ,CAACe,kBAAkB,CAAC,IAAD,CAAnB,CAAR;AACD;;AAAA;AACF,GAdD;AAeD;AAAA;;AAED,SAASF,SAAT,CAAmBV,MAAnB,EAA2B;AACzB,SAAO;AAACa,IAAAA,IAAI,EAAEpB,UAAP;AAAmBO,IAAAA;AAAnB,GAAP;AACD;;AAAA;;AAED,SAASY,kBAAT,CAA4BE,YAA5B,EAA0C;AACxC,SAAO;AAACD,IAAAA,IAAI,EAAEnB,oBAAP;AAA6BoB,IAAAA;AAA7B,GAAP;AACD;;AAAA","sourcesContent":["import {GET_GENRES, UPDATE_GENERAL_ERROR} from \"../../../actionTypes\";\nimport BackendCall from \"../../../BackendCall\";\n\n/**\n* Gets the array of genres compiled from all artists who have at least\n* one song in the database.\n*/\nexport function getGenres() {\n\n  return async function(dispatch) {\n    try {\n      const response = await BackendCall.getGenres();\n      const genreArray = response[0].genres.split(\",\");\n      const sortedGenres = [];\n\n      for (let i = 0; i < genreArray.length; i++) {\n        sortedGenres.push(genreArray[i].trim().toUpperCase());\n      };\n      const genres = [...new Set(sortedGenres.sort())];\n      dispatch(addGenres(genres));\n    } catch(e) {\n      dispatch(updateGeneralError(true));\n    };\n  };\n};\n\nfunction addGenres(genres) {\n  return {type: GET_GENRES, genres};\n};\n\nfunction updateGeneralError(generalError) {\n  return {type: UPDATE_GENERAL_ERROR, generalError};\n};"]},"metadata":{},"sourceType":"module"}