{"ast":null,"code":"import { GET_LYRICS, UPDATE_LYRICS_ERROR } from \"../actionTypes\";\nimport BackendCall from '../BackendCall';\n/**\n* Makes a call to the lyrics API to see if lyrics exist for this song. If they\n* do, set lyrics in state and add to databse. \n* Else, add \"No Lyrics\" for track in database.\n* @param {string} track_id - spotify id for track\n* @param {string} artist - artist name\n* @param {string} track - track name\n*/\n\nexport function findLyricsFromAPI(track_id, artist, track) {\n  return async function (dispatch) {\n    try {\n      //GET LYRICS FROM LYRICS API\n      const lyrics = await BackendCall.getLyricsFromAPI({\n        artist,\n        track\n      }); //IF THERE ARE NO LYRICS FOR THAT SONG FROM LYRICS API\n\n      if (lyrics === \"No Lyrics from API\") {\n        //ADD \"NO LYRICS\" AS THE LYRICS VALUE FOR THAT TRACK IN THE DATABASE\n        await BackendCall.addLyrics({\n          track_id,\n          lyrics: \"No Lyrics\"\n        });\n        dispatch(updateLyricsError(true));\n      } else {\n        //ADD LYRICS TO THAT TRACK IN THE DATABASE\n        await BackendCall.addLyrics({\n          track_id,\n          lyrics\n        });\n        dispatch(addLyrics(lyrics));\n      }\n\n      ;\n    } catch (e) {\n      dispatch(updateLyricsError(true));\n    }\n\n    ;\n  };\n}\n;\n\nfunction addLyrics(lyrics) {\n  return {\n    type: GET_LYRICS,\n    lyrics\n  };\n}\n\n;\n\nfunction updateLyricsError(lyricsError) {\n  return {\n    type: UPDATE_LYRICS_ERROR,\n    lyricsError\n  };\n}\n\n;","map":{"version":3,"sources":["/Users/louieg3/Documents/Web_development/iTranslate/Frontend/src/actionCreators/findLyricsFromAPICreator.js"],"names":["GET_LYRICS","UPDATE_LYRICS_ERROR","BackendCall","findLyricsFromAPI","track_id","artist","track","dispatch","lyrics","getLyricsFromAPI","addLyrics","updateLyricsError","e","type","lyricsError"],"mappings":"AAAA,SAAQA,UAAR,EAAoBC,mBAApB,QAA8C,gBAA9C;AACA,OAAOC,WAAP,MAAwB,gBAAxB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,iBAAT,CAA2BC,QAA3B,EAAqCC,MAArC,EAA6CC,KAA7C,EAAoD;AAEzD,SAAO,gBAAeC,QAAf,EAAyB;AAC9B,QAAI;AACF;AACA,YAAMC,MAAM,GAAG,MAAMN,WAAW,CAACO,gBAAZ,CAA6B;AAACJ,QAAAA,MAAD;AAASC,QAAAA;AAAT,OAA7B,CAArB,CAFE,CAIF;;AACA,UAAIE,MAAM,KAAK,oBAAf,EAAqC;AACnC;AACA,cAAMN,WAAW,CAACQ,SAAZ,CAAsB;AAACN,UAAAA,QAAD;AAAWI,UAAAA,MAAM,EAAE;AAAnB,SAAtB,CAAN;AACAD,QAAAA,QAAQ,CAACI,iBAAiB,CAAC,IAAD,CAAlB,CAAR;AACD,OAJD,MAIO;AACL;AACA,cAAMT,WAAW,CAACQ,SAAZ,CAAsB;AAACN,UAAAA,QAAD;AAAWI,UAAAA;AAAX,SAAtB,CAAN;AACAD,QAAAA,QAAQ,CAACG,SAAS,CAACF,MAAD,CAAV,CAAR;AACD;;AAAA;AAEF,KAfD,CAeE,OAAMI,CAAN,EAAS;AACTL,MAAAA,QAAQ,CAACI,iBAAiB,CAAC,IAAD,CAAlB,CAAR;AACD;;AAAA;AACF,GAnBD;AAoBD;AAAA;;AAED,SAASD,SAAT,CAAmBF,MAAnB,EAA2B;AACzB,SAAO;AAACK,IAAAA,IAAI,EAAEb,UAAP;AAAmBQ,IAAAA;AAAnB,GAAP;AACD;;AAAA;;AAED,SAASG,iBAAT,CAA2BG,WAA3B,EAAwC;AACtC,SAAO;AAACD,IAAAA,IAAI,EAAEZ,mBAAP;AAA4Ba,IAAAA;AAA5B,GAAP;AACD;;AAAA","sourcesContent":["import {GET_LYRICS, UPDATE_LYRICS_ERROR} from \"../actionTypes\";\nimport BackendCall from '../BackendCall';\n\n/**\n* Makes a call to the lyrics API to see if lyrics exist for this song. If they\n* do, set lyrics in state and add to databse. \n* Else, add \"No Lyrics\" for track in database.\n* @param {string} track_id - spotify id for track\n* @param {string} artist - artist name\n* @param {string} track - track name\n*/\nexport function findLyricsFromAPI(track_id, artist, track) {\n\n  return async function(dispatch) {\n    try {\n      //GET LYRICS FROM LYRICS API\n      const lyrics = await BackendCall.getLyricsFromAPI({artist, track});\n\n      //IF THERE ARE NO LYRICS FOR THAT SONG FROM LYRICS API\n      if (lyrics === \"No Lyrics from API\") {\n        //ADD \"NO LYRICS\" AS THE LYRICS VALUE FOR THAT TRACK IN THE DATABASE\n        await BackendCall.addLyrics({track_id, lyrics: \"No Lyrics\"});\n        dispatch(updateLyricsError(true));\n      } else {\n        //ADD LYRICS TO THAT TRACK IN THE DATABASE\n        await BackendCall.addLyrics({track_id, lyrics});\n        dispatch(addLyrics(lyrics));\n      };\n\n    } catch(e) {\n      dispatch(updateLyricsError(true));\n    };\n  };\n};\n\nfunction addLyrics(lyrics) {\n  return {type: GET_LYRICS, lyrics};\n};\n\nfunction updateLyricsError(lyricsError) {\n  return {type: UPDATE_LYRICS_ERROR, lyricsError};\n};"]},"metadata":{},"sourceType":"module"}