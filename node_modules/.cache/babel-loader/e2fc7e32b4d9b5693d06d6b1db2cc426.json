{"ast":null,"code":"import { GET_RESULTS, UPDATE_SEARCH_ERROR } from \"../actionTypes\";\nimport SpotifyAPI from \"../SpotifyAPI\";\n/**\n* Makes a call to the spotify API to get array of music objects\n* that best match the searchVal. Then so long as the array returned from\n* Spotify API has length, we update the store and set results to that array.\n* If the array is empty, we update search error reducer in store which will then\n* trigger a flash message saying \"nothing found with that input\"\n* @param {string} searchVal - input value form the search field\n*/\n\nexport function setResultsArray(searchVal) {\n  return async function (dispatch) {\n    const results = await SpotifyAPI.requestSearch(searchVal);\n\n    try {\n      if (results === \"Not Found\") {\n        dispatch(updateSearchError(true));\n      } else {\n        dispatch(pushResultsArray(results));\n      }\n\n      ;\n    } catch (e) {\n      dispatch(updateSearchError(true));\n    }\n\n    ;\n  };\n}\n;\n\nfunction pushResultsArray(results) {\n  return {\n    type: GET_RESULTS,\n    results\n  };\n}\n\n;\n\nfunction updateSearchError(searchError) {\n  return {\n    type: UPDATE_SEARCH_ERROR,\n    searchError\n  };\n}\n\n;","map":{"version":3,"sources":["/Users/louieg3/Documents/Web_development/iTranslate/Frontend/src/actionCreators/setResultsArrayCreator.js"],"names":["GET_RESULTS","UPDATE_SEARCH_ERROR","SpotifyAPI","setResultsArray","searchVal","dispatch","results","requestSearch","updateSearchError","pushResultsArray","e","type","searchError"],"mappings":"AAAA,SAAQA,WAAR,EAAqBC,mBAArB,QAA+C,gBAA/C;AACA,OAAOC,UAAP,MAAuB,eAAvB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,eAAT,CAAyBC,SAAzB,EAAoC;AAEzC,SAAO,gBAAeC,QAAf,EAAyB;AAC9B,UAAMC,OAAO,GAAG,MAAMJ,UAAU,CAACK,aAAX,CAAyBH,SAAzB,CAAtB;;AAEA,QAAI;AAEF,UAAIE,OAAO,KAAK,WAAhB,EAA6B;AAC3BD,QAAAA,QAAQ,CAACG,iBAAiB,CAAC,IAAD,CAAlB,CAAR;AACD,OAFD,MAEO;AACLH,QAAAA,QAAQ,CAACI,gBAAgB,CAACH,OAAD,CAAjB,CAAR;AACD;;AAAA;AACF,KAPD,CAOE,OAAMI,CAAN,EAAS;AACTL,MAAAA,QAAQ,CAACG,iBAAiB,CAAC,IAAD,CAAlB,CAAR;AACD;;AAAA;AACF,GAbD;AAcD;AAAA;;AAED,SAASC,gBAAT,CAA0BH,OAA1B,EAAmC;AACjC,SAAO;AAACK,IAAAA,IAAI,EAAEX,WAAP;AAAoBM,IAAAA;AAApB,GAAP;AACD;;AAAA;;AAED,SAASE,iBAAT,CAA2BI,WAA3B,EAAwC;AACtC,SAAO;AAACD,IAAAA,IAAI,EAAEV,mBAAP;AAA4BW,IAAAA;AAA5B,GAAP;AACD;;AAAA","sourcesContent":["import {GET_RESULTS, UPDATE_SEARCH_ERROR} from \"../actionTypes\";\nimport SpotifyAPI from \"../SpotifyAPI\";\n\n/**\n* Makes a call to the spotify API to get array of music objects\n* that best match the searchVal. Then so long as the array returned from\n* Spotify API has length, we update the store and set results to that array.\n* If the array is empty, we update search error reducer in store which will then\n* trigger a flash message saying \"nothing found with that input\"\n* @param {string} searchVal - input value form the search field\n*/\nexport function setResultsArray(searchVal) {\n\n  return async function(dispatch) {\n    const results = await SpotifyAPI.requestSearch(searchVal);\n\n    try {\n\n      if (results === \"Not Found\") {\n        dispatch(updateSearchError(true))\n      } else {\n        dispatch(pushResultsArray(results));\n      };\n    } catch(e) {\n      dispatch(updateSearchError(true));\n    };\n  };\n};\n\nfunction pushResultsArray(results) {\n  return {type: GET_RESULTS, results};\n};\n\nfunction updateSearchError(searchError) {\n  return {type: UPDATE_SEARCH_ERROR, searchError}\n};"]},"metadata":{},"sourceType":"module"}