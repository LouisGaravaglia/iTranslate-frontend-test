{"ast":null,"code":"import { GET_LANGUAGES, UPDATE_GENERAL_ERROR } from \"../actionTypes\";\nimport IBMWatsonAPI from \"../IBMWatsonAPI\";\n/**\n* Makes a call to the IBM API to get the array of approved target\n* languages we can translate to.\n*/\n\nexport function getLanguages() {\n  return async function (dispatch) {\n    try {\n      const languages = await IBMWatsonAPI.getLanguages();\n      dispatch(addLanguages(languages));\n    } catch (e) {\n      dispatch(addLanguages([{\n        language: \"\"\n      }]));\n      dispatch(updateGeneralError(true));\n    }\n\n    ;\n  };\n}\n;\n\nfunction addLanguages(languages) {\n  return {\n    type: GET_LANGUAGES,\n    languages\n  };\n}\n\n;\n\nfunction updateGeneralError(generalError) {\n  return {\n    type: UPDATE_GENERAL_ERROR,\n    generalError\n  };\n}\n\n;","map":{"version":3,"sources":["/Users/louieg3/Documents/Web_development/iTranslate/Frontend/src/actionCreators/getLanguagesCreator.js"],"names":["GET_LANGUAGES","UPDATE_GENERAL_ERROR","IBMWatsonAPI","getLanguages","dispatch","languages","addLanguages","e","language","updateGeneralError","type","generalError"],"mappings":"AAAA,SAAQA,aAAR,EAAuBC,oBAAvB,QAAkD,gBAAlD;AACA,OAAOC,YAAP,MAAyB,iBAAzB;AAEA;AACA;AACA;AACA;;AACA,OAAO,SAASC,YAAT,GAAwB;AAE7B,SAAO,gBAAeC,QAAf,EAAyB;AAC9B,QAAI;AACF,YAAMC,SAAS,GAAG,MAAMH,YAAY,CAACC,YAAb,EAAxB;AACAC,MAAAA,QAAQ,CAACE,YAAY,CAACD,SAAD,CAAb,CAAR;AACD,KAHD,CAGE,OAAME,CAAN,EAAS;AACTH,MAAAA,QAAQ,CAACE,YAAY,CAAC,CAAC;AAACE,QAAAA,QAAQ,EAAC;AAAV,OAAD,CAAD,CAAb,CAAR;AACAJ,MAAAA,QAAQ,CAACK,kBAAkB,CAAC,IAAD,CAAnB,CAAR;AACD;;AAAA;AACF,GARD;AASD;AAAA;;AAED,SAASH,YAAT,CAAsBD,SAAtB,EAAiC;AAC/B,SAAO;AAACK,IAAAA,IAAI,EAAEV,aAAP;AAAsBK,IAAAA;AAAtB,GAAP;AACD;;AAAA;;AAED,SAASI,kBAAT,CAA4BE,YAA5B,EAA0C;AACxC,SAAO;AAACD,IAAAA,IAAI,EAAET,oBAAP;AAA6BU,IAAAA;AAA7B,GAAP;AACD;;AAAA","sourcesContent":["import {GET_LANGUAGES, UPDATE_GENERAL_ERROR} from \"../actionTypes\";\nimport IBMWatsonAPI from \"../IBMWatsonAPI\";\n\n/**\n* Makes a call to the IBM API to get the array of approved target\n* languages we can translate to.\n*/\nexport function getLanguages() {\n\n  return async function(dispatch) {\n    try {\n      const languages = await IBMWatsonAPI.getLanguages();\n      dispatch(addLanguages(languages));\n    } catch(e) {\n      dispatch(addLanguages([{language:\"\"}]));\n      dispatch(updateGeneralError(true));\n    };\n  };\n};\n\nfunction addLanguages(languages) {\n  return {type: GET_LANGUAGES, languages};\n};\n\nfunction updateGeneralError(generalError) {\n  return {type: UPDATE_GENERAL_ERROR, generalError};\n};"]},"metadata":{},"sourceType":"module"}