{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/louieg3/Documents/Web_development/iTranslate/Frontend/src/Hover.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState, useRef, useCallback } from \"react\";\nimport { animated, useSpring } from 'react-spring';\n\nconst Hover = ({\n  scale,\n  timing = 150,\n  children,\n  previewURL = 'Not a Track'\n}) => {\n  _s();\n\n  const [isHovered, setIsHovered] = useState(false);\n  let audioVolume = 0.2; //IF THERE IS NO PREVIEW SONG AVAILABLE FROM SPOTIFY, SET IT TO A RANDOM SONG AND SET VOLUME TO 0.\n\n  if (previewURL === 'No URL') {\n    previewURL = 'https://p.scdn.co/mp3-preview/f08e6c437794cfbfd12669594dfe095229e3f538?cid=0ab9a52692fa489d8663530facb74af9';\n    audioVolume = 0.0;\n  }\n\n  ; //REF FOR EACH AUDIO OBJECT THAT IS UNIQUE TO EACH TRACK SO THAT IT CAN PLAY/PAUSE ON MOUSE-ENTER MOUSE-LEAVE\n\n  const audio = useRef(new Audio(previewURL)); //BOUNCE ANIMATION CONFIGURATIONS\n\n  const style = useSpring({\n    display: 'inline-block',\n    transform: isHovered ? `scale(${scale})` : `scale(1)`,\n    config: {\n      tension: 300,\n      friction: 10\n    }\n  }); //SET THE TIMER TO STOP THE ANIMATION AFTER A SET AMOUNT OF TIME\n\n  useEffect(() => {\n    if (!isHovered) {\n      return;\n    }\n\n    ;\n    const timeoutId = window.setTimeout(() => {\n      setIsHovered(false);\n    }, timing);\n    return () => {\n      window.clearTimeout(timeoutId);\n    };\n  }, [isHovered, timing]); //TRIGGER THE ANIMATION AND THE AUDIO ON MOUSE-ENTER\n\n  const trigger = () => {\n    setIsHovered(true);\n\n    if (previewURL !== 'Not a Track') {\n      audio.current.play();\n      audio.current.volume = audioVolume;\n    }\n\n    ;\n  }; //PAUSE THE AUDIO ON MOUSE-LEAVE\n\n\n  const stopMusic = () => {\n    if (previewURL !== 'Not a Track') {\n      audio.current.pause();\n    }\n\n    ;\n  };\n\n  return /*#__PURE__*/_jsxDEV(animated.span, {\n    className: \"Hover-Box\",\n    onMouseEnter: trigger,\n    onMouseLeave: stopMusic,\n    style: style,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Hover, \"htH8l0YcqDd+rywdHKHvMgTILvA=\", false, function () {\n  return [useSpring];\n});\n\n_c = Hover;\nexport default Hover;\n\nvar _c;\n\n$RefreshReg$(_c, \"Hover\");","map":{"version":3,"sources":["/Users/louieg3/Documents/Web_development/iTranslate/Frontend/src/Hover.js"],"names":["React","useEffect","useState","useRef","useCallback","animated","useSpring","Hover","scale","timing","children","previewURL","isHovered","setIsHovered","audioVolume","audio","Audio","style","display","transform","config","tension","friction","timeoutId","window","setTimeout","clearTimeout","trigger","current","play","volume","stopMusic","pause"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,QAA1B,EAAoCC,MAApC,EAA4CC,WAA5C,QAA8D,OAA9D;AACA,SAAQC,QAAR,EAAkBC,SAAlB,QAAkC,cAAlC;;AAEA,MAAMC,KAAK,GAAG,CAAC;AAACC,EAAAA,KAAD;AAAQC,EAAAA,MAAM,GAAG,GAAjB;AAAsBC,EAAAA,QAAtB;AAAgCC,EAAAA,UAAU,GAAC;AAA3C,CAAD,KAA+D;AAAA;;AAC3E,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BX,QAAQ,CAAC,KAAD,CAA1C;AACA,MAAIY,WAAW,GAAG,GAAlB,CAF2E,CAI3E;;AACA,MAAIH,UAAU,KAAK,QAAnB,EAA6B;AAC3BA,IAAAA,UAAU,GAAG,6GAAb;AACAG,IAAAA,WAAW,GAAG,GAAd;AACD;;AAAA,GAR0E,CAU3E;;AACA,QAAMC,KAAK,GAAGZ,MAAM,CAAC,IAAIa,KAAJ,CAAUL,UAAV,CAAD,CAApB,CAX2E,CAa3E;;AACA,QAAMM,KAAK,GAAGX,SAAS,CAAC;AACtBY,IAAAA,OAAO,EAAE,cADa;AAEtBC,IAAAA,SAAS,EAAEP,SAAS,GACf,SAAQJ,KAAM,GADC,GAEf,UAJiB;AAKtBY,IAAAA,MAAM,EAAE;AACNC,MAAAA,OAAO,EAAE,GADH;AAENC,MAAAA,QAAQ,EAAE;AAFJ;AALc,GAAD,CAAvB,CAd2E,CAyB3E;;AACArB,EAAAA,SAAS,CAAC,MAAM;AAEd,QAAI,CAACW,SAAL,EAAgB;AACd;AACD;;AAAA;AAED,UAAMW,SAAS,GAAGC,MAAM,CAACC,UAAP,CAAkB,MAAM;AACxCZ,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACD,KAFiB,EAEfJ,MAFe,CAAlB;AAIA,WAAO,MAAM;AACXe,MAAAA,MAAM,CAACE,YAAP,CAAoBH,SAApB;AACD,KAFD;AAGD,GAbQ,EAaN,CAACX,SAAD,EAAYH,MAAZ,CAbM,CAAT,CA1B2E,CAyC3E;;AACA,QAAMkB,OAAO,GAAG,MAAM;AACpBd,IAAAA,YAAY,CAAC,IAAD,CAAZ;;AAEA,QAAIF,UAAU,KAAK,aAAnB,EAAkC;AAChCI,MAAAA,KAAK,CAACa,OAAN,CAAcC,IAAd;AACAd,MAAAA,KAAK,CAACa,OAAN,CAAcE,MAAd,GAAuBhB,WAAvB;AACD;;AAAA;AACF,GAPD,CA1C2E,CAmD3E;;;AACA,QAAMiB,SAAS,GAAG,MAAM;AAEtB,QAAIpB,UAAU,KAAK,aAAnB,EAAkC;AAChCI,MAAAA,KAAK,CAACa,OAAN,CAAcI,KAAd;AACD;;AAAA;AACF,GALD;;AAOA,sBACE,QAAC,QAAD,CAAU,IAAV;AAAe,IAAA,SAAS,EAAC,WAAzB;AAAqC,IAAA,YAAY,EAAEL,OAAnD;AAA4D,IAAA,YAAY,EAAEI,SAA1E;AAAqF,IAAA,KAAK,EAAEd,KAA5F;AAAA,cACGP;AADH;AAAA;AAAA;AAAA;AAAA,UADF;AAKD,CAhED;;GAAMH,K;UAcUD,S;;;KAdVC,K;AAkEN,eAAeA,KAAf","sourcesContent":["import React, {useEffect, useState, useRef, useCallback} from \"react\";\nimport {animated, useSpring} from 'react-spring';\n\nconst Hover = ({scale, timing = 150, children, previewURL='Not a Track'}) => {\n  const [isHovered, setIsHovered] = useState(false);\n  let audioVolume = 0.2;\n\n  //IF THERE IS NO PREVIEW SONG AVAILABLE FROM SPOTIFY, SET IT TO A RANDOM SONG AND SET VOLUME TO 0.\n  if (previewURL === 'No URL') {\n    previewURL = 'https://p.scdn.co/mp3-preview/f08e6c437794cfbfd12669594dfe095229e3f538?cid=0ab9a52692fa489d8663530facb74af9'\n    audioVolume = 0.0;\n  };\n\n  //REF FOR EACH AUDIO OBJECT THAT IS UNIQUE TO EACH TRACK SO THAT IT CAN PLAY/PAUSE ON MOUSE-ENTER MOUSE-LEAVE\n  const audio = useRef(new Audio(previewURL));\n\n  //BOUNCE ANIMATION CONFIGURATIONS\n  const style = useSpring({\n    display: 'inline-block',\n    transform: isHovered\n      ? `scale(${scale})`\n      : `scale(1)`,\n    config: {\n      tension: 300,\n      friction: 10,\n    },\n  });\n\n  //SET THE TIMER TO STOP THE ANIMATION AFTER A SET AMOUNT OF TIME\n  useEffect(() => {\n\n    if (!isHovered) {\n      return;\n    };\n\n    const timeoutId = window.setTimeout(() => {\n      setIsHovered(false);\n    }, timing);\n\n    return () => {\n      window.clearTimeout(timeoutId);\n    };\n  }, [isHovered, timing]);\n\n  //TRIGGER THE ANIMATION AND THE AUDIO ON MOUSE-ENTER\n  const trigger = () => {\n    setIsHovered(true);\n\n    if (previewURL !== 'Not a Track') {\n      audio.current.play();\n      audio.current.volume = audioVolume;\n    };\n  };\n\n  //PAUSE THE AUDIO ON MOUSE-LEAVE\n  const stopMusic = () => {\n    \n    if (previewURL !== 'Not a Track') {\n      audio.current.pause();\n    };\n  };\n\n  return (\n    <animated.span className=\"Hover-Box\" onMouseEnter={trigger} onMouseLeave={stopMusic} style={style}>\n      {children}\n    </animated.span>\n  );\n};\n\nexport default Hover;"]},"metadata":{},"sourceType":"module"}