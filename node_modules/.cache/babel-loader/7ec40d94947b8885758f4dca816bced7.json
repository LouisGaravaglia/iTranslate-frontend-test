{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/louieg3/Documents/Web_development/iTranslate/Frontend/src/Search.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useRef, useEffect, useCallback } from 'react';\nimport { useSpring, animated } from 'react-spring'; //COMPONENT IMPORTS\n\nimport FlashMessage from \"./FlashMessage\";\nimport LanguageSelect from \"./LanguageSelect\";\nimport LyricsTranslation from \"./LyricsTranslation\";\nimport Tracks from \"./Tracks\";\nimport SearchLanding from \"./SearchLanding\";\nimport ToTopArrow from \"./ToTopArrow\"; //REDUX IMPORTS\n\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { resetLanguageError, resetTranslationError, resetLyricsError, resetSearchError } from \"./actionCreators/handleErrorsCreator\";\nimport { setResultsArray } from \"./actionCreators/setResultsArrayCreator\";\nimport { resetStore } from \"./actionCreators/resetStoreCreator\"; //CUSTOM HOOK IMPORTS\n\nimport useOnScreen from \"./hooks/useOnScreen\";\n\nconst Search = () => {\n  _s();\n\n  //STATE FOR ANIMATIONS\n  const [bgColor, setBgColor] = useState(\"#1D4DBE\"); //REDUX STORE\n\n  const translationError = useSelector(store => store.errors.translationError);\n  const languageError = useSelector(store => store.errors.languageError);\n  const lyricsError = useSelector(store => store.errors.lyricsError);\n  const lyrics = useSelector(store => store.lyrics);\n  const searchResults = useSelector(store => store.results);\n  const searchError = useSelector(store => store.errors.searchError);\n  const selectedTrackId = useSelector(store => store.selectedTrack.trackId);\n  const translation = useSelector(store => store.translation);\n  const dispatch = useDispatch(); //STATE FOR FLASH MESSAGES\n\n  const [searchFlashMessage, setSearchFlashMessage] = useState(false);\n  const [noLyricsFlashMessage, setNoLyricsFlashMessage] = useState(false);\n  const [languageNotFoundFlashMessage, setLanguageNotFoundFlashMessage] = useState(false);\n  const [translationErrorFlashMessage, setTranslationErrorFlashMessage] = useState(false); //REFS FOR PAGE TRAVERSAL\n\n  const searchResultsRef = useRef();\n  const selectLanguageRef = useRef();\n  const showLyricsTranslationRef = useRef();\n  const searchRef = useRef(); ////////////////////////////////////////////////////  ANIMATION FOR BACKGROUND COLOR  ////////////////////////////////////////////////////\n\n  const searchBarInView = useOnScreen(searchRef, {\n    threshold: 0.7\n  });\n  const searchResultsInView = useOnScreen(searchResultsRef, {\n    threshold: 0.7\n  });\n  const selectLanguageInView = useOnScreen(selectLanguageRef, {\n    threshold: 0.7\n  });\n  const LyricsTranslationInView = useOnScreen(showLyricsTranslationRef, {\n    threshold: 0.2\n  });\n  useEffect(() => {\n    const changeInView = (searchResultsInView, searchBarInView, selectLanguageInView, LyricsTranslationInView) => {\n      if (searchBarInView) {\n        setBgColor(\"#A800FF\");\n      } else if (searchResultsInView) {\n        setBgColor(\"#7F00FF\");\n      } else if (selectLanguageInView) {\n        setBgColor(\"#6000FF\");\n      } else if (LyricsTranslationInView) {\n        setBgColor(\"#4200FF\");\n      }\n\n      ;\n    };\n\n    changeInView(searchResultsInView, searchBarInView, selectLanguageInView, LyricsTranslationInView);\n  }, [searchResultsInView, searchBarInView, selectLanguageInView, LyricsTranslationInView]);\n  const springProps = useSpring({\n    backgroundColor: bgColor,\n    config: {\n      duration: 300\n    }\n  }); ////////////////////////////////////////////////////  USE EFFECTS  ////////////////////////////////////////////////////\n  //FUNCTION TO BE CALLED IN BELOW USE-EFFECTS TO SCROLL TO NEXT DIV AFTER CLICK\n\n  const scrollToNextDiv = useCallback(async (state, ref) => {\n    if (state && state !== \"Could not read language value\") {\n      ref.current.scrollIntoView({\n        behavior: \"smooth\"\n      });\n    }\n\n    ;\n  }, []); //SCROLL DOWN TO SEARCH RESULTS DIV WHEN RESULTS ARE SET IN STATE\n\n  useEffect(() => {\n    scrollToNextDiv(searchResults, searchResultsRef);\n  }, [searchResults, searchResultsRef, scrollToNextDiv]); //SCROLL DOWN TO LANGUAGE SEARCH BAR WHEN SELECTED TRACK HAS BE SET IN STATE\n\n  useEffect(() => {\n    scrollToNextDiv(lyrics, selectLanguageRef);\n  }, [lyrics, selectLanguageRef, scrollToNextDiv]); //SCROLL DOWN TO LANGUAGE SEARCH BAR WHEN SELECTED TRACK HAS BE SET IN STATE\n\n  useEffect(() => {\n    scrollToNextDiv(translation, showLyricsTranslationRef);\n  }, [translation, showLyricsTranslationRef, scrollToNextDiv]); //LISTENS FOR ANY CHANGES IN ERRORS IN STATE AND WILL TRIGGER FLASH MESSAGES ACCORDINGLY\n\n  useEffect(() => {\n    const displayFlashMessage = () => {\n      if (lyricsError) {\n        setNoLyricsFlashMessage(true);\n        dispatch(resetLyricsError());\n      }\n\n      ;\n\n      if (languageError) {\n        setLanguageNotFoundFlashMessage(true);\n        dispatch(resetLanguageError());\n      }\n\n      ;\n\n      if (translationError) {\n        setTranslationErrorFlashMessage(true);\n        dispatch(resetTranslationError());\n      }\n\n      ;\n\n      if (searchError) {\n        setSearchFlashMessage(true);\n        dispatch(resetSearchError());\n      }\n\n      ;\n    };\n\n    displayFlashMessage();\n  }, [translationError, lyricsError, searchError, languageError, dispatch]); ////////////////////////////////////////////////////  HANDLE CLICK FUNCTIONS  ////////////////////////////////////////////////////\n\n  const handleTrackSearchSubmit = async searchVal => {\n    dispatch(setResultsArray(searchVal));\n    dispatch(resetStore(\"lyrics\", \"translation\", \"selectedTrack\"));\n  }; ////////////////////////////////////////////////////  JSX VARIABLES  ////////////////////////////////////////////////////\n  //DISPLAY SEARCH RESULTS FROM SPOTIFY API COMPONENT\n\n\n  const SearchBarDiv = /*#__PURE__*/_jsxDEV(animated.div, {\n    style: springProps,\n    ref: searchRef,\n    children: /*#__PURE__*/_jsxDEV(SearchLanding, {\n      handleTrackSearchSubmit: handleTrackSearchSubmit\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 126,\n    columnNumber: 5\n  }, this); //DISPLAY SEARCH RESULTS FROM SPOTIFY API COMPONENT\n\n\n  let SearchResultsDiv;\n  if (searchResults) SearchResultsDiv = /*#__PURE__*/_jsxDEV(animated.div, {\n    style: springProps,\n    ref: searchResultsRef,\n    children: /*#__PURE__*/_jsxDEV(Tracks, {\n      results: searchResults,\n      typeOfResults: \"search-results\",\n      itemsPerPage: 1,\n      animateIn: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 135,\n    columnNumber: 5\n  }, this); //DISPLAY LANGUAGE SELECTION SEARCH BAR\n\n  let LanguageSelectDiv;\n  if (lyrics) LanguageSelectDiv = /*#__PURE__*/_jsxDEV(animated.div, {\n    style: springProps,\n    ref: selectLanguageRef,\n    children: /*#__PURE__*/_jsxDEV(LanguageSelect, {\n      selectedTrackId: selectedTrackId,\n      typeOfSearch: \"search-language\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 144,\n    columnNumber: 5\n  }, this); //DISPLAY LYRICS AND TRANSLATION\n\n  let LyricsTranslationDiv;\n  if (translation && translation !== \"Could not read language value\") LyricsTranslationDiv = /*#__PURE__*/_jsxDEV(animated.div, {\n    style: springProps,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"inViewPlaceholder\",\n      ref: showLyricsTranslationRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ToTopArrow, {\n      topRef: searchRef,\n      topInView: searchBarInView\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(LyricsTranslation, {\n      typeOfLyricsTranslation: \"search\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 153,\n    columnNumber: 5\n  }, this); ////////////////////////////////////////////////////  RETURN  ////////////////////////////////////////////////////\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Flash-Messages-Container\",\n      children: [searchFlashMessage && /*#__PURE__*/_jsxDEV(FlashMessage, {\n        setState: setSearchFlashMessage,\n        message: \"We couldn't find any songs with that Artist or Song name, please try again.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 33\n      }, this), noLyricsFlashMessage && /*#__PURE__*/_jsxDEV(FlashMessage, {\n        setState: setNoLyricsFlashMessage,\n        message: \"Unfortunately there are no Lyrics for that song yet.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 35\n      }, this), languageNotFoundFlashMessage && /*#__PURE__*/_jsxDEV(FlashMessage, {\n        setState: setLanguageNotFoundFlashMessage,\n        message: \"That Language was not found, please try again.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 43\n      }, this), translationErrorFlashMessage && /*#__PURE__*/_jsxDEV(FlashMessage, {\n        setState: setTranslationErrorFlashMessage,\n        message: \"Sorry, we couldn't get a translation at this moment.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 43\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 7\n    }, this), SearchBarDiv, SearchResultsDiv, LanguageSelectDiv, LyricsTranslationDiv]\n  }, void 0, true);\n};\n\n_s(Search, \"mzxlEI9uU6cDhJin6k5JfQqK7oo=\", false, function () {\n  return [useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useDispatch, useOnScreen, useOnScreen, useOnScreen, useOnScreen, useSpring];\n});\n\n_c = Search;\nexport default Search;\n\nvar _c;\n\n$RefreshReg$(_c, \"Search\");","map":{"version":3,"sources":["/Users/louieg3/Documents/Web_development/iTranslate/Frontend/src/Search.js"],"names":["React","useState","useRef","useEffect","useCallback","useSpring","animated","FlashMessage","LanguageSelect","LyricsTranslation","Tracks","SearchLanding","ToTopArrow","useDispatch","useSelector","resetLanguageError","resetTranslationError","resetLyricsError","resetSearchError","setResultsArray","resetStore","useOnScreen","Search","bgColor","setBgColor","translationError","store","errors","languageError","lyricsError","lyrics","searchResults","results","searchError","selectedTrackId","selectedTrack","trackId","translation","dispatch","searchFlashMessage","setSearchFlashMessage","noLyricsFlashMessage","setNoLyricsFlashMessage","languageNotFoundFlashMessage","setLanguageNotFoundFlashMessage","translationErrorFlashMessage","setTranslationErrorFlashMessage","searchResultsRef","selectLanguageRef","showLyricsTranslationRef","searchRef","searchBarInView","threshold","searchResultsInView","selectLanguageInView","LyricsTranslationInView","changeInView","springProps","backgroundColor","config","duration","scrollToNextDiv","state","ref","current","scrollIntoView","behavior","displayFlashMessage","handleTrackSearchSubmit","searchVal","SearchBarDiv","SearchResultsDiv","LanguageSelectDiv","LyricsTranslationDiv"],"mappings":"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","sourcesContent":["import React, {useState, useRef, useEffect, useCallback} from 'react';\nimport {useSpring, animated} from 'react-spring';\n//COMPONENT IMPORTS\nimport FlashMessage from \"./FlashMessage\";\nimport LanguageSelect from \"./LanguageSelect\";\nimport LyricsTranslation from \"./LyricsTranslation\";\nimport Tracks from \"./Tracks\";\nimport SearchLanding from \"./SearchLanding\";\nimport ToTopArrow from \"./ToTopArrow\";\n//REDUX IMPORTS\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {resetLanguageError, resetTranslationError, resetLyricsError, resetSearchError} from \"./actionCreators/handleErrorsCreator\";\nimport {setResultsArray} from \"./actionCreators/setResultsArrayCreator\";\nimport {resetStore} from \"./actionCreators/resetStoreCreator\";\n//CUSTOM HOOK IMPORTS\nimport useOnScreen from \"./hooks/useOnScreen\";\n\nconst Search = () => {\n  //STATE FOR ANIMATIONS\n  const [bgColor, setBgColor] = useState(\"#1D4DBE\");\n  //REDUX STORE\n  const translationError = useSelector(store => store.errors.translationError);\n  const languageError = useSelector(store => store.errors.languageError);\n  const lyricsError = useSelector(store => store.errors.lyricsError);\n  const lyrics = useSelector(store => store.lyrics);\n  const searchResults = useSelector(store => store.results);\n  const searchError = useSelector(store => store.errors.searchError);\n  const selectedTrackId = useSelector(store => store.selectedTrack.trackId);\n  const translation = useSelector(store => store.translation);\n  const dispatch = useDispatch();\n  //STATE FOR FLASH MESSAGES\n  const [searchFlashMessage, setSearchFlashMessage] = useState(false);\n  const [noLyricsFlashMessage, setNoLyricsFlashMessage] = useState(false);\n  const [languageNotFoundFlashMessage, setLanguageNotFoundFlashMessage] = useState(false);\n  const [translationErrorFlashMessage, setTranslationErrorFlashMessage] = useState(false);\n  //REFS FOR PAGE TRAVERSAL\n  const searchResultsRef = useRef();\n  const selectLanguageRef = useRef();\n  const showLyricsTranslationRef = useRef();\n  const searchRef = useRef();\n\n////////////////////////////////////////////////////  ANIMATION FOR BACKGROUND COLOR  ////////////////////////////////////////////////////\n\n  const searchBarInView = useOnScreen(searchRef, {threshold: 0.7});\n  const searchResultsInView = useOnScreen(searchResultsRef, {threshold: 0.7});\n  const selectLanguageInView = useOnScreen(selectLanguageRef, {threshold: 0.7});\n  const LyricsTranslationInView = useOnScreen(showLyricsTranslationRef, {threshold: 0.2});\n\n  useEffect(() => {\n\n    const changeInView = (searchResultsInView, searchBarInView, selectLanguageInView, LyricsTranslationInView) => {\n\n      if (searchBarInView) {\n        setBgColor(\"#A800FF\");\n      } else if (searchResultsInView) {\n        setBgColor(\"#7F00FF\");\n      } else if (selectLanguageInView) {\n        setBgColor(\"#6000FF\");\n      } else if (LyricsTranslationInView) {\n        setBgColor(\"#4200FF\");\n      };\n    };\n  changeInView(searchResultsInView, searchBarInView, selectLanguageInView, LyricsTranslationInView);\n  }, [searchResultsInView, searchBarInView, selectLanguageInView, LyricsTranslationInView]);\n\n  const springProps = useSpring({\n    backgroundColor: bgColor,\n    config: {duration: 300}\n  });\n\n////////////////////////////////////////////////////  USE EFFECTS  ////////////////////////////////////////////////////\n\n  //FUNCTION TO BE CALLED IN BELOW USE-EFFECTS TO SCROLL TO NEXT DIV AFTER CLICK\n  const scrollToNextDiv = useCallback(async (state, ref) => {\n\n    if (state && state !== \"Could not read language value\") {\n      ref.current.scrollIntoView({behavior: \"smooth\"});\n    };\n  }, []);\n\n  //SCROLL DOWN TO SEARCH RESULTS DIV WHEN RESULTS ARE SET IN STATE\n  useEffect(() => {scrollToNextDiv(searchResults, searchResultsRef);}, [searchResults, searchResultsRef, scrollToNextDiv]);\n\n  //SCROLL DOWN TO LANGUAGE SEARCH BAR WHEN SELECTED TRACK HAS BE SET IN STATE\n  useEffect(() => {scrollToNextDiv(lyrics, selectLanguageRef);}, [lyrics, selectLanguageRef, scrollToNextDiv]);\n\n  //SCROLL DOWN TO LANGUAGE SEARCH BAR WHEN SELECTED TRACK HAS BE SET IN STATE\n  useEffect(() => {scrollToNextDiv(translation, showLyricsTranslationRef);}, [translation, showLyricsTranslationRef, scrollToNextDiv]);\n\n  //LISTENS FOR ANY CHANGES IN ERRORS IN STATE AND WILL TRIGGER FLASH MESSAGES ACCORDINGLY\n  useEffect(() => {\n\n    const displayFlashMessage = () => {\n\n        if (lyricsError) {\n          setNoLyricsFlashMessage(true);\n          dispatch(resetLyricsError());\n        };\n        if (languageError) {\n          setLanguageNotFoundFlashMessage(true);\n          dispatch(resetLanguageError());\n        };\n        if (translationError) {\n          setTranslationErrorFlashMessage(true);\n          dispatch(resetTranslationError());\n        };\n        if (searchError) {\n          setSearchFlashMessage(true);\n          dispatch(resetSearchError());\n        };\n    };\n    displayFlashMessage();\n  }, [translationError, lyricsError, searchError, languageError, dispatch]);\n\n////////////////////////////////////////////////////  HANDLE CLICK FUNCTIONS  ////////////////////////////////////////////////////\n\n  const handleTrackSearchSubmit = async (searchVal) => {\n    dispatch(setResultsArray(searchVal));\n    dispatch(resetStore(\"lyrics\", \"translation\", \"selectedTrack\"));\n  };\n\n////////////////////////////////////////////////////  JSX VARIABLES  ////////////////////////////////////////////////////\n\n  //DISPLAY SEARCH RESULTS FROM SPOTIFY API COMPONENT\n  const SearchBarDiv = (\n    <animated.div style={springProps} ref={searchRef}>\n      <SearchLanding handleTrackSearchSubmit={handleTrackSearchSubmit}/>\n    </animated.div>\n  );\n\n  //DISPLAY SEARCH RESULTS FROM SPOTIFY API COMPONENT\n  let SearchResultsDiv;\n  \n  if (searchResults) SearchResultsDiv = (\n    <animated.div style={springProps} ref={searchResultsRef}>\n      <Tracks results={searchResults} typeOfResults={\"search-results\"} itemsPerPage={1} animateIn={true}/>\n    </animated.div>\n  );\n\n  //DISPLAY LANGUAGE SELECTION SEARCH BAR\n  let LanguageSelectDiv;\n\n  if (lyrics) LanguageSelectDiv = (\n    <animated.div style={springProps} ref={selectLanguageRef}>\n      <LanguageSelect selectedTrackId={selectedTrackId} typeOfSearch=\"search-language\"/>\n    </animated.div>\n  );\n\n  //DISPLAY LYRICS AND TRANSLATION\n  let LyricsTranslationDiv;\n  \n  if (translation && translation !== \"Could not read language value\") LyricsTranslationDiv = (\n    <animated.div style={springProps}>\n      <div className=\"inViewPlaceholder\" ref={showLyricsTranslationRef}></div>\n      <ToTopArrow topRef={searchRef} topInView={searchBarInView}/>\n      <LyricsTranslation typeOfLyricsTranslation=\"search\"/>\n    </animated.div>\n  );\n\n////////////////////////////////////////////////////  RETURN  ////////////////////////////////////////////////////\n\n  return (\n    <>\n      <div className=\"Flash-Messages-Container\">\n        {searchFlashMessage && (<FlashMessage setState={setSearchFlashMessage} message=\"We couldn't find any songs with that Artist or Song name, please try again.\"/> )}\n        {noLyricsFlashMessage && (<FlashMessage setState={setNoLyricsFlashMessage} message=\"Unfortunately there are no Lyrics for that song yet.\"/> )}\n        {languageNotFoundFlashMessage && (<FlashMessage setState={setLanguageNotFoundFlashMessage} message=\"That Language was not found, please try again.\"/> )}\n        {translationErrorFlashMessage && (<FlashMessage setState={setTranslationErrorFlashMessage} message=\"Sorry, we couldn't get a translation at this moment.\"/> )}\n      </div>\n      {SearchBarDiv}\n      {SearchResultsDiv}\n      {LanguageSelectDiv}\n      {LyricsTranslationDiv}\n   </>\n  );\n};\n\nexport default Search;"]},"metadata":{},"sourceType":"module"}