{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/louieg3/Documents/Web_development/iTranslate/Frontend/src/BrowseByDanceability.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useRef, useEffect, useCallback } from 'react';\nimport { useSpring, animated } from 'react-spring';\nimport './Sass/App.scss'; //COMPONENT IMPORTS\n\nimport LyricsTranslation from \"./LyricsTranslation\";\nimport LanguageSelect from \"./LanguageSelect\";\nimport DanceabilitySearch from \"./DanceabilitySearch\";\nimport Categories from \"./BrowseCategories\";\nimport FlashMessage from \"./FlashMessage\";\nimport ToTopArrow from \"./ToTopArrow\"; //REDUX IMPORTS\n\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { resetLanguageError, resetTranslationError, resetLyricsError, resetGeneralError } from \"./actionCreators/handleErrorsCreator\"; //CUSTOM HOOK IMPORTS\n\nimport useOnScreen from \"./hooks/useOnScreen\";\n\nfunction BrowseByDanceability() {\n  _s();\n\n  //STATE FOR ANIMATIONS\n  const [bgColor, setBgColor] = useState(\"#4e1eff\"); //REDUX STORE\n\n  const lyrics = useSelector(store => store.lyrics);\n  const selectedTrackId = useSelector(store => store.selectedTrack.trackId);\n  const translation = useSelector(store => store.translation);\n  const translationError = useSelector(store => store.errors.translationError);\n  const languageError = useSelector(store => store.errors.languageError);\n  const lyricsError = useSelector(store => store.errors.lyricsError);\n  const generalError = useSelector(store => store.errors.generalError);\n  const dispatch = useDispatch(); //REFS FOR PAGE TRAVERSAL\n\n  const categoryRef = useRef();\n  const DanceabilitySearchRef = useRef();\n  const selectLanguageRef = useRef();\n  const showLyricsTranslationRef = useRef(); //STATE FOR FLASH MESSAGES\n\n  const [noLyricsFlashMessage, setNoLyricsFlashMessage] = useState(false);\n  const [languageNotFoundFlashMessage, setLanguageNotFoundFlashMessage] = useState(false);\n  const [translationErrorFlashMessage, setTranslationErrorFlashMessage] = useState(false);\n  const [generalErrorFlashMessage, setGeneralErrorFlashMessage] = useState(false); ////////////////////////////////////////////////////  USE EFFECTS  ////////////////////////////////////////////////////\n  //LISTENS FOR ANY CHANGES IN ERRORS IN STATE AND WILL TRIGGER FLASH MESSAGES ACCORDINGLY\n\n  useEffect(() => {\n    const displayFlashMessage = () => {\n      if (lyricsError) {\n        setNoLyricsFlashMessage(true);\n        dispatch(resetLyricsError());\n      }\n\n      ;\n\n      if (languageError) {\n        setLanguageNotFoundFlashMessage(true);\n        dispatch(resetLanguageError());\n      }\n\n      ;\n\n      if (translationError) {\n        setTranslationErrorFlashMessage(true);\n        dispatch(resetTranslationError());\n      }\n\n      ;\n\n      if (generalError) {\n        setGeneralErrorFlashMessage(true);\n        dispatch(resetGeneralError());\n      }\n\n      ;\n    };\n\n    displayFlashMessage();\n  }, [languageError, translationError, lyricsError, generalError, dispatch]); //SKIP OVER THE CATEGORIES SINCE THE USER NEEDED TO SEE THAT IN ORDER TO GET TO THIS COMPONENT\n\n  useEffect(() => {\n    const scrollPastCategories = () => {\n      DanceabilitySearchRef.current.scrollIntoView({\n        behavior: \"smooth\"\n      });\n    };\n\n    scrollPastCategories();\n  }, []); //FUNCTION TO BE CALLED IN BELOW USE-EFFECTS TO SCROLL TO NEXT DIV AFTER CLICK\n\n  const scrollToNextDiv = useCallback(async (state, ref) => {\n    if (state && state !== \"Could not read language value\") {\n      ref.current.scrollIntoView({\n        behavior: \"smooth\"\n      });\n    }\n\n    ;\n  }, []); //SCROLL DOWN TO LANGUAGE SEARCH BAR WHEN SELECTED TRACK HAS BE SET IN STATE\n\n  useEffect(() => {\n    scrollToNextDiv(lyrics, selectLanguageRef);\n  }, [lyrics, selectLanguageRef, scrollToNextDiv]); //SCROLL DOWN TO SHOW LYRICS AND TRANSLATION WHEN TRANSLATION HAS BE SET IN STATE\n\n  useEffect(() => {\n    scrollToNextDiv(translation, showLyricsTranslationRef);\n  }, [translation, showLyricsTranslationRef, scrollToNextDiv]); ////////////////////////////////////////////////////  ANIMATION FOR BACKGROUND COLOR  ////////////////////////////////////////////////////\n\n  const categoriesInView = useOnScreen(categoryRef, {\n    threshold: 0.7\n  });\n  const danceabilitySearchInView = useOnScreen(DanceabilitySearchRef, {\n    threshold: 0.7\n  });\n  const selectLanguageInView = useOnScreen(selectLanguageRef, {\n    threshold: 0.7\n  });\n  const lyricsTranslationInView = useOnScreen(showLyricsTranslationRef, {\n    threshold: 0.7\n  });\n  useEffect(() => {\n    const changeInView = (selectLanguageInView, lyricsTranslationInView, danceabilitySearchInView, categoriesInView) => {\n      if (categoriesInView) {\n        setBgColor(\"#4e1eff\");\n      } else if (danceabilitySearchInView) {\n        setBgColor(\"#7c75fc\");\n      } else if (selectLanguageInView) {\n        setBgColor(\"#9eb5fa\");\n      } else if (lyricsTranslationInView) {\n        setBgColor(\"#c1f7f7\");\n      }\n\n      ;\n    };\n\n    changeInView(selectLanguageInView, lyricsTranslationInView, danceabilitySearchInView, categoriesInView);\n  }, [selectLanguageInView, lyricsTranslationInView, danceabilitySearchInView, categoriesInView]);\n  const springProps = useSpring({\n    backgroundColor: bgColor,\n    config: {\n      duration: 300\n    }\n  }); ////////////////////////////////////////////////////  CLICK EVENTS  ////////////////////////////////////////////////////\n\n  const scrollToDanceability = () => {\n    DanceabilitySearchRef.current.scrollIntoView({\n      behavior: \"smooth\"\n    });\n  }; ////////////////////////////////////////////////////  JSX VARIABLES  ////////////////////////////////////////////////////\n  //DISPLAY THE THREE CATEGORIES\n\n\n  const ChooseCategoryDiv = /*#__PURE__*/_jsxDEV(animated.div, {\n    onClick: scrollToDanceability,\n    style: springProps,\n    ref: categoryRef,\n    children: /*#__PURE__*/_jsxDEV(Categories, {\n      needAnimation: false\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 127,\n    columnNumber: 5\n  }, this); //DISPLAY DANCEABILITY SEARCH BAR\n\n\n  const DanceabilitySearchDiv = /*#__PURE__*/_jsxDEV(animated.div, {\n    style: springProps,\n    ref: DanceabilitySearchRef,\n    children: /*#__PURE__*/_jsxDEV(DanceabilitySearch, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 134,\n    columnNumber: 5\n  }, this); //DISPLAY LANGUAGE SELECTION SEARCH BAR\n\n\n  let LanguageSelectDiv;\n  if (lyrics) LanguageSelectDiv = /*#__PURE__*/_jsxDEV(animated.div, {\n    style: springProps,\n    ref: selectLanguageRef,\n    children: /*#__PURE__*/_jsxDEV(LanguageSelect, {\n      selectedTrackId: selectedTrackId,\n      typeOfSearch: \"danceability-language\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 143,\n    columnNumber: 5\n  }, this); //DISPLAY LYRICS AND TRANSLATION\n\n  let LyricsTranslationDiv;\n  if (translation && translation !== \"Could not read language value\") LyricsTranslationDiv = /*#__PURE__*/_jsxDEV(animated.div, {\n    style: springProps,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"inViewPlaceholder\",\n      ref: showLyricsTranslationRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ToTopArrow, {\n      topRef: categoryRef,\n      topInView: categoriesInView\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(LyricsTranslation, {\n      typeOfLyricsTranslation: \"danceability\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 152,\n    columnNumber: 5\n  }, this); ////////////////////////////////////////////////////  RETURN  ////////////////////////////////////////////////////\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Flash-Messages-Container\",\n      children: [noLyricsFlashMessage && /*#__PURE__*/_jsxDEV(FlashMessage, {\n        setState: setNoLyricsFlashMessage,\n        message: \"Unfortunately there are no Lyrics for that song yet.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 35\n      }, this), languageNotFoundFlashMessage && /*#__PURE__*/_jsxDEV(FlashMessage, {\n        setState: setLanguageNotFoundFlashMessage,\n        message: \"That Language was not found, please try again.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 43\n      }, this), translationErrorFlashMessage && /*#__PURE__*/_jsxDEV(FlashMessage, {\n        setState: setTranslationErrorFlashMessage,\n        message: \"Sorry, we couldn't get a translation at this moment.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 43\n      }, this), generalErrorFlashMessage && /*#__PURE__*/_jsxDEV(FlashMessage, {\n        setState: setGeneralErrorFlashMessage,\n        message: \"Uh oh, something went wrong. Please try again.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 39\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 7\n    }, this), ChooseCategoryDiv, DanceabilitySearchDiv, LanguageSelectDiv, LyricsTranslationDiv]\n  }, void 0, true);\n}\n\n_s(BrowseByDanceability, \"My8nk6QLbXFW05GpE8pIYFR03tw=\", false, function () {\n  return [useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useDispatch, useOnScreen, useOnScreen, useOnScreen, useOnScreen, useSpring];\n});\n\n_c = BrowseByDanceability;\n;\nexport default BrowseByDanceability;\n\nvar _c;\n\n$RefreshReg$(_c, \"BrowseByDanceability\");","map":{"version":3,"sources":["/Users/louieg3/Documents/Web_development/iTranslate/Frontend/src/BrowseByDanceability.js"],"names":["React","useState","useRef","useEffect","useCallback","useSpring","animated","LyricsTranslation","LanguageSelect","DanceabilitySearch","Categories","FlashMessage","ToTopArrow","useSelector","useDispatch","resetLanguageError","resetTranslationError","resetLyricsError","resetGeneralError","useOnScreen","BrowseByDanceability","bgColor","setBgColor","lyrics","store","selectedTrackId","selectedTrack","trackId","translation","translationError","errors","languageError","lyricsError","generalError","dispatch","categoryRef","DanceabilitySearchRef","selectLanguageRef","showLyricsTranslationRef","noLyricsFlashMessage","setNoLyricsFlashMessage","languageNotFoundFlashMessage","setLanguageNotFoundFlashMessage","translationErrorFlashMessage","setTranslationErrorFlashMessage","generalErrorFlashMessage","setGeneralErrorFlashMessage","displayFlashMessage","scrollPastCategories","current","scrollIntoView","behavior","scrollToNextDiv","state","ref","categoriesInView","threshold","danceabilitySearchInView","selectLanguageInView","lyricsTranslationInView","changeInView","springProps","backgroundColor","config","duration","scrollToDanceability","ChooseCategoryDiv","DanceabilitySearchDiv","LanguageSelectDiv","LyricsTranslationDiv"],"mappings":"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","sourcesContent":["import React,  {useState, useRef, useEffect, useCallback} from 'react';\nimport {useSpring, animated} from 'react-spring';\nimport './Sass/App.scss';\n//COMPONENT IMPORTS\nimport LyricsTranslation from \"./LyricsTranslation\";\nimport LanguageSelect from \"./LanguageSelect\";\nimport DanceabilitySearch from \"./DanceabilitySearch\";\nimport Categories from \"./BrowseCategories\";\nimport FlashMessage from \"./FlashMessage\";\nimport ToTopArrow from \"./ToTopArrow\";\n//REDUX IMPORTS\nimport {useSelector, useDispatch} from \"react-redux\";\nimport {resetLanguageError, resetTranslationError, resetLyricsError, resetGeneralError} from \"./actionCreators/handleErrorsCreator\";\n//CUSTOM HOOK IMPORTS\nimport useOnScreen from \"./hooks/useOnScreen\";\n\nfunction BrowseByDanceability() {\n  //STATE FOR ANIMATIONS\n  const [bgColor, setBgColor] = useState(\"#4e1eff\");\n  //REDUX STORE\n  const lyrics = useSelector(store => store.lyrics);\n  const selectedTrackId = useSelector(store => store.selectedTrack.trackId);\n  const translation = useSelector(store => store.translation);\n  const translationError = useSelector(store => store.errors.translationError);\n  const languageError = useSelector(store => store.errors.languageError);\n  const lyricsError = useSelector(store => store.errors.lyricsError);\n  const generalError = useSelector(store => store.errors.generalError);\n  const dispatch = useDispatch();\n  //REFS FOR PAGE TRAVERSAL\n  const categoryRef = useRef();\n  const DanceabilitySearchRef = useRef();\n  const selectLanguageRef = useRef();\n  const showLyricsTranslationRef = useRef();\n  //STATE FOR FLASH MESSAGES\n  const [noLyricsFlashMessage, setNoLyricsFlashMessage] = useState(false);\n  const [languageNotFoundFlashMessage, setLanguageNotFoundFlashMessage] = useState(false);\n  const [translationErrorFlashMessage, setTranslationErrorFlashMessage] = useState(false);\n  const [generalErrorFlashMessage, setGeneralErrorFlashMessage] = useState(false);\n\n////////////////////////////////////////////////////  USE EFFECTS  ////////////////////////////////////////////////////\n\n  //LISTENS FOR ANY CHANGES IN ERRORS IN STATE AND WILL TRIGGER FLASH MESSAGES ACCORDINGLY\n  useEffect(() => {\n    const displayFlashMessage = () => {\n\n        if (lyricsError) {\n          setNoLyricsFlashMessage(true);\n          dispatch(resetLyricsError());\n        };\n        if (languageError) {\n          setLanguageNotFoundFlashMessage(true);\n          dispatch(resetLanguageError());\n        };\n        if (translationError) {\n          setTranslationErrorFlashMessage(true);\n          dispatch(resetTranslationError());\n        };\n        if (generalError) {\n          setGeneralErrorFlashMessage(true);\n          dispatch(resetGeneralError());\n        };\n    };\n    displayFlashMessage();\n  }, [languageError, translationError, lyricsError, generalError, dispatch]);\n\n  //SKIP OVER THE CATEGORIES SINCE THE USER NEEDED TO SEE THAT IN ORDER TO GET TO THIS COMPONENT\n  useEffect(() => {\n\n    const scrollPastCategories = () => {\n      DanceabilitySearchRef.current.scrollIntoView({behavior: \"smooth\"});\n    }\n    scrollPastCategories();\n  }, []);\n\n  //FUNCTION TO BE CALLED IN BELOW USE-EFFECTS TO SCROLL TO NEXT DIV AFTER CLICK\n  const scrollToNextDiv = useCallback(async (state, ref) => {\n\n    if (state && state !== \"Could not read language value\") {\n      ref.current.scrollIntoView({behavior: \"smooth\"});\n    };\n  }, []);\n\n  //SCROLL DOWN TO LANGUAGE SEARCH BAR WHEN SELECTED TRACK HAS BE SET IN STATE\n  useEffect(() => {scrollToNextDiv(lyrics, selectLanguageRef);}, [lyrics, selectLanguageRef, scrollToNextDiv]);\n\n  //SCROLL DOWN TO SHOW LYRICS AND TRANSLATION WHEN TRANSLATION HAS BE SET IN STATE\n  useEffect(() => {scrollToNextDiv(translation, showLyricsTranslationRef);}, [translation, showLyricsTranslationRef, scrollToNextDiv]);\n\n////////////////////////////////////////////////////  ANIMATION FOR BACKGROUND COLOR  ////////////////////////////////////////////////////\n\n  const categoriesInView = useOnScreen(categoryRef, {threshold: 0.7});\n  const danceabilitySearchInView = useOnScreen(DanceabilitySearchRef, {threshold: 0.7});\n  const selectLanguageInView = useOnScreen(selectLanguageRef, {threshold: 0.7});\n  const lyricsTranslationInView = useOnScreen(showLyricsTranslationRef, {threshold: 0.7});\n\n  useEffect(() => {\n    const changeInView = (selectLanguageInView, lyricsTranslationInView, danceabilitySearchInView, categoriesInView) => {\n\n      if (categoriesInView) {\n        setBgColor(\"#4e1eff\");\n      } else if (danceabilitySearchInView) {\n        setBgColor(\"#7c75fc\");\n      } else if (selectLanguageInView) {\n        setBgColor(\"#9eb5fa\");\n      } else if (lyricsTranslationInView) {\n        setBgColor(\"#c1f7f7\");\n      };\n    };\n  changeInView(selectLanguageInView, lyricsTranslationInView, danceabilitySearchInView, categoriesInView);\n  }, [selectLanguageInView, lyricsTranslationInView, danceabilitySearchInView, categoriesInView]);\n\n  const springProps = useSpring({\n    backgroundColor: bgColor,\n    config: {duration: 300}\n  });\n\n////////////////////////////////////////////////////  CLICK EVENTS  ////////////////////////////////////////////////////\n\n  const scrollToDanceability = () => {\n    DanceabilitySearchRef.current.scrollIntoView({behavior: \"smooth\"});\n  };\n\n////////////////////////////////////////////////////  JSX VARIABLES  ////////////////////////////////////////////////////\n\n  //DISPLAY THE THREE CATEGORIES\n  const ChooseCategoryDiv = (\n    <animated.div onClick={scrollToDanceability} style={springProps} ref={categoryRef}>\n      <Categories needAnimation={false}/>\n    </animated.div>\n  );\n\n  //DISPLAY DANCEABILITY SEARCH BAR\n  const DanceabilitySearchDiv = (\n    <animated.div style={springProps} ref={DanceabilitySearchRef}>\n      <DanceabilitySearch />\n    </animated.div>\n  );\n\n  //DISPLAY LANGUAGE SELECTION SEARCH BAR\n  let LanguageSelectDiv;\n\n  if (lyrics) LanguageSelectDiv = (\n    <animated.div style={springProps} ref={selectLanguageRef}>\n      <LanguageSelect selectedTrackId={selectedTrackId} typeOfSearch=\"danceability-language\"/>\n    </animated.div>\n  );\n\n  //DISPLAY LYRICS AND TRANSLATION\n  let LyricsTranslationDiv;\n  \n  if (translation && translation !== \"Could not read language value\") LyricsTranslationDiv = (\n    <animated.div style={springProps}>\n      <div className=\"inViewPlaceholder\" ref={showLyricsTranslationRef}></div>\n      <ToTopArrow topRef={categoryRef} topInView={categoriesInView}/>\n      <LyricsTranslation typeOfLyricsTranslation=\"danceability\"/>\n    </animated.div>\n  );\n\n////////////////////////////////////////////////////  RETURN  ////////////////////////////////////////////////////\n\n  return (\n    <>\n      <div className=\"Flash-Messages-Container\">\n        {noLyricsFlashMessage && (<FlashMessage setState={setNoLyricsFlashMessage} message=\"Unfortunately there are no Lyrics for that song yet.\"/> )}\n        {languageNotFoundFlashMessage && (<FlashMessage setState={setLanguageNotFoundFlashMessage} message=\"That Language was not found, please try again.\"/> )}\n        {translationErrorFlashMessage && (<FlashMessage setState={setTranslationErrorFlashMessage} message=\"Sorry, we couldn't get a translation at this moment.\"/> )}\n        {generalErrorFlashMessage && (<FlashMessage setState={setGeneralErrorFlashMessage} message=\"Uh oh, something went wrong. Please try again.\"/> )}\n      </div>\n      {ChooseCategoryDiv}\n      {DanceabilitySearchDiv}\n      {LanguageSelectDiv}\n      {LyricsTranslationDiv}\n    </>\n  );\n};\n\nexport default BrowseByDanceability;"]},"metadata":{},"sourceType":"module"}