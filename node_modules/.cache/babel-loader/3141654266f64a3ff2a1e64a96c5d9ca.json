{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/louieg3/Documents/Web_development/iTranslate/Frontend/src/BrowseByArtists.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useRef, useEffect, useCallback } from 'react';\nimport { useSpring, animated } from 'react-spring';\nimport './Sass/App.scss'; //COMPONENT IMPORTS\n\nimport SearchResultList from \"./SearchResultList\";\nimport LyricsTranslation from \"./LyricsTranslation\";\nimport Tracks from \"./Tracks\";\nimport LanguageSelect from \"./LanguageSelect\";\nimport Albums from \"./Albums\";\nimport Categories from \"./BrowseCategories\";\nimport FlashMessage from \"./FlashMessage\";\nimport ToTopArrow from \"./ToTopArrow\"; //REDUX IMPORTS\n\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { getAlbums } from \"./actionCreators/BrowseRoute/Artists/getAlbumsCreator\";\nimport { resetStore } from \"./actionCreators/resetStoreCreator\";\nimport { getAllArtists } from \"./actionCreators/BrowseRoute/Artists/getAllArtistsCreator\";\nimport { resetLanguageError, resetTranslationError, resetLyricsError, resetGeneralError } from \"./actionCreators/handleErrorsCreator\"; //CUSTOM HOOK IMPORTS\n\nimport useOnScreen from \"./hooks/useOnScreen\"; //IONICONS IMPORTS\n\nimport IosMusicalNotes from 'react-ionicons/lib/IosMusicalNotes';\n\nfunction BrowseByArtists() {\n  _s();\n\n  //REACT STATE\n  const [bgColor, setBgColor] = useState(\"#4e1eff\");\n  const [isLoading, setIsLoading] = useState(false);\n  const [selectedArtistId, setSelectedArtistId] = useState(\"\"); //STATE FOR FLASH MESSAGES\n\n  const [noLyricsFlashMessage, setNoLyricsFlashMessage] = useState(false);\n  const [languageNotFoundFlashMessage, setLanguageNotFoundFlashMessage] = useState(false);\n  const [translationErrorFlashMessage, setTranslationErrorFlashMessage] = useState(false);\n  const [generalErrorFlashMessage, setGeneralErrorFlashMessage] = useState(false); //REDUX STORE\n\n  const dispatch = useDispatch();\n  const lyrics = useSelector(store => store.lyrics);\n  const artists = useSelector(store => store.allArtists);\n  const albums = useSelector(store => store.albums);\n  const tracks = useSelector(store => store.tracks);\n  const selectedTrackId = useSelector(store => store.selectedTrack.trackId);\n  const translation = useSelector(store => store.translation);\n  const translationError = useSelector(store => store.errors.translationError);\n  const languageError = useSelector(store => store.errors.languageError);\n  const lyricsError = useSelector(store => store.errors.lyricsError);\n  const generalError = useSelector(store => store.errors.generalError); //REFS FOR PAGE TRAVERSAL\n\n  const categoryRef = useRef();\n  const albumResultsRef = useRef();\n  const selectLanguageRef = useRef();\n  const trackResultsRef = useRef();\n  const showLyricsTranslationRef = useRef();\n  const artistsResultsRef = useRef(); ////////////////////////////////////////////////////  USE EFFECTS  ////////////////////////////////////////////////////\n  //WATCHES FOR EITHER AN ERROR OR THE LYRICS TO COME THROUGH TO REMOVE LOADING ICON\n\n  useEffect(() => {\n    const updateIsLoading = () => {\n      if (albums || generalError) setIsLoading(false);\n    };\n\n    updateIsLoading();\n  }, [albums, generalError]); //LISTENS FOR ANY CHANGES IN ERRORS IN STATE AND WILL TRIGGER FLASH MESSAGES ACCORDINGLY\n\n  useEffect(() => {\n    const displayFlashMessage = () => {\n      if (lyricsError) {\n        setNoLyricsFlashMessage(true);\n        dispatch(resetLyricsError());\n      }\n\n      ;\n\n      if (languageError) {\n        setLanguageNotFoundFlashMessage(true);\n        dispatch(resetLanguageError());\n      }\n\n      ;\n\n      if (translationError) {\n        setTranslationErrorFlashMessage(true);\n        dispatch(resetTranslationError());\n      }\n\n      ;\n\n      if (generalError) {\n        setGeneralErrorFlashMessage(true);\n        dispatch(resetGeneralError());\n      }\n\n      ;\n    };\n\n    displayFlashMessage();\n  }, [languageError, translationError, lyricsError, generalError, dispatch]); //GET ALL ARTISTS IN DB AND STORE THEM FOR THE BROWSE BY ARTISTS COMPONENT\n\n  useEffect(() => {\n    async function getSeedData() {\n      dispatch(getAllArtists());\n    }\n\n    ;\n    getSeedData();\n  }, [dispatch]); //SKIP OVER THE CATEGORIES SINCE THE USER NEEDED TO SEE THAT IN ORDER TO GET TO THIS COMPONENT\n\n  useEffect(() => {\n    const scrollPastCategories = () => {\n      artistsResultsRef.current.scrollIntoView({\n        behavior: \"smooth\"\n      });\n    };\n\n    scrollPastCategories();\n  }, []); //FUNCTION TO BE CALLED IN BELOW USE-EFFECTS TO SCROLL TO NEXT DIV AFTER CLICK\n\n  const scrollToNextDiv = useCallback(async (state, ref) => {\n    if (state && state !== \"Could not read language value\") {\n      ref.current.scrollIntoView({\n        behavior: \"smooth\"\n      });\n    }\n\n    ;\n  }, []); //SCROLL DOWN TO ALBUMS DIV WHEN ALBUMS ARE SET IN STATE\n\n  useEffect(() => {\n    scrollToNextDiv(albums, albumResultsRef);\n  }, [albums, albumResultsRef, scrollToNextDiv]); //SCROLL DOWN TO TRACKS DIV WHEN TRACKS HAS BEEN SELECTED AND SET IN STATE\n\n  useEffect(() => {\n    scrollToNextDiv(tracks, trackResultsRef);\n  }, [tracks, trackResultsRef, scrollToNextDiv]); //SCROLL DOWN TO LANGUAGE SEARCH BAR WHEN SELECTED TRACK HAS BE SET IN STATE\n\n  useEffect(() => {\n    scrollToNextDiv(lyrics, selectLanguageRef);\n  }, [lyrics, selectLanguageRef, scrollToNextDiv]); //SCROLL DOWN TO SHOW LYRICS AND TRANSLATION WHEN TRANSLATION HAS BE SET IN STATE\n\n  useEffect(() => {\n    scrollToNextDiv(translation, showLyricsTranslationRef);\n  }, [translation, showLyricsTranslationRef, scrollToNextDiv]); ////////////////////////////////////////////////////  ANIMATION FOR BACKGROUND COLOR  ////////////////////////////////////////////////////\n\n  const categoriesInView = useOnScreen(categoryRef, {\n    threshold: 0.7\n  });\n  const artistsInView = useOnScreen(artistsResultsRef, {\n    threshold: 0.7\n  });\n  const albumsInView = useOnScreen(albumResultsRef, {\n    threshold: 0.7\n  });\n  const selectLanguageInView = useOnScreen(selectLanguageRef, {\n    threshold: 0.7\n  });\n  const trackResultsInView = useOnScreen(trackResultsRef, {\n    threshold: 0.7\n  });\n  const lyricsTranslationInView = useOnScreen(showLyricsTranslationRef, {\n    threshold: 0.7\n  });\n  useEffect(() => {\n    const changeInView = (selectLanguageInView, albumsInView, trackResultsInView, lyricsTranslationInView, artistsInView, categoriesInView) => {\n      if (categoriesInView) {\n        setBgColor(\"#4e1eff\");\n      } else if (artistsInView) {\n        setBgColor(\"#7745f8\");\n      } else if (albumsInView) {\n        setBgColor(\"#9d69f1\");\n      } else if (trackResultsInView) {\n        setBgColor(\"#bd86eb\");\n      } else if (selectLanguageInView) {\n        setBgColor(\"#dba3e6\");\n      } else if (lyricsTranslationInView) {\n        setBgColor(\"#fdc3df\");\n      }\n\n      ;\n    };\n\n    changeInView(selectLanguageInView, albumsInView, trackResultsInView, lyricsTranslationInView, artistsInView, categoriesInView);\n  }, [selectLanguageInView, albumsInView, trackResultsInView, lyricsTranslationInView, artistsInView, categoriesInView]);\n  const springProps = useSpring({\n    backgroundColor: bgColor,\n    config: {\n      duration: 300\n    }\n  }); ////////////////////////////////////////////////////  HANDLE CLICK FUNCTIONS  ////////////////////////////////////////////////////\n\n  const handleArtistClick = async artistId => {\n    if (artistId !== selectedArtistId) {\n      setIsLoading(true);\n      setSelectedArtistId(artistId);\n    }\n\n    ;\n    dispatch(getAlbums(artistId));\n    dispatch(resetStore(\"tracks\", \"lyrics\", \"translation\"));\n  };\n\n  const scrollToArtists = () => {\n    artistsResultsRef.current.scrollIntoView({\n      behavior: \"smooth\"\n    });\n  }; ////////////////////////////////////////////////////  JSX VARIABLES  ////////////////////////////////////////////////////\n  //DISPLAY LOADING ICON\n\n\n  let LoadingIconDiv;\n  if (isLoading) LoadingIconDiv = /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Loading-Box\",\n    children: /*#__PURE__*/_jsxDEV(IosMusicalNotes, {\n      rotate: true,\n      fontSize: \"200px\",\n      color: \"#fff\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 185,\n    columnNumber: 5\n  }, this);\n  if (!isLoading) LoadingIconDiv = /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Loading-Box\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 191,\n    columnNumber: 5\n  }, this); //DISPLAY THE THREE CATEGORIES\n\n  const ChooseCategoryDiv = /*#__PURE__*/_jsxDEV(animated.div, {\n    onClick: scrollToArtists,\n    style: springProps,\n    ref: categoryRef,\n    children: /*#__PURE__*/_jsxDEV(Categories, {\n      needAnimation: false\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 196,\n    columnNumber: 5\n  }, this); //DISPLAY ALBUMS FROM SELECTED ARTIST\n\n\n  let ArtistsResultsDiv;\n  if (artists) ArtistsResultsDiv = /*#__PURE__*/_jsxDEV(animated.div, {\n    style: springProps,\n    ref: artistsResultsRef,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Main-Container\",\n      children: /*#__PURE__*/_jsxDEV(SearchResultList, {\n        typeOfResults: \"artists\",\n        resultsArray: artists,\n        handleSearch: handleArtistClick,\n        itemsPerPage: 1,\n        loadingIcon: LoadingIconDiv,\n        typeOfArtists: \"artists\"\n      }, artists[0].artistId, false, {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 205,\n    columnNumber: 5\n  }, this);\n  if (!artists) ArtistsResultsDiv = /*#__PURE__*/_jsxDEV(animated.div, {\n    style: springProps,\n    ref: artistsResultsRef,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Main-Container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"Loading-Box\",\n        children: /*#__PURE__*/_jsxDEV(IosMusicalNotes, {\n          fontSize: \"300px\",\n          color: \"orange\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 216,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 214,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 213,\n    columnNumber: 5\n  }, this); //DISPLAY ALBUMS FROM SELECTED ARTIST\n\n  let AlbumResultsDiv;\n  if (albums) AlbumResultsDiv = /*#__PURE__*/_jsxDEV(animated.div, {\n    style: springProps,\n    ref: albumResultsRef,\n    children: /*#__PURE__*/_jsxDEV(Albums, {\n      typeOfAlbums: \"artists\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 227,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 226,\n    columnNumber: 5\n  }, this); //DISPLAY TRACKS FROM SELECTED ALBUM\n\n  let TrackResultsDiv;\n\n  if (tracks) {\n    if (tracks.length) TrackResultsDiv = /*#__PURE__*/_jsxDEV(animated.div, {\n      style: springProps,\n      ref: trackResultsRef,\n      children: /*#__PURE__*/_jsxDEV(Tracks, {\n        results: tracks,\n        typeOfResults: \"tracks\",\n        itemsPerPage: 1,\n        animateIn: true,\n        typeOfTracks: \"artists\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 238,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 237,\n      columnNumber: 7\n    }, this);\n    if (!tracks.length) TrackResultsDiv = /*#__PURE__*/_jsxDEV(animated.div, {\n      style: springProps,\n      ref: trackResultsRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 243,\n      columnNumber: 7\n    }, this);\n  }\n\n  ; //DISPLAY LANGUAGE SELECTION SEARCH BAR\n\n  let LanguageSelectDiv;\n  if (lyrics) LanguageSelectDiv = /*#__PURE__*/_jsxDEV(animated.div, {\n    style: springProps,\n    ref: selectLanguageRef,\n    children: /*#__PURE__*/_jsxDEV(LanguageSelect, {\n      selectedTrackId: selectedTrackId,\n      typeOfSearch: \"artists-language\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 253,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 252,\n    columnNumber: 5\n  }, this); //DISPLAY LYRICS AND TRANSLATION\n\n  let LyricsTranslationDiv;\n  if (translation && translation !== \"Could not read language value\") LyricsTranslationDiv = /*#__PURE__*/_jsxDEV(animated.div, {\n    style: springProps,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"inViewPlaceholder\",\n      ref: showLyricsTranslationRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 262,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ToTopArrow, {\n      topRef: categoryRef,\n      topInView: categoriesInView\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 263,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(LyricsTranslation, {\n      typeOfLyricsTranslation: \"artists\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 264,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 261,\n    columnNumber: 5\n  }, this); ////////////////////////////////////////////////////  RETURN  ////////////////////////////////////////////////////\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Flash-Messages-Container\",\n      children: [noLyricsFlashMessage && /*#__PURE__*/_jsxDEV(FlashMessage, {\n        setState: setNoLyricsFlashMessage,\n        message: \"Unfortunately there are no Lyrics for that song yet.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 273,\n        columnNumber: 35\n      }, this), languageNotFoundFlashMessage && /*#__PURE__*/_jsxDEV(FlashMessage, {\n        setState: setLanguageNotFoundFlashMessage,\n        message: \"That Language was not found, please try again.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 274,\n        columnNumber: 43\n      }, this), translationErrorFlashMessage && /*#__PURE__*/_jsxDEV(FlashMessage, {\n        setState: setTranslationErrorFlashMessage,\n        message: \"Sorry, we couldn't get a translation at this moment.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 275,\n        columnNumber: 43\n      }, this), generalErrorFlashMessage && /*#__PURE__*/_jsxDEV(FlashMessage, {\n        setState: setGeneralErrorFlashMessage,\n        message: \"Uh oh, something went wrong. Please try again.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 276,\n        columnNumber: 39\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 272,\n      columnNumber: 7\n    }, this), ChooseCategoryDiv, ArtistsResultsDiv, AlbumResultsDiv, TrackResultsDiv, LanguageSelectDiv, LyricsTranslationDiv]\n  }, void 0, true);\n}\n\n_s(BrowseByArtists, \"F4MUL1DpDUce42u6y3Gm6iJwD8Y=\", false, function () {\n  return [useDispatch, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useOnScreen, useOnScreen, useOnScreen, useOnScreen, useOnScreen, useOnScreen, useSpring];\n});\n\n_c = BrowseByArtists;\n;\nexport default BrowseByArtists;\n\nvar _c;\n\n$RefreshReg$(_c, \"BrowseByArtists\");","map":{"version":3,"sources":["/Users/louieg3/Documents/Web_development/iTranslate/Frontend/src/BrowseByArtists.js"],"names":["React","useState","useRef","useEffect","useCallback","useSpring","animated","SearchResultList","LyricsTranslation","Tracks","LanguageSelect","Albums","Categories","FlashMessage","ToTopArrow","useDispatch","useSelector","getAlbums","resetStore","getAllArtists","resetLanguageError","resetTranslationError","resetLyricsError","resetGeneralError","useOnScreen","IosMusicalNotes","BrowseByArtists","bgColor","setBgColor","isLoading","setIsLoading","selectedArtistId","setSelectedArtistId","noLyricsFlashMessage","setNoLyricsFlashMessage","languageNotFoundFlashMessage","setLanguageNotFoundFlashMessage","translationErrorFlashMessage","setTranslationErrorFlashMessage","generalErrorFlashMessage","setGeneralErrorFlashMessage","dispatch","lyrics","store","artists","allArtists","albums","tracks","selectedTrackId","selectedTrack","trackId","translation","translationError","errors","languageError","lyricsError","generalError","categoryRef","albumResultsRef","selectLanguageRef","trackResultsRef","showLyricsTranslationRef","artistsResultsRef","updateIsLoading","displayFlashMessage","getSeedData","scrollPastCategories","current","scrollIntoView","behavior","scrollToNextDiv","state","ref","categoriesInView","threshold","artistsInView","albumsInView","selectLanguageInView","trackResultsInView","lyricsTranslationInView","changeInView","springProps","backgroundColor","config","duration","handleArtistClick","artistId","scrollToArtists","LoadingIconDiv","ChooseCategoryDiv","ArtistsResultsDiv","AlbumResultsDiv","TrackResultsDiv","length","LanguageSelectDiv","LyricsTranslationDiv"],"mappings":"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","sourcesContent":["import React, {useState, useRef, useEffect, useCallback} from 'react';\nimport {useSpring, animated} from 'react-spring';\nimport './Sass/App.scss';\n//COMPONENT IMPORTS\nimport SearchResultList from \"./SearchResultList\";\nimport LyricsTranslation from \"./LyricsTranslation\";\nimport Tracks from \"./Tracks\";\nimport LanguageSelect from \"./LanguageSelect\";\nimport Albums from \"./Albums\";\nimport Categories from \"./BrowseCategories\";\nimport FlashMessage from \"./FlashMessage\";\nimport ToTopArrow from \"./ToTopArrow\";\n//REDUX IMPORTS\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {getAlbums} from \"./actionCreators/BrowseRoute/Artists/getAlbumsCreator\";\nimport {resetStore} from \"./actionCreators/resetStoreCreator\";\nimport {getAllArtists} from \"./actionCreators/BrowseRoute/Artists/getAllArtistsCreator\";\nimport {resetLanguageError, resetTranslationError, resetLyricsError, resetGeneralError} from \"./actionCreators/handleErrorsCreator\";\n//CUSTOM HOOK IMPORTS\nimport useOnScreen from \"./hooks/useOnScreen\";\n//IONICONS IMPORTS\nimport IosMusicalNotes from 'react-ionicons/lib/IosMusicalNotes';\n\nfunction BrowseByArtists() {\n  //REACT STATE\n  const [bgColor, setBgColor] = useState(\"#4e1eff\");\n  const [isLoading, setIsLoading] = useState(false);\n  const [selectedArtistId, setSelectedArtistId] = useState(\"\");\n  //STATE FOR FLASH MESSAGES\n  const [noLyricsFlashMessage, setNoLyricsFlashMessage] = useState(false);\n  const [languageNotFoundFlashMessage, setLanguageNotFoundFlashMessage] = useState(false);\n  const [translationErrorFlashMessage, setTranslationErrorFlashMessage] = useState(false);\n  const [generalErrorFlashMessage, setGeneralErrorFlashMessage] = useState(false);\n  //REDUX STORE\n  const dispatch = useDispatch();\n  const lyrics = useSelector(store => store.lyrics);\n  const artists = useSelector(store => store.allArtists);\n  const albums = useSelector(store => store.albums);\n  const tracks = useSelector(store => store.tracks);\n  const selectedTrackId = useSelector(store => store.selectedTrack.trackId);\n  const translation = useSelector(store => store.translation);\n  const translationError = useSelector(store => store.errors.translationError);\n  const languageError = useSelector(store => store.errors.languageError);\n  const lyricsError = useSelector(store => store.errors.lyricsError);\n  const generalError = useSelector(store => store.errors.generalError);\n  //REFS FOR PAGE TRAVERSAL\n  const categoryRef = useRef();\n  const albumResultsRef = useRef();\n  const selectLanguageRef = useRef();\n  const trackResultsRef = useRef();\n  const showLyricsTranslationRef = useRef();\n  const artistsResultsRef = useRef();\n\n////////////////////////////////////////////////////  USE EFFECTS  ////////////////////////////////////////////////////\n\n  //WATCHES FOR EITHER AN ERROR OR THE LYRICS TO COME THROUGH TO REMOVE LOADING ICON\n  useEffect(() => {\n\n    const updateIsLoading = () => {\n\n      if (albums || generalError) setIsLoading(false);\n    };\n    updateIsLoading();\n  }, [albums, generalError]);\n\n  //LISTENS FOR ANY CHANGES IN ERRORS IN STATE AND WILL TRIGGER FLASH MESSAGES ACCORDINGLY\n  useEffect(() => {\n\n    const displayFlashMessage = () => {\n\n        if (lyricsError) {\n          setNoLyricsFlashMessage(true);\n          dispatch(resetLyricsError());\n        };\n        if (languageError) {\n          setLanguageNotFoundFlashMessage(true);\n          dispatch(resetLanguageError());\n        };\n        if (translationError) {\n          setTranslationErrorFlashMessage(true);\n          dispatch(resetTranslationError());\n        };\n        if (generalError) {\n          setGeneralErrorFlashMessage(true);\n          dispatch(resetGeneralError());\n        };\n    };\n    displayFlashMessage();\n  }, [languageError, translationError, lyricsError, generalError, dispatch]);\n\n  //GET ALL ARTISTS IN DB AND STORE THEM FOR THE BROWSE BY ARTISTS COMPONENT\n  useEffect(() => {\n\n    async function getSeedData() {\n      dispatch(getAllArtists());\n    };\n    getSeedData();\n  }, [dispatch]);\n\n  //SKIP OVER THE CATEGORIES SINCE THE USER NEEDED TO SEE THAT IN ORDER TO GET TO THIS COMPONENT\n  useEffect(() => {\n\n    const scrollPastCategories = () => {\n      artistsResultsRef.current.scrollIntoView({behavior: \"smooth\"});\n    };\n    scrollPastCategories();\n  }, []);\n\n  //FUNCTION TO BE CALLED IN BELOW USE-EFFECTS TO SCROLL TO NEXT DIV AFTER CLICK\n  const scrollToNextDiv = useCallback(async (state, ref) => {\n\n    if (state && state !== \"Could not read language value\") {\n      ref.current.scrollIntoView({behavior: \"smooth\"});\n    };\n  }, []);\n\n  //SCROLL DOWN TO ALBUMS DIV WHEN ALBUMS ARE SET IN STATE\n  useEffect(() => {scrollToNextDiv(albums, albumResultsRef);}, [albums, albumResultsRef, scrollToNextDiv]);\n\n  //SCROLL DOWN TO TRACKS DIV WHEN TRACKS HAS BEEN SELECTED AND SET IN STATE\n  useEffect(() => {scrollToNextDiv(tracks, trackResultsRef);}, [tracks, trackResultsRef, scrollToNextDiv]);\n\n  //SCROLL DOWN TO LANGUAGE SEARCH BAR WHEN SELECTED TRACK HAS BE SET IN STATE\n  useEffect(() => {scrollToNextDiv(lyrics, selectLanguageRef);}, [lyrics, selectLanguageRef, scrollToNextDiv]);\n\n  //SCROLL DOWN TO SHOW LYRICS AND TRANSLATION WHEN TRANSLATION HAS BE SET IN STATE\n  useEffect(() => {scrollToNextDiv(translation, showLyricsTranslationRef);}, [translation, showLyricsTranslationRef, scrollToNextDiv]);\n\n////////////////////////////////////////////////////  ANIMATION FOR BACKGROUND COLOR  ////////////////////////////////////////////////////\n\n  const categoriesInView = useOnScreen(categoryRef, {threshold: 0.7});\n  const artistsInView = useOnScreen(artistsResultsRef, {threshold: 0.7});\n  const albumsInView = useOnScreen(albumResultsRef, {threshold: 0.7});\n  const selectLanguageInView = useOnScreen(selectLanguageRef, {threshold: 0.7});\n  const trackResultsInView = useOnScreen(trackResultsRef, {threshold: 0.7});\n  const lyricsTranslationInView = useOnScreen(showLyricsTranslationRef, {threshold: 0.7});\n\n  useEffect(() => {\n    const changeInView = (selectLanguageInView, albumsInView, trackResultsInView, lyricsTranslationInView, artistsInView, categoriesInView) => {\n\n      if (categoriesInView) {\n        setBgColor(\"#4e1eff\");\n      } else if (artistsInView) {\n        setBgColor(\"#7745f8\");\n      } else if (albumsInView) {\n        setBgColor(\"#9d69f1\");\n      } else if (trackResultsInView) {\n        setBgColor(\"#bd86eb\");\n      } else if (selectLanguageInView) {\n        setBgColor(\"#dba3e6\");\n      } else if (lyricsTranslationInView) {\n        setBgColor(\"#fdc3df\");\n      };\n    };\n  changeInView(selectLanguageInView, albumsInView, trackResultsInView, lyricsTranslationInView, artistsInView, categoriesInView);\n  }, [selectLanguageInView, albumsInView, trackResultsInView, lyricsTranslationInView, artistsInView, categoriesInView]);\n\n  const springProps = useSpring({\n    backgroundColor: bgColor,\n    config: {duration: 300}\n  });\n\n////////////////////////////////////////////////////  HANDLE CLICK FUNCTIONS  ////////////////////////////////////////////////////\n\n  const handleArtistClick = async (artistId) => {\n\n    if (artistId !== selectedArtistId) {\n      setIsLoading(true);\n      setSelectedArtistId(artistId)\n    };\n    dispatch(getAlbums(artistId));\n    dispatch(resetStore(\"tracks\", \"lyrics\", \"translation\"));\n  };\n\n  const scrollToArtists = () => {\n    artistsResultsRef.current.scrollIntoView({behavior: \"smooth\"});\n  };\n\n////////////////////////////////////////////////////  JSX VARIABLES  ////////////////////////////////////////////////////\n\n  //DISPLAY LOADING ICON\n  let LoadingIconDiv;\n\n  if (isLoading) LoadingIconDiv = (\n    <div className=\"Loading-Box\">\n      <IosMusicalNotes rotate={true} fontSize=\"200px\" color=\"#fff\"/>\n    </div>\n  );\n\n  if (!isLoading) LoadingIconDiv = (\n    <div className=\"Loading-Box\"></div>\n  );\n\n  //DISPLAY THE THREE CATEGORIES\n  const ChooseCategoryDiv = (\n    <animated.div onClick={scrollToArtists} style={springProps} ref={categoryRef}>\n      <Categories needAnimation={false}/>\n    </animated.div>\n  );\n\n  //DISPLAY ALBUMS FROM SELECTED ARTIST\n  let ArtistsResultsDiv;\n  \n  if (artists) ArtistsResultsDiv = (\n    <animated.div style={springProps}  ref={artistsResultsRef}>\n      <div className=\"Main-Container\">\n        <SearchResultList key={artists[0].artistId} typeOfResults=\"artists\" resultsArray={artists} handleSearch={handleArtistClick} itemsPerPage={1} loadingIcon={LoadingIconDiv} typeOfArtists=\"artists\"/>\n      </div>\n    </animated.div>\n  );\n\n  if (!artists) ArtistsResultsDiv = (\n    <animated.div style={springProps}  ref={artistsResultsRef}>\n      <div className=\"Main-Container\">\n        <div className=\"Loading-Box\">\n          <IosMusicalNotes fontSize=\"300px\" color=\"orange\" />\n        </div>\n      </div>\n    </animated.div>\n  );\n\n  //DISPLAY ALBUMS FROM SELECTED ARTIST\n  let AlbumResultsDiv;\n  \n  if (albums) AlbumResultsDiv = (\n    <animated.div style={springProps} ref={albumResultsRef}>\n      <Albums typeOfAlbums=\"artists\"/>\n    </animated.div>\n  );\n\n  //DISPLAY TRACKS FROM SELECTED ALBUM\n  let TrackResultsDiv;\n\n  if (tracks) {\n\n    if (tracks.length) TrackResultsDiv = (\n      <animated.div style={springProps} ref={trackResultsRef}>\n        <Tracks results={tracks} typeOfResults={\"tracks\"} itemsPerPage={1} animateIn={true} typeOfTracks=\"artists\"/>\n      </animated.div>\n    );\n\n    if (!tracks.length) TrackResultsDiv = (\n      <animated.div style={springProps} ref={trackResultsRef}>\n      </animated.div>\n    );\n  };\n\n  //DISPLAY LANGUAGE SELECTION SEARCH BAR\n  let LanguageSelectDiv;\n\n  if (lyrics) LanguageSelectDiv = (\n    <animated.div style={springProps} ref={selectLanguageRef}>\n      <LanguageSelect selectedTrackId={selectedTrackId} typeOfSearch=\"artists-language\"/>\n    </animated.div>\n  );\n\n  //DISPLAY LYRICS AND TRANSLATION\n  let LyricsTranslationDiv;\n  \n  if (translation && translation !== \"Could not read language value\")  LyricsTranslationDiv = (\n    <animated.div style={springProps}>\n      <div className=\"inViewPlaceholder\" ref={showLyricsTranslationRef}></div>\n      <ToTopArrow topRef={categoryRef} topInView={categoriesInView}/>\n      <LyricsTranslation typeOfLyricsTranslation=\"artists\"/>\n    </animated.div>\n  );\n\n////////////////////////////////////////////////////  RETURN  ////////////////////////////////////////////////////\n\n  return (\n    <>\n      <div className=\"Flash-Messages-Container\">\n        {noLyricsFlashMessage && (<FlashMessage setState={setNoLyricsFlashMessage} message=\"Unfortunately there are no Lyrics for that song yet.\"/> )}\n        {languageNotFoundFlashMessage && (<FlashMessage setState={setLanguageNotFoundFlashMessage} message=\"That Language was not found, please try again.\"/> )}\n        {translationErrorFlashMessage && (<FlashMessage setState={setTranslationErrorFlashMessage} message=\"Sorry, we couldn't get a translation at this moment.\"/> )}\n        {generalErrorFlashMessage && (<FlashMessage setState={setGeneralErrorFlashMessage} message=\"Uh oh, something went wrong. Please try again.\"/> )}\n      </div>\n      {ChooseCategoryDiv}\n      {ArtistsResultsDiv}\n      {AlbumResultsDiv}\n      {TrackResultsDiv}\n      {LanguageSelectDiv}\n      {LyricsTranslationDiv}\n    </>\n  );\n};\n\nexport default BrowseByArtists;"]},"metadata":{},"sourceType":"module"}