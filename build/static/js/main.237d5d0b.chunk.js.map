{"version":3,"sources":["FlashMessage.js","Hover.js","SearchBar.js","actionTypes.js","IBMWatsonAPI.js","BackendCall.js","actionCreators/getTranslationCreator.js","LanguageSelect.js","LyricsTranslation.js","SpotifyAPI.js","actionCreators/sendGeneralErrorCreator.js","SearchResult.js","PaginationSlider.js","SearchResultList.js","actionCreators/resetStoreCreator.js","actionCreators/getLyricsFromDBCreator.js","actionCreators/findLyricsFromAPICreator.js","actionCreators/addSelectedTrackCreator.js","Tracks.js","SearchLanding.js","ToTopArrow.js","actionCreators/handleErrorsCreator.js","actionCreators/setResultsArrayCreator.js","hooks/useOnScreen.js","Search.js","BrowseCategories.js","Browse.js","actionCreators/BrowseRoute/Artists/getTracksCreator.js","hooks/useViewport.js","Albums.js","actionCreators/BrowseRoute/Artists/getAlbumsCreator.js","actionCreators/BrowseRoute/Artists/getAllArtistsCreator.js","BrowseByArtists.js","Artists.js","actionCreators/BrowseRoute/Genre/getArtistsCreator.js","actionCreators/BrowseRoute/Genre/getGenresCreator.js","Genres.js","BrowseByGenre.js","DanceabilitySlider.js","actionCreators/BrowseRoute/Danceability/getDanceabilityTracksCreator.js","DanceabilitySearch.js","BrowseByDanceability.js","Routes.js","Navbar.js","actionCreators/getLanguagesCreator.js","App.js","reportWebVitals.js","reducers/errorsReducer.js","reducers/rootReducer.js","reducers/resultsReducer.js","reducers/translationReducer.js","reducers/lyricsReducer.js","reducers/BrowseRoute/albumsReducer.js","reducers/BrowseRoute/tracksReducer.js","reducers/languagesReducer.js","reducers/BrowseRoute/artistsReducer.js","reducers/BrowseRoute/allArtistsReducer.js","reducers/BrowseRoute/genresReducer.js","reducers/selectedTrackReducer.js","reducers/setInViewReducer.js","index.js"],"names":["FlashMessage","message","setState","useEffect","intervalId","setInterval","clearInterval","onClick","className","Hover","scale","timing","children","previewURL","useState","isHovered","setIsHovered","audioVolume","audio","useRef","Audio","style","useSpring","display","transform","config","tension","friction","timeoutId","window","setTimeout","clearTimeout","span","onMouseEnter","current","play","volume","onMouseLeave","pause","SearchBar","headerClassName","inputColorClassName","buttonColorClassName","header","handleSubmit","loadingIcon","typeOfSearch","searchVal","setSearchVal","type","id","name","value","onChange","e","target","preventDefault","GET_TRANSLATION","UPDATE_TRANSLATION_ERRORS","RESET_LANGUAGE_ERROR","RESET_TRANSLATION_ERROR","UPDATE_LYRICS_ERROR","GET_LYRICS","RESET_LYRICS_ERROR","UPDATE_SEARCH_ERROR","GET_RESULTS","RESET_SEARCH_ERROR","GET_ALBUMS","GET_TRACKS","GET_LANGUAGES","GET_ARTISTS","GET_ALL_ARTISTS","GET_GENRES","RESET_TRANSLATION","RESET_LYRICS","RESET_TRACKS","RESET_ALBUMS","RESET_ARTISTS","RESET_SEARCH_RESULTS","ADD_TRACK","RESET_SELECTED_TRACK","UPDATE_GENERAL_ERROR","RESET_GENERAL_ERROR","SET_IN_VIEW","BASE_URL","process","REACT_APP_BASE_URL","IBMWatsonAPI","lyrics","language","axios","method","url","params","res","responseObj","JSON","parse","data","response","result","languages","BackendCall","endpoint","paramsOrData","verb","preview_url","this","request","trackData","artistData","albumData","addArtist","addAlbum","addTrack","track","selectedTrack","checkIfTrackHasLyrics","trackId","hasLyrics","checkIfTrackIsInDB","inDatabase","artists","album","getTranslation","targetLanguage","dispatch","a","errors","languageError","translationError","fetchTranslation","getTranslationFromDB","track_id","selectedLanguage","getTranslationFromAPI","IBMTranslation","addTranslation","translation","handleLanguageSearchSubmit","filter","l","language_name","toLowerCase","retrieveTranslation","updateGetTranslationErrors","LanguageSelect","selectedTrackId","isLoading","setIsLoading","useDispatch","useSelector","store","LoadingIconDiv","rotate","fontSize","color","from","opacity","to","delay","duration","props","LyricsTranslation","lyricsClassName","translationClassName","typeOfLyricsTranslation","SpotifyAPI","search","sendGeneralError","generalError","SearchResult","memo","displaySearchResults","displayDanceabilityResults","artistClassName","displayArtists","albumsClassName","displayAlbums","trackClassNames","displayTracks","displayGenres","albumHover","setAlbumHover","handleSearchClick","consolidateSelectedSearchResultInfo","musicObject","updatedTrack","handleClick","handleTrackClick","typeOfResults","artist","typeOfArtists","needsPaginationSlider","spotify_id","typeOfAlbums","src","image","alt","typeOfTracks","trackName","genre","MyPaginationSlider","withStyles","root","height","thumb","width","backgroundColor","border","marginTop","marginLeft","boxShadow","active","valueLabel","left","top","background","borderRadius","rail","Slider","PaginationSlider","resultsArray","itemsPerPage","handleSliderChange","containerClass","sliderClass","sliderVal","setSliderVal","multipleOf","length","maxSliderVal","Math","floor","max","min","step","event","newValue","aria-labelledby","SearchResultList","displayDanceabilityTracks","handleSearch","resultsInView","slice","updateResultsInView","val","map","r","i","index","artistName","artistId","albumName","albumId","albumImg","resetStore","specificState","resetArtists","resetAlbums","resetTracks","resetLyrics","resetTranslation","resetSearchResults","resetSelectedTrack","getLyricsFromDB","getLyrics","undefined","Error","addLyrics","lyricsError","findLyricsFromAPI","getLyricsFromAPI","updateLyricsError","addSelectedTrack","Tracks","results","animateIn","TrackResults","handleTrackResultsClick","getTrackArtistAlbumData","addTrackArtistAlbum","SearchLanding","handleTrackSearchSubmit","ToTopArrow","topRef","topInView","hitBottom","setHitBottom","movingUp","setMovingUp","history","useHistory","location","useLocation","pathname","push","scrollIntoView","behavior","resetLyricsError","resetLanguageError","resetTranslationError","resetGeneralError","setResultsArray","requestSearch","updateSearchError","pushResultsArray","searchError","useOnScreen","ref","options","threshold","isIntersecting","setIntersecting","elementRef","observer","IntersectionObserver","entry","observe","unobserve","Search","bgColor","setBgColor","searchResults","searchFlashMessage","setSearchFlashMessage","noLyricsFlashMessage","setNoLyricsFlashMessage","languageNotFoundFlashMessage","setLanguageNotFoundFlashMessage","translationErrorFlashMessage","setTranslationErrorFlashMessage","searchResultsRef","selectLanguageRef","showLyricsTranslationRef","searchRef","searchBarInView","searchResultsInView","selectLanguageInView","LyricsTranslationInView","changeInView","springProps","scrollToNextDiv","useCallback","state","SearchResultsDiv","LanguageSelectDiv","LyricsTranslationDiv","SearchBarDiv","div","Categories","CategoriesDiv","needAnimation","handleCategoryClick","category","Browse","ChooseCategoryDiv","getTracks","tracks","addTracks","useViewport","innerWidth","viewportWidth","setViewportWidth","innerHeight","viewportHeight","setViewportHeight","handleWindowResize","addEventListener","removeEventListener","Albums","albumKey","albums","handleAlbumClick","getAlbums","addAlbums","getAllArtists","getArtistsAndArtistIds","addArtists","BrowseByArtists","selectedArtistId","setSelectedArtistId","generalErrorFlashMessage","setGeneralErrorFlashMessage","allArtists","categoryRef","albumResultsRef","trackResultsRef","artistsResultsRef","getSeedData","categoriesInView","artistsInView","albumsInView","trackResultsInView","lyricsTranslationInView","handleArtistClick","ArtistsResultsDiv","AlbumResultsDiv","TrackResultsDiv","Artists","getArtists","getArtistByGenre","getGenres","genreArray","genres","split","sortedGenres","trim","toUpperCase","Set","sort","addGenres","Genres","fontColor1","fontColor2","GenresDiv","handleGenreClick","BrowseByGenre","selectGenresRef","genresInView","lyricsTranslationInvView","selectGenresDiv","MyDanceabilitySlider","DanceabilitySlider","handleSliderMouseMove","valueLabelDisplay","x","getDanceabilityTracks","lowerLimit","upperLimit","DanceabilitySearch","toFixed","BrowseByDanceability","DanceabilitySearchRef","danceabilitySearchInView","DanceabilitySearchDiv","Routes","exact","path","NavBar","browseMode","setBrowseMode","mode","getLanguages","addLanguages","App","Navbar","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","INITIAL_STATE","rootReducer","combineReducers","action","inView","component","createStore","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.237d5d0b.chunk.js","sourcesContent":["import React, {useEffect} from 'react';\n\nconst FlashMessage = ({message, setState}) => {\n\n////////////////////////////////////////////////////  USE EFFECTS  ////////////////////////////////////////////////////\n\n  useEffect(() => {\n\n    const intervalId = setInterval(() => {\n      setState(false);\n    }, 4000);\n    return () => clearInterval(intervalId);\n  }, [setState]);\n\n////////////////////////////////////////////////////  HANDLE CLICK FUNCTIONS  ////////////////////////////////////////////////////\n\n  const toggleTimer = () => {\n    setState(false);\n  }\n\n////////////////////////////////////////////////////  RETURN  ////////////////////////////////////////////////////\n\n  return (\n    <div onClick={toggleTimer} className=\"FlashMessage\">\n      <p>{message}</p>\n    </div>\n  );\n};\n\nexport default FlashMessage;","import React, {useEffect, useState, useRef, useCallback} from \"react\";\nimport {animated, useSpring} from 'react-spring';\n\nconst Hover = ({scale, timing = 150, children, previewURL='Not a Track'}) => {\n  const [isHovered, setIsHovered] = useState(false);\n  let audioVolume = 0.2;\n\n  //IF THERE IS NO PREVIEW SONG AVAILABLE FROM SPOTIFY, SET IT TO A RANDOM SONG AND SET VOLUME TO 0.\n  if (previewURL === 'No URL') {\n    previewURL = 'https://p.scdn.co/mp3-preview/f08e6c437794cfbfd12669594dfe095229e3f538?cid=0ab9a52692fa489d8663530facb74af9'\n    audioVolume = 0.0;\n  };\n\n  //REF FOR EACH AUDIO OBJECT THAT IS UNIQUE TO EACH TRACK SO THAT IT CAN PLAY/PAUSE ON MOUSE-ENTER MOUSE-LEAVE\n  const audio = useRef(new Audio(previewURL));\n\n  //BOUNCE ANIMATION CONFIGURATIONS\n  const style = useSpring({\n    display: 'inline-block',\n    transform: isHovered\n      ? `scale(${scale})`\n      : `scale(1)`,\n    config: {\n      tension: 300,\n      friction: 10,\n    },\n  });\n\n  //SET THE TIMER TO STOP THE ANIMATION AFTER A SET AMOUNT OF TIME\n  useEffect(() => {\n\n    if (!isHovered) {\n      return;\n    };\n\n    const timeoutId = window.setTimeout(() => {\n      setIsHovered(false);\n    }, timing);\n\n    return () => {\n      window.clearTimeout(timeoutId);\n    };\n  }, [isHovered, timing]);\n\n  //TRIGGER THE ANIMATION AND THE AUDIO ON MOUSE-ENTER\n  const trigger = () => {\n    setIsHovered(true);\n\n    if (previewURL !== 'Not a Track') {\n      audio.current.play();\n      audio.current.volume = audioVolume;\n    };\n  };\n\n  //PAUSE THE AUDIO ON MOUSE-LEAVE\n  const stopMusic = () => {\n    \n    if (previewURL !== 'Not a Track') {\n      audio.current.pause();\n    };\n  };\n\n  return (\n    <animated.span className=\"Hover-Box\" onMouseEnter={trigger} onMouseLeave={stopMusic} style={style}>\n      {children}\n    </animated.span>\n  );\n};\n\nexport default Hover;","import React, {useState} from 'react';\nimport Hover from \"./Hover\";\n\nconst SearchBar = ( { header, handleSubmit, loadingIcon, typeOfSearch} ) => {\n  const [searchVal, setSearchVal] = useState(\"\")\n\n////////////////////////////////////////////////////  HANDLE CLICK FUNCTIONS  ////////////////////////////////////////////////////\n\n  const triggerSubmit = (e) => {\n    e.preventDefault();\n    handleSubmit(searchVal);\n  };\n\n  const handleChange = (e) => {\n    setSearchVal(e.target.value);\n  };\n\n////////////////////////////////////////////////////  CLASSNAME VARIABLES  ////////////////////////////////////////////////////\n\nlet headerClassName;\nlet inputColorClassName;\nlet buttonColorClassName;\n\nif (typeOfSearch === \"search-landing\") {\n  headerClassName = \"Search-Landing\";\n  inputColorClassName = \"Search-Landing-Text\";\n  buttonColorClassName = \"fa fa-search icon Search-Landing-Button\";\n};\n\nif (typeOfSearch === \"search-language\") {\n  headerClassName = \"Search-Language\";\n  inputColorClassName = \"Search-Language-Text\";\n  buttonColorClassName = \"fa fa-search icon Search-Language-Button\";\n};\n\nif (typeOfSearch === \"artists-language\") {\n  headerClassName = \"Artist-Language\";\n  inputColorClassName = \"Artist-Language-Text\";\n  buttonColorClassName = \"fa fa-search icon Artist-Language-Button\";\n};\n\nif (typeOfSearch === \"genre-language\") {\n  headerClassName = \"Genre-Language\";\n  inputColorClassName = \"Genre-Language-Text\";\n  buttonColorClassName = \"fa fa-search icon Genre-Language-Button\";\n};\n\nif (typeOfSearch === \"danceability-language\") {\n  headerClassName = \"Danceability-Language\";\n  inputColorClassName = \"Danceability-Language-Text\";\n  buttonColorClassName = \"fa fa-search icon Danceability-Language-Button\";\n};\n\n////////////////////////////////////////////////////  RETURN  ////////////////////////////////////////////////////\n\n  return (\n    <div className=\"Search-Field\">\n      {loadingIcon}\n      <div className=\"Search-Field-Content\">\n      <h1 className={headerClassName}>{header}</h1>\n      <form className=\"Search-Input-Container\">\n      <div >\n        <input\n          type=\"text\"\n          id=\"SearchVal\"\n          name=\"searchVal\"\n          className={inputColorClassName}\n          value={searchVal}\n          onChange={handleChange}\n        />\n        <button onClick={triggerSubmit} type=\"submit\">\n          <Hover scale={1.15}>\n            <i className={buttonColorClassName}></i>\n          </Hover>\n        </button>\n      </div>\n      </form>\n      </div>\n      <div className=\"Search-Field-Filler\"></div>\n    </div>\n  );\n};\n\nexport default SearchBar;","export const GET_TRANSLATION = \"GET_TRANSLATION\";\nexport const UPDATE_TRANSLATION_ERRORS = \"UPDATE_TRANSLATION_ERRORS\";\nexport const RESET_LANGUAGE_ERROR = \"RESET_LANGUAGE_ERROR\";\nexport const RESET_TRANSLATION_ERROR = \"RESET_TRANSLATION_ERROR\";\nexport const UPDATE_LYRICS_ERROR = \"UPDATE_LYRICS_ERROR\";\nexport const GET_LYRICS = \"GET_LYRICS\";\nexport const RESET_LYRICS_ERROR = \"RESET_LYRICS_ERROR\";\nexport const UPDATE_SEARCH_ERROR = \"UPDATE_SEARCH_ERROR\";\nexport const GET_RESULTS = \"GET_RESULTS\";\nexport const RESET_SEARCH_ERROR = \"RESET_SEARCH_ERROR\";\nexport const GET_ALBUMS = \"GET_ALBUMS\";\nexport const GET_TRACKS = \"GET_TRACKS\";\nexport const GET_LANGUAGES = \"GET_LANGUAGES\";\nexport const GET_ARTISTS = \"GET_ARTISTS\";\nexport const GET_ALL_ARTISTS = \"GET_ALL_ARTISTS\";\nexport const GET_GENRES = \"GET_GENRES\";\nexport const RESET_TRANSLATION = \"RESET_TRANSLATION\";\nexport const RESET_LYRICS = \"RESET_LYRICS\";\nexport const RESET_TRACKS = \"RESET_TRACKS\";\nexport const RESET_ALBUMS = \"RESET_ALBUMS\";\nexport const RESET_ARTISTS = \"RESET_ARTISTS\";\nexport const RESET_SEARCH_RESULTS = \"RESET_SEARCH_RESULTS\";\nexport const ADD_TRACK = \"ADD_TRACK\";\nexport const RESET_SELECTED_TRACK = \"RESET_SELECTED_TRACK\";\nexport const UPDATE_GENERAL_ERROR = \"UPDATE_GENERAL_ERROR\";\nexport const RESET_GENERAL_ERROR = \"RESET_GENERAL_ERROR\";\nexport const SET_IN_VIEW = \"SET_IN_VIEW\";","import axios from \"axios\";\n\nconst BASE_URL = process.env.REACT_APP_BASE_URL || \"http://localhost:3001\";\n\nclass IBMWatsonAPI {\n\n  static async getTranslationFromAPI(lyrics, language) {\n    try {\n      const res = await axios({\n          method: \"get\",\n          url: `${BASE_URL}/ibm/translate`,\n          params: {lyrics, language},\n      });\n      const responseObj = JSON.parse(res.data);\n      return responseObj.response;\n    } catch(err) {\n      return \"Error attempting to read source text\"\n    };\n  };\n\n  static async getLanguages() {\n    try {\n      const res = await axios({\n          method: \"get\",\n          url: `${BASE_URL}/ibm/languages`\n      });\n      const responseObj = JSON.parse(res.data);\n      return responseObj.response.result.languages;\n    } catch(e) {\n    };\n  };\n};\n\n  export default IBMWatsonAPI;","import axios from \"axios\";\n\nconst BASE_URL = process.env.REACT_APP_BASE_URL || \"http://localhost:3001\";\n\nclass BackendCall {\n\n//////////////////////////////////////  REQUEST METHOD  //////////////////////////////////////\n\n  static async request(endpoint, paramsOrData = {}, verb = \"get\") {\n    return (await axios({\n      method: verb,\n      url: `${BASE_URL}/${endpoint}`,\n      [verb === \"get\" ? \"params\" : \"data\"]: paramsOrData}));\n  };\n\n//////////////////////////////////////  ADD SONG DATA  //////////////////////////////////////\n\n  static async addTrack(data) {\n    if ( data.preview_url === null ) data.preview_url = \"\";\n    let res = await this.request(\"track\", data, \"post\");\n    return res.data.response;\n  };\n\n  static async addArtist(data) {\n    let res = await this.request(\"artist\", data, \"post\");\n    return res.data.response;\n  };\n\n  static async addAlbum(data) {\n    let res = await this.request(\"album\", data, \"post\");\n    return res.data.response;\n  };\n\n  /**\n  * Adds Track, Artist, and Album data by calling the above three methods,\n  * which in then make separate requests to their respective routes\n  * adding to the database.\n  * @param {object} trackData - holds an object of data used within the components\n  * @param {object} artistData - object where the values are strings used to fire certain actions\n  * @param {object} albumData - object where the values are strings used to fire certain actions  \n  */\n  static async addTrackArtistAlbum(trackData, artistData, albumData) {\n    await this.addArtist(artistData);\n    await this.addAlbum(albumData);\n    const trackId = await this.addTrack(trackData);\n\n    if (trackId === \"This song already exists in DB\") {\n      return \"No data was added to the DB\";\n    };\n\n    return \"Added new track to the DB\";\n  };\n\n//////////////////////////////////////  CHECK AGAINST BACKEND FOR VARIOUS CONCNERS //////////////////////////////////////\n\n  static async checkIfTrackHasLyrics(data) {\n    let res = await this.request(\"track/hasLyrics\", data);\n    return res.data.response;\n  };\n\n  static async checkIfTrackIsInDB(data) {\n    let res = await this.request(\"track/inDatabase\", data);\n    return res.data.response;\n  };\n\n  static async checkIfAlbumIsInDB(data) {\n    let res = await this.request(\"album\", data);\n    return res.data.response;\n  };\n\n//////////////////////////////////////  GET/ADD LYRICS  //////////////////////////////////////\n\n  static async addLyrics(data) {\n    let res = await this.request(\"track\", data, \"patch\");\n    return res.data.response;\n  };\n\n  static async getLyrics(data) {\n    let res = await this.request(\"track/getLyrics\", data);\n    return res.data.response;\n  };\n\n//////////////////////////////////////  GET/ADD TRANSLATION  //////////////////////////////////////\n\n  static async getTranslationFromDB(data) {\n    let res = await this.request(\"translation\", data);\n    return res.data.response;\n  };\n\n  static async addTranslation(data) {\n    let res = await this.request(\"translation\", data, \"post\");\n    return res.data.response;\n  };\n\n//////////////////////////////////////  GET ARTISTS/IDS  //////////////////////////////////////\n\n  static async getArtistsAndArtistIds() {\n    let res = await this.request(\"artist/ids\");\n    return res.data.response;\n  };\n\n//////////////////////////////////////  GET GENRES / GET ARTISTS FROM SPECIFIC GENRE  //////////////////////////////////////\n\n  static async getGenres() {\n    let res = await this.request(\"artist/allGenres\");\n    return res.data.response;\n  };\n\n  static async getArtistByGenre(data) {\n    let res = await this.request(\"artist/byGenre\", data);\n    return res.data.response;\n  };\n\n//////////////////////////////////////  GET DANCEABILITY  //////////////////////////////////////\n\n  static async getDanceabilityTracks(data) {\n    let res = await this.request(\"track/danceability\", data);\n    return res.data.response;\n  };\n\n//////////////////////////////////////  GET ALBUMS  //////////////////////////////////////\n\n  static async getAlbums(data) {\n    let res = await this.request(\"album\", data);\n    return res.data.response;\n  };\n\n//////////////////////////////////////  GET ALBUMS  //////////////////////////////////////\n\n  static async getTracks(data) {\n    let res = await this.request(\"track/getTracks\", data);\n    return res.data.response;\n  };\n\n//////////////////////////////////////  GET SELECTED SEARCH RESULT DB INFO  //////////////////////////////////////\n\n  /**\n  * A function that restructures the object given in the argument\n  * to have the a consistent pattern, and remove any uncessary information,\n  * as well as add boolean values as to whether that track has lyrics or is\n  * already in the database by making two separate backend calls.\n  * @param {object} track - holds an object of Spotify data for a given track\n  */\n  static async consolidateSelectedSearchResultInfo(track) {\n    const selectedTrack = {};\n    let hasLyrics = await BackendCall.checkIfTrackHasLyrics({trackId: track.id});\n    let inDatabase = await BackendCall.checkIfTrackIsInDB({trackId: track.id});\n\n    selectedTrack[\"trackId\"] = track.id;\n    selectedTrack[\"trackName\"] = track.name;\n    selectedTrack[\"artistId\"] = track.artists[0].id;\n    selectedTrack[\"artistName\"] = track.artists[0].name;\n    selectedTrack[\"albumId\"] = track.album.id;\n    selectedTrack[\"albumName\"] = track.album.name;\n    selectedTrack[\"hasLyrics\"] = hasLyrics;\n    selectedTrack[\"inDatabase\"] = inDatabase;\n\n    return selectedTrack;\n  };\n\n//////////////////////////////////////  GET LYRICS FROM LYRICS API  //////////////////////////////////////\n\n  static async getLyricsFromAPI(data) {\n    let res = await this.request(\"lyrics\", data);\n    return res.data.response;\n  };\n};\n\nexport default BackendCall;","import {GET_TRANSLATION, UPDATE_TRANSLATION_ERRORS} from \"../actionTypes\";\nimport IBMWatsonAPI from \"../IBMWatsonAPI\";\nimport BackendCall from '../BackendCall';\n\n/**\n* Receives the lyrics and desired target language and checks the databse\n* to see if we have that specific translation. If not, it will make a call\n* to the IBM API to get translation. \n* @param {string} targetLanguage - language input value user entered\n* @param {array} languages - available languages IBM can translate to\n* @param {string} trackId - spotify id of song selected\n* @param {string} lyrics - lyrics from song selected\n*/\nexport function getTranslation(targetLanguage, languages, trackId, lyrics) {\n\n  return async function(dispatch) {\n    const errors = {languageError: false, translationError: false};\n\n    const fetchTranslation = async (language, trackId, lyrics) => {\n      try {\n\n        //CHECKING TO SEE IF WE HAVE THAT SONG WITH THAT TRACK ID AND THE SPECIFIED LANGUAGE IN OUR TRANSLATION TABLE\n        const response = await BackendCall.getTranslationFromDB({track_id: trackId, selectedLanguage: language});\n\n        if (response === \"No Translation in DB\") {\n          const IBMTranslation = await IBMWatsonAPI.getTranslationFromAPI(lyrics, language);\n\n          if (IBMTranslation === \"Error attempting to read source text\") {\n            errors[\"translationError\"] = true;\n            return \"No Translation Available\";\n          } else {\n            await BackendCall.addTranslation({track_id: trackId, language, translation: IBMTranslation});\n            return IBMTranslation;\n          };\n        } else {\n          return response;\n        };\n\n      } catch(e) {\n        errors[\"translationError\"] = true;\n        return \"No Translation Available\";\n      };\n    };\n\n    const handleLanguageSearchSubmit = async (targetLanguage, languages) => {\n      let language;\n      try{\n        //FILTER OVER LANGUAGES IBM CAN TRANSLATE TO AND PULL OUT THE LANGUAGE-CODE OF THE LANGUAGE THE USER WANT'S TO USE\n        [{language}] = languages.filter(l => l.language_name.toLowerCase() === targetLanguage.toLowerCase());\n      } catch(e) {\n        errors[\"languageError\"] = true;\n        return \"Could not read language value\";\n      };\n\n      const translation = await fetchTranslation(language, trackId, lyrics);\n      return translation;\n    };\n\n    const translation = await handleLanguageSearchSubmit(targetLanguage, languages);\n    dispatch(retrieveTranslation(translation));\n    dispatch(updateGetTranslationErrors(errors));\n  };\n};\n\nfunction retrieveTranslation(translation) {\n  return {type: GET_TRANSLATION, translation};\n};\n\nfunction updateGetTranslationErrors(errors) {\n  return {type: UPDATE_TRANSLATION_ERRORS, errors};\n};","import React, {useState, useEffect} from 'react';\nimport {Spring} from 'react-spring/renderprops';\nimport './sass/mysass.scss';\n//COMPONENT IMPORTS\nimport SearchBar from \"./SearchBar\";\n//REDUX IMPORTS\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {getTranslation} from \"./actionCreators/getTranslationCreator\";\n//IONICONS IMPORTS\nimport IosMusicalNotes from 'react-ionicons/lib/IosMusicalNotes';\n\nfunction LanguageSelect({selectedTrackId, typeOfSearch}) {\n  //REACT STATE\n  const [isLoading, setIsLoading] = useState(false);\n  //REDUX STORE\n  const dispatch = useDispatch();\n  const languages = useSelector(store => store.languages);\n  const lyrics = useSelector(store => store.lyrics);\n  const translation = useSelector(store => store.translation);\n  const translationError = useSelector(store => store.errors.translationError);\n  const languageError = useSelector(store => store.errors.languageError);\n\n////////////////////////////////////////////////////  USE EFFECTS  ////////////////////////////////////////////////////\n\n  //WATCHES FOR EITHER AN ERROR OR THE TRANSLATION TO COME THROUGH TO REMOVE LOADING ICON\n  useEffect(() => {\n\n    const updateIsLoading = () => {\n      if (translation || translationError || languageError) {\n        setIsLoading(false);\n      }\n    };\n    updateIsLoading();\n  }, [translation, translationError, languageError])\n\n////////////////////////////////////////////////////  HANDLE CLICK FUNCTIONS  ////////////////////////////////////////////////////\n\n  const handleLanguageSearchSubmit = async (searchVal) => {\n    setIsLoading(true);\n    try {\n      dispatch(getTranslation(searchVal, languages, selectedTrackId, lyrics));\n    } catch(e) {\n      setIsLoading(false);\n    };\n  };\n\n////////////////////////////////////////////////////  JSX  ////////////////////////////////////////////////////\n\n  //DISPLAY LOADING ICON\n  let LoadingIconDiv;\n  \n  if (isLoading) LoadingIconDiv = (\n    <div className=\"Loading-Box\">\n      <IosMusicalNotes rotate={true} fontSize=\"200px\" color=\"#fff\"/>\n    </div>\n  );\n\n  if (!isLoading) LoadingIconDiv = (\n    <div className=\"Loading-Box\"></div>\n  );\n\n////////////////////////////////////////////////////  RETURN  ////////////////////////////////////////////////////\n\n  return (\n    <div>\n      <Spring\n        from={{opacity: 0}}\n        to={{opacity: 1}}\n        config={{delay: 300, duration: 300}}\n      >\n      {props => (\n        <div style={props}>\n  \n            <SearchBar loadingIcon={LoadingIconDiv} header=\"What language would you like your lyrics translated to?\" handleSubmit={handleLanguageSearchSubmit} typeOfSearch={typeOfSearch}/>\n         \n        </div>\n      )}\n    </Spring>\n  </div>\n  );\n};\n\nexport default LanguageSelect;","import React from 'react';\nimport {Spring} from 'react-spring/renderprops';\nimport './sass/mysass.scss';\n//REDUX IMPORTS\nimport {useSelector} from \"react-redux\";\n\nfunction LyricsTranslation({typeOfLyricsTranslation}) {\n  //REDUX STORE\n  const translation = useSelector(store => store.translation);\n  const lyrics = useSelector(store => store.lyrics);\n\n  let lyricsClassName;\n  let translationClassName;\n\n  if (typeOfLyricsTranslation === \"genre\") lyricsClassName = \"Lyrics Genre-Lyrics\";\n  if (typeOfLyricsTranslation === \"genre\") translationClassName = \"Translation Genre-Translation\";\n  if (typeOfLyricsTranslation === \"artists\") lyricsClassName = \"Lyrics Artist-Lyrics\";\n  if (typeOfLyricsTranslation === \"artists\") translationClassName = \"Translation Artist-Translation\";\n  if (typeOfLyricsTranslation === \"danceability\") lyricsClassName = \"Lyrics Danceability-Lyrics\";\n  if (typeOfLyricsTranslation === \"danceability\") translationClassName = \"Translation Danceability-Translation\";\n  if (typeOfLyricsTranslation === \"search\") lyricsClassName = \"Lyrics Search-Lyrics\";\n  if (typeOfLyricsTranslation === \"search\") translationClassName = \"Translation Search-Translation\";\n\n////////////////////////////////////////////////////  RETURN  ////////////////////////////////////////////////////\n\n  return (\n    <Spring\n      from={{opacity: 0}}\n      to={{opacity: 1}}\n      config={{delay: 300, duration: 300}}\n    >\n      {props => (\n        <div style={props}>\n\n          <div className=\"Lyrics-Translation\">\n            <div className=\"Lyrics-Container\">\n              <p className={lyricsClassName}>ORIGINAL LYRICS</p>\n              <p className={lyricsClassName}>{lyrics}</p>\n            </div>\n            <div className=\"Translation-Container\">\n              <p className={translationClassName}>TRANSLATED LYRICS</p>\n              <p className={translationClassName}>{translation}</p>\n            </div>\n          </div>\n\n        </div>\n      )}\n    </Spring>\n  );\n};\n\nexport default LyricsTranslation;","import axios from \"axios\";\n\nconst BASE_URL = process.env.REACT_APP_BASE_URL || \"http://localhost:3001\";\n\nclass SpotifyAPI {\n\n//////////////////////////////////////  REQUEST METHOD  //////////////////////////////////////\n\n  static async request(endpoint, paramsOrData = {}, verb = \"get\") {\n    return (await axios({\n      method: verb,\n      url: `${BASE_URL}/${endpoint}`,\n      [verb === \"get\" ? \"params\" : \"data\"]: paramsOrData}));\n  };\n\n//////////////////////////////////////  SEARCH RESULTS  //////////////////////////////////////\n\n  static async requestSearch(search) {\n    let res = await this.request(\"spotify/requestSearch\", {search});\n    return res.data.response;\n  };\n\n/////////////////////////////////  GET SEED DATA FOR ARTISTS  /////////////////////////////////\n\n  static async getTrackArtistAlbumData(data) {\n    let res = await this.request(\"spotify/getTrackArtistAlbumData\", data);\n    return res.data.response;\n  };\n};\n\nexport default SpotifyAPI;","import {UPDATE_GENERAL_ERROR} from \"../actionTypes\";\n\n/**\n* A general error object for redux state that holds a boolean value\n* depending on whether a general error has occured in the app.\n*/\nexport function sendGeneralError() {\n\n  return async function(dispatch) {\n    dispatch(updateGeneralError(true));\n  };\n};\n\nfunction updateGeneralError(generalError) {\n  return {type: UPDATE_GENERAL_ERROR, generalError};\n};","import React, {memo, useState} from 'react';\nimport BackendCall from \"./BackendCall\";\nimport Hover from \"./Hover\";\n//REDUX IMPORTS\nimport {useDispatch} from \"react-redux\";\nimport {sendGeneralError} from \"./actionCreators/sendGeneralErrorCreator\";\n\nconst SearchResult = memo((props) => {\n  const [albumHover, setAlbumHover] = useState(false);\n  const dispatch = useDispatch();\n\n  const handleSearchClick = async () => {\n    try {\n      const updatedTrack = await BackendCall.consolidateSelectedSearchResultInfo(props.musicObject)\n      props.handleClick(updatedTrack);\n    } catch(e) {\n      dispatch(sendGeneralError());\n    };\n  };\n\n  const handleArtistsClick = () => {\n    props.handleClick(props.spotify_id);\n  };\n\n  const handleAlbumClick = () => {\n    props.handleClick(props.id);\n  };\n\n  const handleTrackClick = () => {\n    props.handleClick(props.musicObject);\n  };\n\n  const handleGenreClick = () => {\n    props.handleClick(props.genre);\n  };\n\n////////////////////////////////////////////////////  SEARCH RESULTS  ////////////////////////////////////////////////////\n\n  let displaySearchResults;\n\n  if (props.typeOfResults === \"search-results\") displaySearchResults = (\n    <div className=\"Main-Result-Container\">\n    <div className=\"Result-Main-TopFiller\"></div>\n      <Hover scale={1.05} previewURL={props.previewURL ? props.previewURL : 'No URL'}>\n        <p onClick={handleSearchClick} className=\"Result-Subheader Search-Track-Subheader\">{<span className=\"Result-Header Search-Track-Header\">{props.track}</span>} {<br></br>} by {props.artist} on {props.album}</p>\n      </Hover>\n    </div>\n  );\n\n////////////////////////////////////////////////////  DANCEABILITY RESULTS  ////////////////////////////////////////////////////\n\n  let displayDanceabilityResults;\n\n  if (props.typeOfResults === \"danceability-results\") displayDanceabilityResults = (\n    <div className=\"Danceability-Result-Container\">\n      <Hover scale={1.05} previewURL={props.previewURL ? props.previewURL : 'No URL'}>\n        <p onClick={handleTrackClick} className=\"Result-Subheader Danceability-Track-Subheader\">{<span className=\"Result-Header Danceability-Track-Header\">{props.track}</span>} {<br></br>} by {props.artist} on {props.album}</p>\n      </Hover>\n    </div>\n  );\n\n////////////////////////////////////////////////////  ARTISTS  ////////////////////////////////////////////////////\n\n  let artistClassName;\n\n  if (props.typeOfArtists === \"genre\") artistClassName = \"Result-Main Genre-Artists\";\n  if (props.typeOfArtists === \"artists\") artistClassName = \"Result-Main Artist-Artists\";\n\n  let displayArtists;\n\n  if (props.typeOfResults === \"artists\") displayArtists = (\n    <div className=\"Main-Result-Container\">\n    {props.needsPaginationSlider && <div className=\"Result-Main-TopFiller\"></div>}\n      <Hover scale={1.05}>\n        <p onClick={handleArtistsClick} className={artistClassName}>{props.artist}</p>\n      </Hover>\n    </div>\n  );\n\n////////////////////////////////////////////////////  ALBUMS  ////////////////////////////////////////////////////\n\n  let albumsClassName;\n\n  if (props.typeOfAlbums === \"genre\") albumsClassName = \"Album-Name Genre-Albums\";\n  if (props.typeOfAlbums === \"artists\") albumsClassName = \"Album-Name Artist-Albums\";\n\n  let displayAlbums;\n\n  if (props.typeOfResults === \"albums\") displayAlbums = (\n    <div className=\"Album\" onMouseEnter={() => setAlbumHover(true)} onMouseLeave={() => setAlbumHover(false)}>\n      <Hover scale={1.05}>\n        {albumHover && \n        <div className=\"Album-Name-Box\" onClick={handleAlbumClick}>\n        <p className={albumsClassName}>{props.name}</p>\n        </div>\n        }\n        <img src={props.image} alt=\"\"/>\n      </Hover>\n    </div>\n  );\n\n////////////////////////////////////////////////////  TRACKS  ////////////////////////////////////////////////////\n\n  let trackClassNames;\n\n  if (props.typeOfTracks === \"artists\") trackClassNames = \"Result-Main Artist-Tracks\";\n  if (props.typeOfTracks === \"genre\") trackClassNames = \"Result-Main Genre-Tracks\";\n\n  let displayTracks;\n  \n  if (props.typeOfResults === \"tracks\") displayTracks = (\n    <div className=\"Main-Result-Container\">\n    {props.needsPaginationSlider && <div className=\"Result-Main-TopFiller\"></div>}\n      <Hover scale={1.05} previewURL={props.previewURL ? props.previewURL : 'No URL'}>\n        <p onClick={handleTrackClick} className={trackClassNames}>{props.trackName}</p>\n      </Hover>\n    </div>\n  );\n\n////////////////////////////////////////////////////  GENRES  ////////////////////////////////////////////////////\n\n  let displayGenres;\n\n  if (props.typeOfResults === \"genres\") displayGenres = (\n    <div className=\"Main-Result-Container\">\n    <div className=\"Result-Main-TopFiller\"></div>\n      <Hover scale={1.05}>\n        <p onClick={handleGenreClick} className=\"Result-Main Genre-Genres\">{props.genre}</p>\n      </Hover>\n    </div>\n  );\n\n////////////////////////////////////////////////////  RETURN  ////////////////////////////////////////////////////\n\n  return (\n    <>\n      {displaySearchResults}\n      {displayDanceabilityResults}\n      {displayArtists}\n      {displayAlbums}\n      {displayTracks}\n      {displayGenres}\n    </>\n  );\n});\n\nexport default SearchResult;","import React, {useState, memo} from 'react';\nimport {withStyles} from '@material-ui/core/styles';\nimport Slider from '@material-ui/core/Slider';\n\n//CUSTOM STYLING FOR MUI SLIDER\nconst MyPaginationSlider = withStyles({\n    root: {\n    color: \"#fff\",\n    height: 8\n  },\n  thumb: {\n    height: 24,\n    width: 24,\n    backgroundColor: \"#fff\",\n    border: \"2px solid currentColor\",\n    marginTop: -10,\n    marginLeft: -12,\n    \"&:focus,&:hover,&$active\": {\n      boxShadow: \"inherit\"\n    }\n  },\n  active: {},\n  valueLabel: {\n    left: \"calc(-50% + 14px)\",\n    top: -22,\n    \"& *\": {\n      background: \"transparent\",\n      color: \"#000\"\n    }\n  },\n  track: {\n    height: 8,\n    borderRadius: 4\n  },\n  rail: {\n    height: 4,\n    borderRadius: 4,\n    opacity: 0.5,\n    backgroundColor: \"#bfbfbf\"\n  }\n})(Slider);\n\nconst PaginationSlider = memo(({resultsArray, itemsPerPage, handleSliderChange, containerClass, sliderClass}) => {\n  const [sliderVal, setSliderVal] = useState(0);\n  const multipleOf = resultsArray.length % itemsPerPage === 0;\n  let maxSliderVal = Math.floor(resultsArray.length / itemsPerPage);\n\n  if (!multipleOf) maxSliderVal += 1;\n\n  const handleChange = (event, newValue) => {\n    setSliderVal(newValue);\n    handleSliderChange(newValue);\n  };\n\n////////////////////////////////////////////////////  RETURN  ////////////////////////////////////////////////////\n\n  return (\n    <div className={containerClass}>\n      <MyPaginationSlider className={sliderClass} color=\"\" value={sliderVal} max={maxSliderVal - 1} min={0} step={1} onChange={handleChange} aria-labelledby=\"continuous-slider\" track={false}/>\n    </div>\n  );\n});\n\nexport default PaginationSlider;","import React, {useState} from 'react';\nimport SearchResult from \"./SearchResult\";\nimport PaginationSlider from \"./PaginationSlider\";\n\nconst SearchResultList = ({resultsArray, handleSearch, itemsPerPage, typeOfResults, loadingIcon, typeOfTracks, typeOfArtists, typeOfAlbums}) => {\n  const [sliderVal, setSliderVal] = useState(0);\n  const resultsInView = resultsArray.slice(sliderVal * itemsPerPage, (sliderVal * itemsPerPage) + itemsPerPage);\n  const needsPaginationSlider = resultsArray.length > itemsPerPage;\n  \n  const updateResultsInView = (val) => {\n    setSliderVal(val);\n  };\n\n////////////////////////////////////////////////////  SEARCH RESULTS  ////////////////////////////////////////////////////\n\n  let displaySearchResults;\n\n  if (typeOfResults === \"search-results\") displaySearchResults = (\n    <>\n      <div className=\"Result-Box\">\n        {loadingIcon}\n        {resultsInView.map((r, i) => <SearchResult key={r.id} index={i} typeOfResults=\"search-results\" handleClick={handleSearch} previewURL={r.preview_url} artist={r.artists[0].name} album={r.album.name} track={r.name} musicObject={r}/>)}\n      </div> \n      {needsPaginationSlider && <PaginationSlider resultsArray={resultsArray} itemsPerPage={itemsPerPage} handleSliderChange={updateResultsInView} containerClass=\"Main-Pagination-Slider-Container\" sliderClass=\"Main-Pagination-Slider\"/>}\n      {!needsPaginationSlider && <div className=\"Main-Pagination-Slider-Placeholder\"></div>}\n    </>\n  );\n\n////////////////////////////////////////////////////  DISPLAY ARTISTS  ////////////////////////////////////////////////////\n\n  let displayArtists;\n\n  if (typeOfResults === \"artists\") displayArtists = (\n    <>\n      <div className=\"Result-Box\">\n        {loadingIcon}\n        {resultsInView.map((r, i) => <SearchResult key={i} index={i} typeOfResults=\"artists\" handleClick={handleSearch} artist={r.artistName} spotify_id={r.artistId} typeOfArtists={typeOfArtists} needsPaginationSlider={needsPaginationSlider}/>)}\n      </div>\n      {needsPaginationSlider && <PaginationSlider  resultsArray={resultsArray} itemsPerPage={itemsPerPage} handleSliderChange={updateResultsInView} containerClass=\"Main-Pagination-Slider-Container\" sliderClass=\"Main-Pagination-Slider\"/>}\n    </>\n  );\n\n////////////////////////////////////////////////////  DISPLAY ALBUMS  ////////////////////////////////////////////////////\n\n  let displayAlbums;\n\n  if (typeOfResults === \"albums\") displayAlbums = (\n    <>\n      <div className=\"Browse-Albums\">\n        {resultsInView.map((r, i) => <SearchResult key={i} index={i} typeOfResults=\"albums\" handleClick={handleSearch} name={r.albumName} id={r.albumId} image={r.albumImg} typeOfAlbums={typeOfAlbums}/>)}\n      </div>\n      {needsPaginationSlider && <PaginationSlider  resultsArray={resultsArray} itemsPerPage={itemsPerPage} handleSliderChange={updateResultsInView} containerClass=\"Main-Pagination-Slider-Container\" sliderClass=\"Main-Pagination-Slider\"/>}\n    </>\n  );\n\n////////////////////////////////////////////////////  DISPLAY TRACKS  ////////////////////////////////////////////////////\n\n  let displayTracks;\n\n  if (typeOfResults === \"tracks\") displayTracks = (\n    <>\n      <div className=\"Result-Box\">\n        {resultsInView.map((r, i) => <SearchResult key={r.trackId} index={i} typeOfResults=\"tracks\" handleClick={handleSearch} artistName={r.artistName} trackName={r.trackName} previewURL={r.previewURL} musicObject={r} typeOfTracks={typeOfTracks} needsPaginationSlider={needsPaginationSlider}/>)}\n      </div>\n      {needsPaginationSlider && <PaginationSlider  resultsArray={resultsArray} itemsPerPage={itemsPerPage} handleSliderChange={updateResultsInView} containerClass=\"Main-Pagination-Slider-Container\" sliderClass=\"Main-Pagination-Slider\"/>}\n    </>\n  );\n\n\n////////////////////////////////////////////////////  DISPLAY GENRES  ////////////////////////////////////////////////////\n\n  let displayGenres;\n\n  if (typeOfResults === \"genres\") displayGenres = (\n    <>\n      <div className=\"Result-Box\">\n        {resultsInView.map((r, i) => <SearchResult key={i} index={i} typeOfResults=\"genres\" handleClick={handleSearch} genre={r}/>)}\n      </div> \n      {needsPaginationSlider && <PaginationSlider  resultsArray={resultsArray} itemsPerPage={itemsPerPage} handleSliderChange={updateResultsInView} containerClass=\"Main-Pagination-Slider-Container\" sliderClass=\"Main-Pagination-Slider\"/>}\n      {!needsPaginationSlider && <div className=\"Main-Pagination-Slider-Placeholder\"></div>}\n    </>\n  );\n\n////////////////////////////////////////////////////  DANCEABILITY RESULTS  ////////////////////////////////////////////////////\n\n  let displayDanceabilityTracks;\n\n  if (typeOfResults === \"danceability-results\") displayDanceabilityTracks = (\n    <>\n      <div className=\"Danceability-Result-Box\">\n        {resultsArray.length && resultsInView.map((r, i) => <SearchResult key={r.trackId} index={i} typeOfResults=\"danceability-results\" previewURL={r.previewURL} handleClick={handleSearch} artist={r.artistName} album={r.albumName} track={r.trackName} musicObject={r} typeOfTracks=\"danceability\"/>)}\n      </div>\n      {needsPaginationSlider && <PaginationSlider  resultsArray={resultsArray} itemsPerPage={itemsPerPage} handleSliderChange={updateResultsInView} containerClass=\"Danceability-Pagination-Slider-Container\" sliderClass=\"Danceability-Pagination-Slider\"/>}\n      {!needsPaginationSlider && <div className=\"Temp-v2\"></div>}\n    </>\n  );\n\n////////////////////////////////////////////////////  RETURN  ////////////////////////////////////////////////////\n\n  return (\n    <>\n      {displaySearchResults}\n      {displayArtists}\n      {displayAlbums}\n      {displayTracks}\n      {displayGenres}\n      {displayDanceabilityTracks}\n    </>\n  );\n};\n\nexport default SearchResultList;","import {RESET_TRANSLATION, RESET_LYRICS, RESET_TRACKS, RESET_ALBUMS, RESET_ARTISTS, RESET_SEARCH_RESULTS, RESET_SELECTED_TRACK} from \"../actionTypes\";\n\n/**\n* Creator that will reset the specific piece of state back to \n* it's initial state. This does not include the handle errors state.\n* @param {array} specificState - an array of strings that correspond with a piece of state\n*/\nexport function resetStore(...specificState) {\n\n  return async function(dispatch) {\n\n    for (let i = 0; i < specificState.length; i++) {\n      if (specificState[i] === \"artists\") dispatch(resetArtists());\n      if (specificState[i] === \"albums\") dispatch(resetAlbums());\n      if (specificState[i] === \"tracks\") dispatch(resetTracks());\n      if (specificState[i] === \"lyrics\") dispatch(resetLyrics());\n      if (specificState[i] === \"translation\") dispatch(resetTranslation());\n      if (specificState[i] === \"searchResults\") dispatch(resetSearchResults());\n      if (specificState[i] === \"selectedTrack\") dispatch(resetSelectedTrack());\n    };\n  };\n};\n\nfunction resetArtists() {\n  return {type: RESET_ARTISTS};\n};\n\nfunction resetAlbums() {\n  return {type: RESET_ALBUMS};\n};\n\nfunction resetTracks() {\n  return {type: RESET_TRACKS};\n};\n\nfunction resetLyrics() {\n  return {type: RESET_LYRICS};\n};\n\nfunction resetTranslation() {\n  return {type: RESET_TRANSLATION};\n};\n\nfunction resetSearchResults() {\n  return {type: RESET_SEARCH_RESULTS};\n};\n\nfunction resetSelectedTrack() {\n  return {type: RESET_SELECTED_TRACK};\n};","import {GET_LYRICS, UPDATE_LYRICS_ERROR} from \"../actionTypes\";\nimport BackendCall from '../BackendCall';\n\n/**\n* Contacts the database to get lyrics for the selected track.\n* @param {string} trackId - spotify id of selected track\n*/\nexport function getLyricsFromDB(trackId) {\n\n  return async function(dispatch) {\n    try {\n      const lyrics = await BackendCall.getLyrics({trackId});\n\n      if (lyrics === undefined || lyrics === null || lyrics === 'No Lyrics') {\n        throw new Error(\"Lyrics are not actual lyrics\");\n      };\n      dispatch(addLyrics(lyrics));\n    } catch(e) {\n      dispatch(updateLyricsError(true));\n    };\n  };\n};\n\nfunction addLyrics(lyrics) {\n  return {type: GET_LYRICS, lyrics};\n};\n\nfunction updateLyricsError(lyricsError) {\n  return {type: UPDATE_LYRICS_ERROR, lyricsError};\n};","import {GET_LYRICS, UPDATE_LYRICS_ERROR} from \"../actionTypes\";\nimport BackendCall from '../BackendCall';\n\n/**\n* Makes a call to the lyrics API to see if lyrics exist for this song. If they\n* do, set lyrics in state and add to databse. \n* Else, add \"No Lyrics\" for track in database.\n* @param {string} track_id - spotify id for track\n* @param {string} artist - artist name\n* @param {string} track - track name\n*/\nexport function findLyricsFromAPI(track_id, artist, track) {\n\n  return async function(dispatch) {\n    try {\n      //GET LYRICS FROM LYRICS API\n      const lyrics = await BackendCall.getLyricsFromAPI({artist, track});\n\n      //IF THERE ARE NO LYRICS FOR THAT SONG FROM LYRICS API\n      if (lyrics === \"No Lyrics from API\") {\n        //ADD \"NO LYRICS\" AS THE LYRICS VALUE FOR THAT TRACK IN THE DATABASE\n        await BackendCall.addLyrics({track_id, lyrics: \"No Lyrics\"});\n        dispatch(updateLyricsError(true));\n      } else {\n        //ADD LYRICS TO THAT TRACK IN THE DATABASE\n        await BackendCall.addLyrics({track_id, lyrics});\n        dispatch(addLyrics(lyrics));\n      };\n\n    } catch(e) {\n      dispatch(updateLyricsError(true));\n    };\n  };\n};\n\nfunction addLyrics(lyrics) {\n  return {type: GET_LYRICS, lyrics};\n};\n\nfunction updateLyricsError(lyricsError) {\n  return {type: UPDATE_LYRICS_ERROR, lyricsError};\n};","import {ADD_TRACK} from \"../actionTypes\";\n\n/**\n* Adds the track object received from spotify to redux state \n* in order to be used in other components, mainly the spotify id.\n* @param {object} track - object of track data from spotify\n*/\nexport function addSelectedTrack(track) {\n\n  return async function(dispatch) {\n    dispatch(addTrack(track));\n  };\n};\n\nfunction addTrack(track) {\n  return {type: ADD_TRACK, track};\n};","import React, {useState, useEffect} from 'react';\nimport {Spring} from 'react-spring/renderprops';\n//API IMPORTS\nimport SpotifyAPI from \"./SpotifyAPI\";\nimport BackendCall from \"./BackendCall\";\n//COMPONENT IMPORTS\nimport SearchResultList from \"./SearchResultList\";\n//REDUX IMPORTS\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {resetStore} from \"./actionCreators/resetStoreCreator\";\nimport {getLyricsFromDB} from \"./actionCreators/getLyricsFromDBCreator\";\nimport {findLyricsFromAPI} from \"./actionCreators/findLyricsFromAPICreator\";\nimport {addSelectedTrack} from \"./actionCreators/addSelectedTrackCreator\";\nimport {sendGeneralError} from \"./actionCreators/sendGeneralErrorCreator\";\n//IONICONS IMPORTS\nimport IosMusicalNotes from 'react-ionicons/lib/IosMusicalNotes';\n\nconst Tracks = ({typeOfResults, results, itemsPerPage, animateIn, typeOfTracks}) => {\n  //REACT STATE\n  const [isLoading, setIsLoading] = useState(false);\n  //REDUX STORE\n  const lyrics = useSelector(store => store.lyrics);\n  const lyricsError = useSelector(store => store.errors.lyricsError);\n  const generalError = useSelector(store => store.errors.generalError);\n  const selectedTrackId = useSelector(store => store.selectedTrack.trackId);\n  const dispatch = useDispatch();\n\n////////////////////////////////////////////////////  USE EFFECTS  ////////////////////////////////////////////////////\n\n  //WATCHES FOR EITHER AN ERROR OR THE LYRICS TO COME THROUGH TO REMOVE LOADING ICON\n  useEffect(() => {\n\n    const updateIsLoading = () => {\n\n      if (lyrics || lyricsError || generalError) setIsLoading(false);\n    };\n    updateIsLoading();\n  }, [lyrics, lyricsError, generalError]);\n\n////////////////////////////////////////////////////  HANDLE CLICK AND SUBMIT FUNCTIONS  ////////////////////////////////////////////////////\n\n  const handleTrackResultsClick = async (track) => {\n    const trackId = track.trackId;\n    const artistId = track.artistId;\n    const albumId = track.albumId;\n\n    if (trackId !== selectedTrackId) {\n      setIsLoading(true);\n    };\n\n    dispatch(addSelectedTrack(track));\n    dispatch(resetStore(\"translation\"));\n\n    try {\n      //MAKE CALL TO SPOTIFY API TO GET ADDITIONAL TRACK AND ARTIST INFO (GENRE, TEMPO, DANCEABILITY, ETC).\n      //THIS ALSO MAKES THE PROCESS OF GETTING INFO FOR DB STREAMLINED SINCE WE ONLY NEED 3 ID'S\n      if (track.hasLyrics) {\n        dispatch(getLyricsFromDB(trackId));\n      } else {\n        if (track.inDatabase) {\n          dispatch(findLyricsFromAPI(trackId, track.artistName, track.trackName));\n        } else {\n          const [trackData, artistData, albumData] = await SpotifyAPI.getTrackArtistAlbumData({trackId, artistId, albumId});\n          await BackendCall.addTrackArtistAlbum(trackData, artistData, albumData);\n          dispatch(findLyricsFromAPI(trackId, track.artistName, track.trackName));\n        };\n      };\n    } catch(e) {\n      setIsLoading(false);\n      dispatch(sendGeneralError());\n    };\n  };\n\n////////////////////////////////////////////////////  JSX  ////////////////////////////////////////////////////\n\n  //DISPLAY LOADING ICON\n  let LoadingIconDiv;\n  \n  if (isLoading) LoadingIconDiv = (\n    <div className=\"Loading-Box\">\n      <IosMusicalNotes rotate={true} fontSize=\"200px\" color=\"#fff\" />\n    </div>\n  );\n\n  if (!isLoading) LoadingIconDiv = (\n    <div className=\"Loading-Box\"></div>\n  );\n\n  //DISPLAY TRACK SELECTION\n  let TrackResults;\n  \n  if (animateIn) TrackResults = (\n    <Spring\n      from={{opacity: 0}}\n      to={{opacity: 1}}\n      config={{delay: 300, duration: 300}}\n    >\n      {props => (\n        <div style={props}>\n\n          <div className=\"Main-Container\">\n            <SearchResultList key={results[0].trackId} typeOfResults={typeOfResults} resultsArray={results} handleSearch={handleTrackResultsClick} itemsPerPage={itemsPerPage} loadingIcon={LoadingIconDiv} typeOfTracks={typeOfTracks}/>\n          </div>\n\n        </div>\n      )}\n    </Spring>\n  );\n\n  if (!animateIn) TrackResults = (\n    <SearchResultList key={results[0].trackId} typeOfResults={typeOfResults} resultsArray={results} handleSearch={handleTrackResultsClick} itemsPerPage={itemsPerPage} loadingIcon={LoadingIconDiv} typeOfTracks={typeOfTracks}/>\n  );\n\n\n////////////////////////////////////////////////////  RETURN  ////////////////////////////////////////////////////\n\n  return (\n    <>\n      {TrackResults}\n    </>\n  );\n};\n\nexport default Tracks;","import React from 'react';\nimport {Spring} from 'react-spring/renderprops';\nimport SearchBar from \"./SearchBar\";\n\nconst SearchLanding = ({handleTrackSearchSubmit}) => {\n\n  return (\n    <Spring\n      from={{opacity: 0}}\n      to={{opacity: 1}}\n      config={{delay: 300, duration: 300}}\n    >\n      {props => (\n        <div style={props}>\n\n          <SearchBar header=\"Find your song!\" handleSubmit={handleTrackSearchSubmit} typeOfSearch=\"search-landing\"/>\n\n        </div>\n      )}\n    </Spring>\n  );\n};\n\nexport default SearchLanding;","import React, {useEffect, useState} from \"react\";\nimport {resetStore} from \"./actionCreators/resetStoreCreator\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {useHistory, useLocation} from \"react-router-dom\";\nimport IosArrowUp from 'react-ionicons/lib/IosArrowUp';\nimport Hover from \"./Hover\";\n\nconst ToTopArrow = ({topRef, topInView}) => {\n  const [hitBottom, setHitBottom] = useState(false);\n  const [movingUp, setMovingUp] = useState(false);\n  const translation = useSelector(store => store.translation);\n  const dispatch = useDispatch();\n  const history = useHistory();\n  const location = useLocation();\n\n////////////////////////////////////////////////////  USE EFFECTS  ////////////////////////////////////////////////////\n\n  //SET STATE TO TRUE ONCE TRANSLATION IS DISPLAYED IN STORE SO THAT A RETURN TO TOP ARROW APPEARS\n  useEffect(() => {\n\n    const updateSetHitBottom = () => {\n\n      if (translation) {\n        setHitBottom(true);\n      };\n    };\n    updateSetHitBottom();\n  }, [translation, setHitBottom]);\n\n  //ONCE THE REF OF TOP MOST DIV, WHICH IS PASSED IN AS PROP, IS IN VIEW, RESET REDUX STORE\n  useEffect(() => {\n\n    const resetStoreReachingTop = () => {\n\n      if (movingUp && topInView) {\n\n        if (location.pathname === \"/\") {\n          history.push(\"/\");\n        } else {\n          history.push(\"/browse\");\n        };\n        setMovingUp(false);\n        dispatch(resetStore(\"artists\", \"albums\", \"tracks\", \"lyrics\", \"translation\", \"searchResults\", \"selectedTrack\"));\n      };\n    };\n    resetStoreReachingTop();\n  }, [movingUp, topInView, dispatch, setMovingUp, history, location.pathname]);\n\n////////////////////////////////////////////////////  HANDLE CLICK FUNCTION  ////////////////////////////////////////////////////\n\n  const handleClick = () => {\n    topRef.current.scrollIntoView({behavior: \"smooth\"});\n    setHitBottom(false);\n    setMovingUp(true);\n  };\n\n////////////////////////////////////////////////////  RETURN  ////////////////////////////////////////////////////\n\n  return (\n    <div className=\"TopArrow-Container\">\n      <div className=\"TopArrow-Box\">\n        {!hitBottom && <div></div>}\n        <Hover scale={1.20}>\n          {hitBottom && <IosArrowUp className=\"TopArrow\" onClick={handleClick} fontSize=\"100px\" color=\"#fff\"/>}\n        </Hover>\n      </div>\n    </div>\n  );\n};\n\nexport default ToTopArrow;","import {RESET_LANGUAGE_ERROR, RESET_TRANSLATION_ERROR, RESET_LYRICS_ERROR, RESET_SEARCH_ERROR, RESET_GENERAL_ERROR} from \"../actionTypes\";\n\n////////////////////////////////// RESET LYRICS ERROR VALUE //////////////////////////////////\n\nexport function resetSearchError() {\n  return async function(dispatch) {\n    dispatch(updateSearchError());\n  };\n};\n\nfunction updateSearchError() {\n  return {type: RESET_SEARCH_ERROR};\n};\n\n////////////////////////////////// RESET LYRICS ERROR VALUE //////////////////////////////////\n\nexport function resetLyricsError() {\n  return async function(dispatch) {\n    dispatch(updateLyricsError());\n  };\n};\n\nfunction updateLyricsError() {\n  return {type: RESET_LYRICS_ERROR};\n};\n\n////////////////////////////////// RESET LANGUAGE ERROR VALUE //////////////////////////////////\n\nexport function resetLanguageError() {\n  return async function(dispatch) {\n    dispatch(updateLanguageError());\n  };\n};\n\nfunction updateLanguageError() {\n  return {type: RESET_LANGUAGE_ERROR};\n};\n\n////////////////////////////////// RESET TRANSLATION ERROR VALUE //////////////////////////////////\n\nexport function resetTranslationError() {\n  return async function(dispatch) {\n    dispatch(updateTranslationError());\n  };\n};\n\nfunction updateTranslationError() {\n  return {type: RESET_TRANSLATION_ERROR};\n};\n\n////////////////////////////////// RESET GENERAL ERROR VALUE //////////////////////////////////\n\nexport function resetGeneralError() {\n  return async function(dispatch) {\n    dispatch(updateGeneralError());\n  };\n};\n\nfunction updateGeneralError() {\n  return {type: RESET_GENERAL_ERROR};\n};","import {GET_RESULTS, UPDATE_SEARCH_ERROR} from \"../actionTypes\";\nimport SpotifyAPI from \"../SpotifyAPI\";\n\n/**\n* Makes a call to the spotify API to get array of music objects\n* that best match the searchVal. Then so long as the array returned from\n* Spotify API has length, we update the store and set results to that array.\n* If the array is empty, we update search error reducer in store which will then\n* trigger a flash message saying \"nothing found with that input\"\n* @param {string} searchVal - input value form the search field\n*/\nexport function setResultsArray(searchVal) {\n\n  return async function(dispatch) {\n    const results = await SpotifyAPI.requestSearch(searchVal);\n\n    try {\n\n      if (results === \"Not Found\") {\n        dispatch(updateSearchError(true))\n      } else {\n        dispatch(pushResultsArray(results));\n      };\n    } catch(e) {\n      dispatch(updateSearchError(true));\n    };\n  };\n};\n\nfunction pushResultsArray(results) {\n  return {type: GET_RESULTS, results};\n};\n\nfunction updateSearchError(searchError) {\n  return {type: UPDATE_SEARCH_ERROR, searchError}\n};","import {useState, useEffect} from \"react\";\n\n  /**\n* Hook that utilizes an IntersectionObserver to determine whether or not\n* a component is in the viewport. This will be used to set the appropriate \n* background color.\n* @param {useRef} ref - input value form the search field\n* @param {object} options - input value form the search field\n*/\nfunction useOnScreen(ref, options={threshold: 0.3}) {\n  // STATE AND SETTER FOR STORING WHETER ELEMENT IS VISIBLE\n  const [isIntersecting, setIntersecting] = useState(false);\n\n  useEffect(() => {\n    const elementRef = ref;\n    const observer = new IntersectionObserver(([entry]) => {\n      \n      // UPDATE OUR STATE WHEN OBSERVER CALLBACK FIRES\n      setIntersecting(entry.isIntersecting);\n    }, options);\n\n    if (elementRef.current) {\n      observer.observe(elementRef.current);\n    };\n\n    return () => {\n      if (elementRef.current) {\n        observer.unobserve(elementRef.current);\n      };\n    };\n  }, [ref, options]); \n  return isIntersecting;\n};\n\nexport default useOnScreen;","import React, {useState, useRef, useEffect, useCallback} from 'react';\nimport {useSpring, animated} from 'react-spring';\n//COMPONENT IMPORTS\nimport FlashMessage from \"./FlashMessage\";\nimport LanguageSelect from \"./LanguageSelect\";\nimport LyricsTranslation from \"./LyricsTranslation\";\nimport Tracks from \"./Tracks\";\nimport SearchLanding from \"./SearchLanding\";\nimport ToTopArrow from \"./ToTopArrow\";\n//REDUX IMPORTS\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {resetLanguageError, resetTranslationError, resetLyricsError, resetSearchError} from \"./actionCreators/handleErrorsCreator\";\nimport {setResultsArray} from \"./actionCreators/setResultsArrayCreator\";\nimport {resetStore} from \"./actionCreators/resetStoreCreator\";\n//CUSTOM HOOK IMPORTS\nimport useOnScreen from \"./hooks/useOnScreen\";\n\nconst Search = () => {\n  //STATE FOR ANIMATIONS\n  const [bgColor, setBgColor] = useState(\"#1D4DBE\");\n  //REDUX STORE\n  const translationError = useSelector(store => store.errors.translationError);\n  const languageError = useSelector(store => store.errors.languageError);\n  const lyricsError = useSelector(store => store.errors.lyricsError);\n  const lyrics = useSelector(store => store.lyrics);\n  const searchResults = useSelector(store => store.results);\n  const searchError = useSelector(store => store.errors.searchError);\n  const selectedTrackId = useSelector(store => store.selectedTrack.trackId);\n  const translation = useSelector(store => store.translation);\n  const dispatch = useDispatch();\n  //STATE FOR FLASH MESSAGES\n  const [searchFlashMessage, setSearchFlashMessage] = useState(false);\n  const [noLyricsFlashMessage, setNoLyricsFlashMessage] = useState(false);\n  const [languageNotFoundFlashMessage, setLanguageNotFoundFlashMessage] = useState(false);\n  const [translationErrorFlashMessage, setTranslationErrorFlashMessage] = useState(false);\n  //REFS FOR PAGE TRAVERSAL\n  const searchResultsRef = useRef();\n  const selectLanguageRef = useRef();\n  const showLyricsTranslationRef = useRef();\n  const searchRef = useRef();\n\n////////////////////////////////////////////////////  ANIMATION FOR BACKGROUND COLOR  ////////////////////////////////////////////////////\n\n  const searchBarInView = useOnScreen(searchRef, {threshold: 0.7});\n  const searchResultsInView = useOnScreen(searchResultsRef, {threshold: 0.7});\n  const selectLanguageInView = useOnScreen(selectLanguageRef, {threshold: 0.7});\n  const LyricsTranslationInView = useOnScreen(showLyricsTranslationRef, {threshold: 0.2});\n\n  useEffect(() => {\n\n    const changeInView = (searchResultsInView, searchBarInView, selectLanguageInView, LyricsTranslationInView) => {\n\n      if (searchBarInView) {\n        setBgColor(\"#A800FF\");\n      } else if (searchResultsInView) {\n        setBgColor(\"#7F00FF\");\n      } else if (selectLanguageInView) {\n        setBgColor(\"#6000FF\");\n      } else if (LyricsTranslationInView) {\n        setBgColor(\"#4200FF\");\n      };\n    };\n  changeInView(searchResultsInView, searchBarInView, selectLanguageInView, LyricsTranslationInView);\n  }, [searchResultsInView, searchBarInView, selectLanguageInView, LyricsTranslationInView]);\n\n  const springProps = useSpring({\n    backgroundColor: bgColor,\n    config: {duration: 300}\n  });\n\n////////////////////////////////////////////////////  USE EFFECTS  ////////////////////////////////////////////////////\n\n  //FUNCTION TO BE CALLED IN BELOW USE-EFFECTS TO SCROLL TO NEXT DIV AFTER CLICK\n  const scrollToNextDiv = useCallback(async (state, ref) => {\n\n    if (state && state !== \"Could not read language value\") {\n      ref.current.scrollIntoView({behavior: \"smooth\"});\n    };\n  }, []);\n\n  //SCROLL DOWN TO SEARCH RESULTS DIV WHEN RESULTS ARE SET IN STATE\n  useEffect(() => {scrollToNextDiv(searchResults, searchResultsRef);}, [searchResults, searchResultsRef, scrollToNextDiv]);\n\n  //SCROLL DOWN TO LANGUAGE SEARCH BAR WHEN SELECTED TRACK HAS BE SET IN STATE\n  useEffect(() => {scrollToNextDiv(lyrics, selectLanguageRef);}, [lyrics, selectLanguageRef, scrollToNextDiv]);\n\n  //SCROLL DOWN TO LANGUAGE SEARCH BAR WHEN SELECTED TRACK HAS BE SET IN STATE\n  useEffect(() => {scrollToNextDiv(translation, showLyricsTranslationRef);}, [translation, showLyricsTranslationRef, scrollToNextDiv]);\n\n  //LISTENS FOR ANY CHANGES IN ERRORS IN STATE AND WILL TRIGGER FLASH MESSAGES ACCORDINGLY\n  useEffect(() => {\n\n    const displayFlashMessage = () => {\n\n        if (lyricsError) {\n          setNoLyricsFlashMessage(true);\n          dispatch(resetLyricsError());\n        };\n        if (languageError) {\n          setLanguageNotFoundFlashMessage(true);\n          dispatch(resetLanguageError());\n        };\n        if (translationError) {\n          setTranslationErrorFlashMessage(true);\n          dispatch(resetTranslationError());\n        };\n        if (searchError) {\n          setSearchFlashMessage(true);\n          dispatch(resetSearchError());\n        };\n    };\n    displayFlashMessage();\n  }, [translationError, lyricsError, searchError, languageError, dispatch]);\n\n////////////////////////////////////////////////////  HANDLE CLICK FUNCTIONS  ////////////////////////////////////////////////////\n\n  const handleTrackSearchSubmit = async (searchVal) => {\n    dispatch(setResultsArray(searchVal));\n    dispatch(resetStore(\"lyrics\", \"translation\", \"selectedTrack\"));\n  };\n\n////////////////////////////////////////////////////  JSX VARIABLES  ////////////////////////////////////////////////////\n\n  //DISPLAY SEARCH RESULTS FROM SPOTIFY API COMPONENT\n  const SearchBarDiv = (\n    <animated.div style={springProps} ref={searchRef}>\n      <SearchLanding handleTrackSearchSubmit={handleTrackSearchSubmit}/>\n    </animated.div>\n  );\n\n  //DISPLAY SEARCH RESULTS FROM SPOTIFY API COMPONENT\n  let SearchResultsDiv;\n  \n  if (searchResults) SearchResultsDiv = (\n    <animated.div style={springProps} ref={searchResultsRef}>\n      <Tracks results={searchResults} typeOfResults={\"search-results\"} itemsPerPage={1} animateIn={true}/>\n    </animated.div>\n  );\n\n  //DISPLAY LANGUAGE SELECTION SEARCH BAR\n  let LanguageSelectDiv;\n\n  if (lyrics) LanguageSelectDiv = (\n    <animated.div style={springProps} ref={selectLanguageRef}>\n      <LanguageSelect selectedTrackId={selectedTrackId} typeOfSearch=\"search-language\"/>\n    </animated.div>\n  );\n\n  //DISPLAY LYRICS AND TRANSLATION\n  let LyricsTranslationDiv;\n  \n  if (translation && translation !== \"Could not read language value\") LyricsTranslationDiv = (\n    <animated.div style={springProps}>\n      <div className=\"inViewPlaceholder\" ref={showLyricsTranslationRef}></div>\n      <ToTopArrow topRef={searchRef} topInView={searchBarInView}/>\n      <LyricsTranslation typeOfLyricsTranslation=\"search\"/>\n    </animated.div>\n  );\n\n////////////////////////////////////////////////////  RETURN  ////////////////////////////////////////////////////\n\n  return (\n    <>\n      <div className=\"Flash-Messages-Container\">\n        {searchFlashMessage && (<FlashMessage setState={setSearchFlashMessage} message=\"We couldn't find any songs with that Artist or Song name, please try again.\"/> )}\n        {noLyricsFlashMessage && (<FlashMessage setState={setNoLyricsFlashMessage} message=\"Unfortunately there are no Lyrics for that song yet.\"/> )}\n        {languageNotFoundFlashMessage && (<FlashMessage setState={setLanguageNotFoundFlashMessage} message=\"That Language was not found, please try again.\"/> )}\n        {translationErrorFlashMessage && (<FlashMessage setState={setTranslationErrorFlashMessage} message=\"Sorry, we couldn't get a translation at this moment.\"/> )}\n      </div>\n      {SearchBarDiv}\n      {SearchResultsDiv}\n      {LanguageSelectDiv}\n      {LyricsTranslationDiv}\n   </>\n  );\n};\n\nexport default Search;","import React from 'react';\nimport './sass/mysass.scss';\nimport {Spring} from 'react-spring/renderprops';\nimport {useHistory} from \"react-router-dom\";\n//REDUX IMPORTS\nimport {useDispatch} from \"react-redux\";\nimport {resetStore} from \"./actionCreators/resetStoreCreator\";\n//COMPONENT IMPORTS\nimport Hover from \"./Hover\";\n\nfunction Categories({needAnimation}) {\n  const history = useHistory();\n  const dispatch = useDispatch();\n\n////////////////////////////////////////////////////  CLICK EVENTS  ////////////////////////////////////////////////////\n\nconst handleCategoryClick = (category) => {\n\n  if (category === \"Artists\") {\n    dispatch(resetStore(\"lyrics\", \"translation\", \"searchResults\", \"tracks\", \"artists\", \"albums\"));\n    history.push(\"/browse/artists\");\n  } else if (category === \"Genre\") {\n    dispatch(resetStore(\"lyrics\", \"translation\", \"searchResults\", \"tracks\", \"artists\", \"albums\"));\n    history.push(\"/browse/genres\");\n  } else if (category === \"Danceability\") {\n    dispatch(resetStore(\"lyrics\", \"translation\", \"searchResults\", \"tracks\", \"artists\", \"albums\"));\n    history.push(\"/browse/danceability\");\n  };\n};\n\n////////////////////////////////////////////////////  JSX  ////////////////////////////////////////////////////\n\nlet CategoriesDiv;\n\nif (needAnimation) CategoriesDiv = (\n  <Spring\n    from={{opacity: 0}}\n    to={{opacity: 1}}\n    config={{delay: 300, duration: 300}}\n  >\n    {props => (\n      <div style={props}>\n\n          <div className=\"Browse-Landing\">\n            <Hover scale={1.15}>\n              <p className=\"Browse-Categories\" onClick={() => handleCategoryClick(\"Artists\")}>Artists</p>\n            </Hover>\n            <Hover scale={1.15}>\n              <p className=\"Browse-Categories\" onClick={() => handleCategoryClick(\"Genre\")}>Genre</p>\n            </Hover>\n            <Hover scale={1.15}>\n              <p className=\"Browse-Categories\" onClick={() => handleCategoryClick(\"Danceability\")}>Danceability</p>\n            </Hover>\n          </div>\n\n      </div>\n    )}\n  </Spring>\n);\n\nif (!needAnimation) CategoriesDiv = (\n  <div className=\"Browse-Landing\">\n    <Hover scale={1.15}>\n      <p className=\"Browse-Categories\" onClick={() => handleCategoryClick(\"Artists\")}>Artists</p>\n    </Hover>\n    <Hover scale={1.15}>\n      <p className=\"Browse-Categories\" onClick={() => handleCategoryClick(\"Genre\")}>Genre</p>\n    </Hover>\n    <Hover scale={1.15}>\n      <p className=\"Browse-Categories\" onClick={() => handleCategoryClick(\"Danceability\")}>Danceability</p>\n    </Hover>\n  </div>\n);\n\n////////////////////////////////////////////////////  RETURN  ////////////////////////////////////////////////////\n\n  return (\n    <>\n      {CategoriesDiv}\n    </>\n  );\n};\n\nexport default Categories;","import React from 'react';\nimport {useSpring, animated} from 'react-spring';\nimport './sass/mysass.scss';\nimport Categories from \"./BrowseCategories\";\n\nfunction Browse() {\n\n////////////////////////////////////////////////////  SPRING PROPS FOR BACKGROUND COLOR ANIMATION  ////////////////////////////////////////////////////\n\n  const springProps = useSpring({\n    backgroundColor: \"#4e1eff\",\n    config: {duration: 300}\n  });\n\n////////////////////////////////////////////////////  JSX VARIABLES  ////////////////////////////////////////////////////\n\n  //DISPLAY THE THREE CATEGORIES\n  let ChooseCategoryDiv = (\n    <animated.div style={springProps}>\n      <Categories needAnimation={true}/>\n    </animated.div>\n  );\n\n////////////////////////////////////////////////////  RETURN  ////////////////////////////////////////////////////\n\n  return (\n    <div>\n      {ChooseCategoryDiv}\n    </div>\n  );\n};\n\nexport default Browse;","import {GET_TRACKS, UPDATE_GENERAL_ERROR} from \"../../../actionTypes\";\nimport BackendCall from \"../../../BackendCall\";\n\n/**\n* Gets all tracks for the selected album that exist in our backend and\n* that contain at least one track that has lyrics. Updates tracks state.\n* @param {string} albumId - spotify id for the selected album\n*/\nexport function getTracks(albumId) {\n\n  return async function(dispatch) {\n    try {\n      let tracks = await BackendCall.getTracks({albumId});\n\n      for (let track of tracks) {\n        track[\"hasLyrics\"] = true;\n        track[\"inDatabase\"] = true;\n      };\n      dispatch(addTracks(tracks));\n    } catch(e) {\n      dispatch(updateGeneralError(true));\n    };\n  };\n};\n\nfunction addTracks(tracks) {\n  return {type: GET_TRACKS, tracks};\n};\n\nfunction updateGeneralError(generalError) {\n  return {type: UPDATE_GENERAL_ERROR, generalError};\n};","import {useState, useEffect} from \"react\";\n\n/**\n* Hook to constantly monitor viewport dimensions so that I can change make any\n* changes to state or react variables for responsive design.\n*/\nconst useViewport = () => {\n  const [viewportWidth, setViewportWidth] = useState(window.innerWidth);\n  const [viewportHeight, setViewportHeight] = useState(window.innerHeight);\n\n  useEffect(() => {\n\n    const handleWindowResize = () => {\n      setViewportWidth(window.innerWidth);\n      setViewportHeight(window.innerHeight);\n    };\n\n    window.addEventListener(\"resize\", handleWindowResize);\n    return () => window.removeEventListener(\"resize\", handleWindowResize);\n  }, []);\n\n  return {viewportWidth, viewportHeight};\n};\n\nexport default useViewport;","import React from 'react';\nimport {Spring} from 'react-spring/renderprops';\nimport './sass/mysass.scss';\n//COMPONENT IMPORTS.\nimport SearchResultList from \"./SearchResultList\";\n//REDUX IMPORTS\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {getTracks} from \"./actionCreators/BrowseRoute/Artists/getTracksCreator\";\nimport {resetStore} from \"./actionCreators/resetStoreCreator\";\n//CUSTOM HOOK IMPORTS\nimport useViewport from \"./hooks/useViewport\";\n\nfunction Albums({typeOfAlbums}) {\n  //REDUX STORE\n  const dispatch = useDispatch();\n  const albums = useSelector(store => store.albums);\n  //VIEWPORT SIZE BASED VARIABLES\n  const {viewportWidth} = useViewport();\n  let itemsPerPage;\n  let albumKey;\n\n  //VIEWPORT BREAKPOINTS TO DETERMINT HOW MANY ALBUM COVERS TO DISPLAY AT ONCE\n  if (viewportWidth < 1180 && viewportWidth > 780) {\n    itemsPerPage = 2;\n  } else if (viewportWidth < 780) {\n    itemsPerPage = 1;\n  } else {\n    itemsPerPage = 3;\n  };\n\n  //ALBUM KEY WHICH WOULD CHANGE IF ITEMS PER PAGE CHANGED TO RERENDER COMPONENT IF NUMBER OF ALUMBS DISPLAYING IS CHANGING\n  if (itemsPerPage < albums.length) {\n    albumKey = itemsPerPage;\n  } else {\n    albumKey = 0;\n  };\n\n////////////////////////////////////////////////////  HANDLE CLICK FUNCTIONS  ////////////////////////////////////////////////////\n\n  const handleAlbumClick = async (albumId) => {\n    dispatch(getTracks(albumId));\n    dispatch(resetStore(\"lyrics\", \"translation\"));\n  };\n\n////////////////////////////////////////////////////  RETURN  ////////////////////////////////////////////////////\n\n  return (\n    <Spring\n      from={{opacity: 0}}\n      to={{opacity: 1}}\n      config={{delay: 300, duration: 300}}\n    >\n      {props => (\n        <div style={props}>\n\n          <div className=\"Main-Container\">\n            <SearchResultList key={albums[albumKey].albumId} typeOfResults=\"albums\" resultsArray={albums} handleSearch={handleAlbumClick} itemsPerPage={itemsPerPage} typeOfAlbums={typeOfAlbums}/>\n          </div>\n\n        </div>\n      )}\n    </Spring>\n  );\n};\n\nexport default Albums;","import {GET_ALBUMS, UPDATE_GENERAL_ERROR} from \"../../../actionTypes\";\nimport BackendCall from \"../../../BackendCall\";\n\n/**\n* Makes a call to the backend to get all albums by a particular aritst\n* as long as they contain at least one track that has lyrics. Updates albums state.\n* @param {string} artistId - spotify id for selected artist\n*/\nexport function getAlbums(artistId) {\n\n  return async function(dispatch) {\n    try {\n      let albums = await BackendCall.getAlbums({artistId});\n      dispatch(addAlbums(albums));\n    } catch(e) {\n      dispatch(updateGeneralError(true));\n    };\n  };\n};\n\nfunction addAlbums(albums) {\n  return {type: GET_ALBUMS, albums};\n};\n\nfunction updateGeneralError(generalError) {\n  return {type: UPDATE_GENERAL_ERROR, generalError};\n};","import {GET_ALL_ARTISTS, UPDATE_GENERAL_ERROR} from \"../../../actionTypes\";\nimport BackendCall from \"../../../BackendCall\";\n\n/**\n* Makes a call to the backend to get an array of all artists and their spotify ids\n* that have at least one track that contains lyrics and updates allArtist state.\n* This will be displayed in the BrowseByArtists component.\n*/\nexport function getAllArtists() {\n\n  return async function(dispatch) {\n    try {\n      const artists = await BackendCall.getArtistsAndArtistIds();\n      dispatch(addArtists(artists));\n    } catch(e) {\n      dispatch(updateGeneralError(true));\n    };\n  };\n};\n\nfunction addArtists(artists) {\n  return {type: GET_ALL_ARTISTS, artists};\n};\n\nfunction updateGeneralError(generalError) {\n  return {type: UPDATE_GENERAL_ERROR, generalError};\n};","import React, {useState, useRef, useEffect, useCallback} from 'react';\nimport {useSpring, animated} from 'react-spring';\nimport './sass/mysass.scss';\n//COMPONENT IMPORTS\nimport SearchResultList from \"./SearchResultList\";\nimport LyricsTranslation from \"./LyricsTranslation\";\nimport Tracks from \"./Tracks\";\nimport LanguageSelect from \"./LanguageSelect\";\nimport Albums from \"./Albums\";\nimport Categories from \"./BrowseCategories\";\nimport FlashMessage from \"./FlashMessage\";\nimport ToTopArrow from \"./ToTopArrow\";\n//REDUX IMPORTS\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {getAlbums} from \"./actionCreators/BrowseRoute/Artists/getAlbumsCreator\";\nimport {resetStore} from \"./actionCreators/resetStoreCreator\";\nimport {getAllArtists} from \"./actionCreators/BrowseRoute/Artists/getAllArtistsCreator\";\nimport {resetLanguageError, resetTranslationError, resetLyricsError, resetGeneralError} from \"./actionCreators/handleErrorsCreator\";\n//CUSTOM HOOK IMPORTS\nimport useOnScreen from \"./hooks/useOnScreen\";\n//IONICONS IMPORTS\nimport IosMusicalNotes from 'react-ionicons/lib/IosMusicalNotes';\n\nfunction BrowseByArtists() {\n  //REACT STATE\n  const [bgColor, setBgColor] = useState(\"#4e1eff\");\n  const [isLoading, setIsLoading] = useState(false);\n  const [selectedArtistId, setSelectedArtistId] = useState(\"\");\n  //STATE FOR FLASH MESSAGES\n  const [noLyricsFlashMessage, setNoLyricsFlashMessage] = useState(false);\n  const [languageNotFoundFlashMessage, setLanguageNotFoundFlashMessage] = useState(false);\n  const [translationErrorFlashMessage, setTranslationErrorFlashMessage] = useState(false);\n  const [generalErrorFlashMessage, setGeneralErrorFlashMessage] = useState(false);\n  //REDUX STORE\n  const dispatch = useDispatch();\n  const lyrics = useSelector(store => store.lyrics);\n  const artists = useSelector(store => store.allArtists);\n  const albums = useSelector(store => store.albums);\n  const tracks = useSelector(store => store.tracks);\n  const selectedTrackId = useSelector(store => store.selectedTrack.trackId);\n  const translation = useSelector(store => store.translation);\n  const translationError = useSelector(store => store.errors.translationError);\n  const languageError = useSelector(store => store.errors.languageError);\n  const lyricsError = useSelector(store => store.errors.lyricsError);\n  const generalError = useSelector(store => store.errors.generalError);\n  //REFS FOR PAGE TRAVERSAL\n  const categoryRef = useRef();\n  const albumResultsRef = useRef();\n  const selectLanguageRef = useRef();\n  const trackResultsRef = useRef();\n  const showLyricsTranslationRef = useRef();\n  const artistsResultsRef = useRef();\n\n////////////////////////////////////////////////////  USE EFFECTS  ////////////////////////////////////////////////////\n\n  //WATCHES FOR EITHER AN ERROR OR THE LYRICS TO COME THROUGH TO REMOVE LOADING ICON\n  useEffect(() => {\n\n    const updateIsLoading = () => {\n\n      if (albums || generalError) setIsLoading(false);\n    };\n    updateIsLoading();\n  }, [albums, generalError]);\n\n  //LISTENS FOR ANY CHANGES IN ERRORS IN STATE AND WILL TRIGGER FLASH MESSAGES ACCORDINGLY\n  useEffect(() => {\n\n    const displayFlashMessage = () => {\n\n        if (lyricsError) {\n          setNoLyricsFlashMessage(true);\n          dispatch(resetLyricsError());\n        };\n        if (languageError) {\n          setLanguageNotFoundFlashMessage(true);\n          dispatch(resetLanguageError());\n        };\n        if (translationError) {\n          setTranslationErrorFlashMessage(true);\n          dispatch(resetTranslationError());\n        };\n        if (generalError) {\n          setGeneralErrorFlashMessage(true);\n          dispatch(resetGeneralError());\n        };\n    };\n    displayFlashMessage();\n  }, [languageError, translationError, lyricsError, generalError, dispatch]);\n\n  //GET ALL ARTISTS IN DB AND STORE THEM FOR THE BROWSE BY ARTISTS COMPONENT\n  useEffect(() => {\n\n    async function getSeedData() {\n      dispatch(getAllArtists());\n    };\n    getSeedData();\n  }, [dispatch]);\n\n  //SKIP OVER THE CATEGORIES SINCE THE USER NEEDED TO SEE THAT IN ORDER TO GET TO THIS COMPONENT\n  useEffect(() => {\n\n    const scrollPastCategories = () => {\n      artistsResultsRef.current.scrollIntoView({behavior: \"smooth\"});\n    };\n    scrollPastCategories();\n  }, []);\n\n  //FUNCTION TO BE CALLED IN BELOW USE-EFFECTS TO SCROLL TO NEXT DIV AFTER CLICK\n  const scrollToNextDiv = useCallback(async (state, ref) => {\n\n    if (state && state !== \"Could not read language value\") {\n      ref.current.scrollIntoView({behavior: \"smooth\"});\n    };\n  }, []);\n\n  //SCROLL DOWN TO ALBUMS DIV WHEN ALBUMS ARE SET IN STATE\n  useEffect(() => {scrollToNextDiv(albums, albumResultsRef);}, [albums, albumResultsRef, scrollToNextDiv]);\n\n  //SCROLL DOWN TO TRACKS DIV WHEN TRACKS HAS BEEN SELECTED AND SET IN STATE\n  useEffect(() => {scrollToNextDiv(tracks, trackResultsRef);}, [tracks, trackResultsRef, scrollToNextDiv]);\n\n  //SCROLL DOWN TO LANGUAGE SEARCH BAR WHEN SELECTED TRACK HAS BE SET IN STATE\n  useEffect(() => {scrollToNextDiv(lyrics, selectLanguageRef);}, [lyrics, selectLanguageRef, scrollToNextDiv]);\n\n  //SCROLL DOWN TO SHOW LYRICS AND TRANSLATION WHEN TRANSLATION HAS BE SET IN STATE\n  useEffect(() => {scrollToNextDiv(translation, showLyricsTranslationRef);}, [translation, showLyricsTranslationRef, scrollToNextDiv]);\n\n////////////////////////////////////////////////////  ANIMATION FOR BACKGROUND COLOR  ////////////////////////////////////////////////////\n\n  const categoriesInView = useOnScreen(categoryRef, {threshold: 0.7});\n  const artistsInView = useOnScreen(artistsResultsRef, {threshold: 0.7});\n  const albumsInView = useOnScreen(albumResultsRef, {threshold: 0.7});\n  const selectLanguageInView = useOnScreen(selectLanguageRef, {threshold: 0.7});\n  const trackResultsInView = useOnScreen(trackResultsRef, {threshold: 0.7});\n  const lyricsTranslationInView = useOnScreen(showLyricsTranslationRef, {threshold: 0.7});\n\n  useEffect(() => {\n    const changeInView = (selectLanguageInView, albumsInView, trackResultsInView, lyricsTranslationInView, artistsInView, categoriesInView) => {\n\n      if (categoriesInView) {\n        setBgColor(\"#4e1eff\");\n      } else if (artistsInView) {\n        setBgColor(\"#7745f8\");\n      } else if (albumsInView) {\n        setBgColor(\"#9d69f1\");\n      } else if (trackResultsInView) {\n        setBgColor(\"#bd86eb\");\n      } else if (selectLanguageInView) {\n        setBgColor(\"#dba3e6\");\n      } else if (lyricsTranslationInView) {\n        setBgColor(\"#fdc3df\");\n      };\n    };\n  changeInView(selectLanguageInView, albumsInView, trackResultsInView, lyricsTranslationInView, artistsInView, categoriesInView);\n  }, [selectLanguageInView, albumsInView, trackResultsInView, lyricsTranslationInView, artistsInView, categoriesInView]);\n\n  const springProps = useSpring({\n    backgroundColor: bgColor,\n    config: {duration: 300}\n  });\n\n////////////////////////////////////////////////////  HANDLE CLICK FUNCTIONS  ////////////////////////////////////////////////////\n\n  const handleArtistClick = async (artistId) => {\n\n    if (artistId !== selectedArtistId) {\n      setIsLoading(true);\n      setSelectedArtistId(artistId)\n    };\n    dispatch(getAlbums(artistId));\n    dispatch(resetStore(\"tracks\", \"lyrics\", \"translation\"));\n  };\n\n  const scrollToArtists = () => {\n    artistsResultsRef.current.scrollIntoView({behavior: \"smooth\"});\n  };\n\n////////////////////////////////////////////////////  JSX VARIABLES  ////////////////////////////////////////////////////\n\n  //DISPLAY LOADING ICON\n  let LoadingIconDiv;\n\n  if (isLoading) LoadingIconDiv = (\n    <div className=\"Loading-Box\">\n      <IosMusicalNotes rotate={true} fontSize=\"200px\" color=\"#fff\"/>\n    </div>\n  );\n\n  if (!isLoading) LoadingIconDiv = (\n    <div className=\"Loading-Box\"></div>\n  );\n\n  //DISPLAY THE THREE CATEGORIES\n  const ChooseCategoryDiv = (\n    <animated.div onClick={scrollToArtists} style={springProps} ref={categoryRef}>\n      <Categories needAnimation={false}/>\n    </animated.div>\n  );\n\n  //DISPLAY ALBUMS FROM SELECTED ARTIST\n  let ArtistsResultsDiv;\n  \n  if (artists) ArtistsResultsDiv = (\n    <animated.div style={springProps}  ref={artistsResultsRef}>\n      <div className=\"Main-Container\">\n        <SearchResultList key={artists[0].artistId} typeOfResults=\"artists\" resultsArray={artists} handleSearch={handleArtistClick} itemsPerPage={1} loadingIcon={LoadingIconDiv} typeOfArtists=\"artists\"/>\n      </div>\n    </animated.div>\n  );\n\n  if (!artists) ArtistsResultsDiv = (\n    <animated.div style={springProps}  ref={artistsResultsRef}>\n      <div className=\"Main-Container\">\n        <div className=\"Loading-Box\">\n          <IosMusicalNotes fontSize=\"300px\" color=\"orange\" />\n        </div>\n      </div>\n    </animated.div>\n  );\n\n  //DISPLAY ALBUMS FROM SELECTED ARTIST\n  let AlbumResultsDiv;\n  \n  if (albums) AlbumResultsDiv = (\n    <animated.div style={springProps} ref={albumResultsRef}>\n      <Albums typeOfAlbums=\"artists\"/>\n    </animated.div>\n  );\n\n  //DISPLAY TRACKS FROM SELECTED ALBUM\n  let TrackResultsDiv;\n\n  if (tracks) {\n\n    if (tracks.length) TrackResultsDiv = (\n      <animated.div style={springProps} ref={trackResultsRef}>\n        <Tracks results={tracks} typeOfResults={\"tracks\"} itemsPerPage={1} animateIn={true} typeOfTracks=\"artists\"/>\n      </animated.div>\n    );\n\n    if (!tracks.length) TrackResultsDiv = (\n      <animated.div style={springProps} ref={trackResultsRef}>\n      </animated.div>\n    );\n  };\n\n  //DISPLAY LANGUAGE SELECTION SEARCH BAR\n  let LanguageSelectDiv;\n\n  if (lyrics) LanguageSelectDiv = (\n    <animated.div style={springProps} ref={selectLanguageRef}>\n      <LanguageSelect selectedTrackId={selectedTrackId} typeOfSearch=\"artists-language\"/>\n    </animated.div>\n  );\n\n  //DISPLAY LYRICS AND TRANSLATION\n  let LyricsTranslationDiv;\n  \n  if (translation && translation !== \"Could not read language value\")  LyricsTranslationDiv = (\n    <animated.div style={springProps}>\n      <div className=\"inViewPlaceholder\" ref={showLyricsTranslationRef}></div>\n      <ToTopArrow topRef={categoryRef} topInView={categoriesInView}/>\n      <LyricsTranslation typeOfLyricsTranslation=\"artists\"/>\n    </animated.div>\n  );\n\n////////////////////////////////////////////////////  RETURN  ////////////////////////////////////////////////////\n\n  return (\n    <>\n      <div className=\"Flash-Messages-Container\">\n        {noLyricsFlashMessage && (<FlashMessage setState={setNoLyricsFlashMessage} message=\"Unfortunately there are no Lyrics for that song yet.\"/> )}\n        {languageNotFoundFlashMessage && (<FlashMessage setState={setLanguageNotFoundFlashMessage} message=\"That Language was not found, please try again.\"/> )}\n        {translationErrorFlashMessage && (<FlashMessage setState={setTranslationErrorFlashMessage} message=\"Sorry, we couldn't get a translation at this moment.\"/> )}\n        {generalErrorFlashMessage && (<FlashMessage setState={setGeneralErrorFlashMessage} message=\"Uh oh, something went wrong. Please try again.\"/> )}\n      </div>\n      {ChooseCategoryDiv}\n      {ArtistsResultsDiv}\n      {AlbumResultsDiv}\n      {TrackResultsDiv}\n      {LanguageSelectDiv}\n      {LyricsTranslationDiv}\n    </>\n  );\n};\n\nexport default BrowseByArtists;","import React from 'react';\nimport {Spring} from 'react-spring/renderprops';\nimport './sass/mysass.scss';\n//COMPONENT IMPORTS\nimport SearchResultList from \"./SearchResultList\";\n//REDUX IMPORTS\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {getAlbums} from \"./actionCreators/BrowseRoute/Artists/getAlbumsCreator\";\nimport {resetStore} from \"./actionCreators/resetStoreCreator\";\n\nfunction Artists({typeOfArtists}) {\n  //REDUX STORE\n  const dispatch = useDispatch();\n  const artists = useSelector(store => store.artists);\n\n////////////////////////////////////////////////////  HANDLE CLICK FUNCTIONS  ////////////////////////////////////////////////////\n\n  const handleArtistClick = async (artistId) => {\n    dispatch(getAlbums(artistId));\n    dispatch(resetStore(\"tracks\", \"lyrics\", \"translation\"));\n  }\n\n////////////////////////////////////////////////////  RETURN  ////////////////////////////////////////////////////\n\n  return (\n    <Spring\n      from={{opacity: 0}}\n      to={{opacity: 1}}\n      config={{delay: 300, duration: 300}}\n    >\n      {props => (\n        <div style={props}>\n\n          <div className=\"Main-Container\">\n              <SearchResultList key={artists[0].artistId} typeOfResults=\"artists\" resultsArray={artists} handleSearch={handleArtistClick} itemsPerPage={1} typeOfArtists={typeOfArtists}/>\n          </div>\n\n        </div>\n      )}\n    </Spring>\n  );\n};\n\nexport default Artists;","import {GET_ARTISTS, UPDATE_GENERAL_ERROR} from \"../../../actionTypes\";\nimport BackendCall from \"../../../BackendCall\";\n\n/**\n* Makes a call to the backend to select all artists that have at least\n* this genre within their list of genres given by spotify.\n* @param {string} genre - selected genre from browse by genre route\n*/\nexport function getArtists(genre) {\n\n  return async function(dispatch) {\n    try {\n      const artists = await BackendCall.getArtistByGenre(genre);\n      dispatch(addArtists(artists));\n    } catch(e) {\n      dispatch(updateGeneralError(true));\n    };\n  };\n};\n\nfunction addArtists(artists) {\n  return {type: GET_ARTISTS, artists};\n};\n\nfunction updateGeneralError(generalError) {\n  return {type: UPDATE_GENERAL_ERROR, generalError};\n};","import {GET_GENRES, UPDATE_GENERAL_ERROR} from \"../../../actionTypes\";\nimport BackendCall from \"../../../BackendCall\";\n\n/**\n* Gets the array of genres compiled from all artists who have at least\n* one song in the database.\n*/\nexport function getGenres() {\n\n  return async function(dispatch) {\n    try {\n      const response = await BackendCall.getGenres();\n      const genreArray = response[0].genres.split(\",\");\n      const sortedGenres = [];\n\n      for (let i = 0; i < genreArray.length; i++) {\n        sortedGenres.push(genreArray[i].trim().toUpperCase());\n      };\n      const genres = [...new Set(sortedGenres.sort())];\n      dispatch(addGenres(genres));\n    } catch(e) {\n      dispatch(updateGeneralError(true));\n    };\n  };\n};\n\nfunction addGenres(genres) {\n  return {type: GET_GENRES, genres};\n};\n\nfunction updateGeneralError(generalError) {\n  return {type: UPDATE_GENERAL_ERROR, generalError};\n};","import React, {useEffect} from 'react';\nimport { Spring } from 'react-spring/renderprops';\nimport './sass/mysass.scss';\n//COMPONENT IMPORTS\nimport SearchResultList from \"./SearchResultList\";\n//REDUX IMPORTS\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {getArtists} from \"./actionCreators/BrowseRoute/Genre/getArtistsCreator\";\nimport {resetStore} from \"./actionCreators/resetStoreCreator\";\nimport {getGenres} from \"./actionCreators/BrowseRoute/Genre/getGenresCreator\";\n\nfunction Genres({fontColor1, fontColor2}) {\n  const dispatch = useDispatch();\n  const genres = useSelector(store => store.genres);\n\n////////////////////////////////////////////////////  USE EFFECTS  ////////////////////////////////////////////////////\n\n  //GET ALL GENRES IN DB AND STORE THEM FOR THE BROWSE BY GENRE COMPONENT\n  useEffect(() => {\n\n    async function getSeedData() {\n      dispatch(getGenres());\n    }\n    getSeedData();\n  }, [dispatch]);\n\n////////////////////////////////////////////////////  HANDLE CLICK FUNCTIONS  ////////////////////////////////////////////////////\n\n  const handleGenreClick = async (genre) => {\n    dispatch(getArtists({genre}));\n    dispatch(resetStore(\"albums\", \"tracks\", \"lyrics\", \"translation\"));\n  };\n\n////////////////////////////////////////////////////  JSX  ////////////////////////////////////////////////////\n\n  //DISPLAY GENRES\n  let GenresDiv;\n  \n  if (genres) GenresDiv = (\n    <div className=\"Main-Container\">\n      <SearchResultList key={genres.length} typeOfResults=\"genres\" resultsArray={genres} handleSearch={handleGenreClick} itemsPerPage={1} fontColor1={fontColor1} fontColor2={fontColor2}/>\n    </div>  \n  );\n\n  if (!genres) GenresDiv = (\n    <p>Loading</p>\n  );\n\n////////////////////////////////////////////////////  RETURN  ////////////////////////////////////////////////////\n\n  return (\n    <Spring\n      from={{opacity: 0}}\n      to={{opacity: 1}}\n      config={{delay: 300, duration: 300}}\n    >\n      {props => (\n        <div style={props}>\n          \n          {GenresDiv}\n\n        </div>\n      )}\n  </Spring>\n  );\n};\n\nexport default Genres;","import React,  {useState, useRef, useEffect, useCallback} from 'react';\nimport {useSpring, animated} from 'react-spring';\nimport './sass/mysass.scss';\n//COMPONENT IMPORTS\nimport LyricsTranslation from \"./LyricsTranslation\";\nimport Tracks from \"./Tracks\";\nimport LanguageSelect from \"./LanguageSelect\";\nimport Artists from \"./Artists\";\nimport Albums from \"./Albums\";\nimport Genres from \"./Genres\";\nimport Categories from \"./BrowseCategories\";\nimport FlashMessage from \"./FlashMessage\";\nimport ToTopArrow from \"./ToTopArrow\";\n//REDUX IMPORTS\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {getGenres} from \"./actionCreators/BrowseRoute/Genre/getGenresCreator\";\nimport {resetLanguageError, resetTranslationError, resetLyricsError, resetGeneralError} from \"./actionCreators/handleErrorsCreator\";\n//CUSTOM HOOK IMPORTS\nimport useOnScreen from \"./hooks/useOnScreen\";\n//IONICONS IMPORTS\nimport IosMusicalNotes from 'react-ionicons/lib/IosMusicalNotes';\n\nfunction BrowseByGenre() {\n  //STATE FOR ANIMATIONS\n  const [bgColor, setBgColor] = useState(\"#4e1eff\");\n  //REDUX STORE\n  const dispatch = useDispatch();\n  const genres = useSelector(store => store.genres);\n  const lyrics = useSelector(store => store.lyrics);\n  const artists = useSelector(store => store.artists);\n  const albums = useSelector(store => store.albums);\n  const tracks = useSelector(store => store.tracks);\n  const selectedTrackId = useSelector(store => store.selectedTrack.trackId);\n  const translation = useSelector(store => store.translation);\n  const translationError = useSelector(store => store.errors.translationError);\n  const languageError = useSelector(store => store.errors.languageError);\n  const lyricsError = useSelector(store => store.errors.lyricsError);\n  const generalError = useSelector(store => store.errors.generalError);\n  //REFS FOR PAGE TRAVERSAL\n  const categoryRef = useRef();\n  const selectGenresRef = useRef();\n  const artistsResultsRef = useRef();\n  const albumResultsRef = useRef();\n  const selectLanguageRef = useRef();\n  const trackResultsRef = useRef();\n  const showLyricsTranslationRef = useRef();\n  //STATE FOR FLASH MESSAGES\n  const [noLyricsFlashMessage, setNoLyricsFlashMessage] = useState(false);\n  const [languageNotFoundFlashMessage, setLanguageNotFoundFlashMessage] = useState(false);\n  const [translationErrorFlashMessage, setTranslationErrorFlashMessage] = useState(false);\n  const [generalErrorFlashMessage, setGeneralErrorFlashMessage] = useState(false);\n\n////////////////////////////////////////////////////  USE EFFECTS  ////////////////////////////////////////////////////\n\n  //LISTENS FOR ANY CHANGES IN ERRORS IN STATE AND WILL TRIGGER FLASH MESSAGES ACCORDINGLY\n  useEffect(() => {\n\n    const displayFlashMessage = () => {\n\n        if (lyricsError) {\n          setNoLyricsFlashMessage(true);\n          dispatch(resetLyricsError());\n        };\n        if (languageError) {\n          setLanguageNotFoundFlashMessage(true);\n          dispatch(resetLanguageError());\n        };\n        if (translationError) {\n          setTranslationErrorFlashMessage(true);\n          dispatch(resetTranslationError());\n        };\n        if (generalError) {\n          setGeneralErrorFlashMessage(true);\n          dispatch(resetGeneralError());\n        };\n    };\n    displayFlashMessage();\n  }, [languageError, translationError, lyricsError, generalError, dispatch]);\n\n  //GET ALL GENRES IN DB AND STORE THEM FOR THE BROWSE BY GENRE COMPONENT\n  useEffect(() => {\n\n    async function getSeedData() {\n      dispatch(getGenres());\n    };\n    getSeedData();\n  }, [dispatch]);\n\n\n  //SKIP OVER THE CATEGORIES SINCE THE USER NEEDED TO SEE THAT IN ORDER TO GET TO THIS COMPONENT\n  useEffect(() => {\n\n    const scrollPastCategories = () => {\n      selectGenresRef.current.scrollIntoView({behavior: \"smooth\"});\n    };\n    scrollPastCategories();\n  }, []);\n\n  //FUNCTION TO BE CALLED IN BELOW USE-EFFECTS TO SCROLL TO NEXT DIV AFTER CLICK\n  const scrollToNextDiv = useCallback(async (state, ref) => {\n\n    if (state && state !== \"Could not read language value\") {\n      ref.current.scrollIntoView({behavior: \"smooth\"});\n    };\n  }, []);\n\n  //SCROLL DOWN TO SHOW ARTISTS WHEN GENRE HAS BEEN SELECTED AND CORRESPONDING ARTISTS SET IN STATE\n  useEffect(() => {scrollToNextDiv(artists, artistsResultsRef);}, [artists, artistsResultsRef, scrollToNextDiv]);\n\n  //SCROLL DOWN TO ALBUMS RESULTS DIV WHEN ALBUMS ARE SET IN STATE\n  useEffect(() => {scrollToNextDiv(albums, albumResultsRef);}, [albums, albumResultsRef, scrollToNextDiv]);\n\n  //SCROLL DOWN TO TRACKS DIV WHEN TRACKS HAS BEEN SELECTED AND SET IN STATE\n  useEffect(() => {scrollToNextDiv(tracks, trackResultsRef);}, [tracks, trackResultsRef, scrollToNextDiv]);\n\n  //SCROLL DOWN TO LANGUAGE SEARCH BAR WHEN SELECTED TRACK HAS BE SET IN STATE\n  useEffect(() => {scrollToNextDiv(lyrics, selectLanguageRef);}, [lyrics, selectLanguageRef, scrollToNextDiv]);\n\n  //SCROLL DOWN TO SHOW LYRICS AND TRANSLATION WHEN TRANSLATION HAS BE SET IN STATE\n  useEffect(() => {scrollToNextDiv(translation, showLyricsTranslationRef);}, [translation, showLyricsTranslationRef, scrollToNextDiv]);\n\n////////////////////////////////////////////////////  ANIMATION FOR BACKGROUND COLOR  ////////////////////////////////////////////////////\n\n  const categoriesInView = useOnScreen(categoryRef, {threshold: 0.7});\n  const genresInView = useOnScreen(selectGenresRef, {threshold: 0.7});\n  const artistsInView = useOnScreen(artistsResultsRef, {threshold: 0.7});\n  const albumsInView = useOnScreen(albumResultsRef, {threshold: 0.7});\n  const selectLanguageInView = useOnScreen(selectLanguageRef, {threshold: 0.7});\n  const trackResultsInView = useOnScreen(trackResultsRef, {threshold: 0.7});\n  const lyricsTranslationInvView = useOnScreen(showLyricsTranslationRef, {threshold: 0.7});\n\n  useEffect(() => {\n    const changeInView = (selectLanguageInView, albumsInView, trackResultsInView, lyricsTranslationInvView, artistsInView, categoriesInView, genresInView) => {\n\n      if (categoriesInView) {\n        setBgColor(\"#4e1eff\");\n      } else if (genresInView) {\n        setBgColor(\"#6e3eee\");\n      } else if (artistsInView) {\n        setBgColor(\"#9161db\");\n      } else if (albumsInView) {\n        setBgColor(\"#aa79ce\");\n      } else if (trackResultsInView) {\n        setBgColor(\"#c594bf\");\n      } else if (selectLanguageInView) {\n        setBgColor(\"#e3b2af\");\n      } else if (lyricsTranslationInvView) {\n        setBgColor(\"#fecda1\");\n      };\n    };\n  changeInView(selectLanguageInView, albumsInView, trackResultsInView, lyricsTranslationInvView, artistsInView, categoriesInView, genresInView);\n  }, [selectLanguageInView, albumsInView, trackResultsInView, lyricsTranslationInvView, artistsInView, categoriesInView, genresInView]);\n\n  const springProps = useSpring({\n    backgroundColor: bgColor,\n    config: {duration: 300}\n  });\n\n////////////////////////////////////////////////////  CLICK EVENTS  ////////////////////////////////////////////////////\n\n  const scrollToGenres = () => {\n    selectGenresRef.current.scrollIntoView({behavior: \"smooth\"});\n  };\n\n////////////////////////////////////////////////////  JSX VARIABLES  ////////////////////////////////////////////////////\n\n  //DISPLAY THE THREE CATEGORIES\n  const ChooseCategoryDiv = (\n    <animated.div onClick={scrollToGenres} style={springProps} ref={categoryRef}>\n      <Categories needAnimation={false}/>\n    </animated.div>\n  );\n\n  //DISPLAY GENRES\n  let selectGenresDiv;\n  \n  if (genres) selectGenresDiv = (\n     <animated.div style={springProps} ref={selectGenresRef}>\n       <Genres />\n     </animated.div>\n  );\n\n  //DISPLAY MUSIC ICON IF THERE IS AN ERROR LOADING GENRES\n  if (!genres) selectGenresDiv = (\n    <animated.div style={springProps} ref={selectGenresRef}>\n      <div className=\"Main-Container\">\n        <div className=\"Loading-Box\">\n          <IosMusicalNotes fontSize=\"300px\" color=\"orange\"/>\n        </div>\n      </div>\n    </animated.div>\n  );\n\n  //DISPLAY ARTISTS FROM SELECTED GENRE\n  let ArtistsResultsDiv;\n  \n  if (artists) ArtistsResultsDiv = (\n    <animated.div style={springProps} ref={artistsResultsRef}>\n      <Artists typeOfArtists=\"genre\"/>\n    </animated.div>\n  );\n\n  //DISPLAY ALBUMS FROM SELECTED ARTIST\n  let AlbumResultsDiv;\n  \n  if (albums) AlbumResultsDiv = (\n    <animated.div style={springProps} ref={albumResultsRef}>\n      <Albums typeOfAlbums=\"genre\"/>\n    </animated.div>\n  );\n\n  //DISPLAY TRACKS FROM SELECTED ALBUM\n  let TrackResultsDiv;\n\n\n\n    if (tracks) TrackResultsDiv = (\n        <animated.div style={springProps} ref={trackResultsRef}>\n          <Tracks results={tracks} typeOfResults={\"tracks\"} itemsPerPage={1} animateIn={true} typeOfTracks=\"genre\"/>\n        </animated.div>\n      );\n\n      if (!tracks) TrackResultsDiv = (\n        <animated.div style={springProps} ref={trackResultsRef}>\n        </animated.div>\n      );\n\n \n  //DISPLAY LANGUAGE SELECTION SEARCH BAR\n  let LanguageSelectDiv;\n\n  if (lyrics) LanguageSelectDiv = (\n    <animated.div style={springProps} ref={selectLanguageRef}>\n      <LanguageSelect selectedTrackId={selectedTrackId} typeOfSearch=\"genre-language\"/>\n    </animated.div>\n  );\n\n  //DISPLAY LYRICS AND TRANSLATION\n  let LyricsTranslationDiv;\n  \n  if (translation && translation !== \"Could not read language value\") LyricsTranslationDiv = (\n    <animated.div style={springProps}>\n      <div className=\"inViewPlaceholder\" ref={showLyricsTranslationRef}></div>\n      <ToTopArrow topRef={categoryRef} topInView={categoriesInView}/>\n      <LyricsTranslation  typeOfLyricsTranslation=\"genre\"/>\n    </animated.div>\n  );\n\n////////////////////////////////////////////////////  RETURN  ////////////////////////////////////////////////////\n\n  return (\n    <>\n      <div className=\"Flash-Messages-Container\">\n        {noLyricsFlashMessage && (<FlashMessage setState={setNoLyricsFlashMessage} message=\"Unfortunately there are no Lyrics for that song yet.\"/> )}\n        {languageNotFoundFlashMessage && (<FlashMessage setState={setLanguageNotFoundFlashMessage} message=\"That Language was not found, please try again.\"/> )}\n        {translationErrorFlashMessage && (<FlashMessage setState={setTranslationErrorFlashMessage} message=\"Sorry, we couldn't get a translation at this moment.\"/> )}\n        {generalErrorFlashMessage && (<FlashMessage setState={setGeneralErrorFlashMessage} message=\"Uh oh, something went wrong. Please try again.\"/> )}\n      </div>\n      {ChooseCategoryDiv}\n      {selectGenresDiv}\n      {ArtistsResultsDiv}\n      {AlbumResultsDiv}\n      {TrackResultsDiv}\n      {LanguageSelectDiv}\n      {LyricsTranslationDiv}\n    </>\n  );\n};\n\nexport default BrowseByGenre;","import React, {useState} from 'react';\nimport {withStyles} from '@material-ui/core/styles';\nimport Slider from '@material-ui/core/Slider';\n\n//CUSTOM STYLE FOR THE MUI SLIDER\nconst MyDanceabilitySlider = withStyles({\n    root: {\n    color: \"#fff\",\n    height: 8\n  },\n  thumb: {\n    height: 24,\n    width: 24,\n    backgroundColor: \"#fff\",\n    border: \"2px solid currentColor\",\n    marginTop: -10,\n    marginLeft: -12,\n    \"&:focus,&:hover,&$active\": {\n      boxShadow: \"inherit\"\n    }\n  },\n  active: {},\n  valueLabel: {\n    left: \"calc(-50% + 14px)\",\n    top: -22,\n    \"& *\": {\n      backgroundColor: \"transparent\",\n      color: \"#885511\"\n    }\n  },\n  track: {\n    color: \"#062bff\",\n    height: 8,\n    borderRadius: 4\n  },\n  rail: {\n    height: 4,\n    borderRadius: 4,\n    opacity: 0.5,\n    backgroundColor: \"#bfbfbf\"\n  }\n})(Slider);\n\nconst DanceabilitySlider = ({handleSliderMouseMove}) => {\n  const [sliderVal, setSliderVal] = useState(0);\n\n////////////////////////////////////////////////////  HANDLE CHANGE FUNCTION  ////////////////////////////////////////////////////\n\n  const handleChange = (event, newValue) => {\n    setSliderVal(newValue);\n    handleSliderMouseMove(newValue);\n  };\n\n////////////////////////////////////////////////////  RETURN  ////////////////////////////////////////////////////\n\n  return (\n    <div className=\"Danceability-Slider-Container-v2\">\n   <MyDanceabilitySlider className=\"Danceability-Slider-Item-v2\" color=\"\" value={sliderVal} max={1} min={0} step={0.01} onChange={handleChange} aria-labelledby=\"continuous-slider\" valueLabelDisplay=\"off\" scale={(x) => x * 100}/>\n  </div>\n  );\n};\n\nexport default DanceabilitySlider;","import {GET_TRACKS, UPDATE_GENERAL_ERROR} from \"../../../actionTypes\";\nimport BackendCall from \"../../../BackendCall\";\n\n\n/**\n* Makes a call to the backend and queries for all tracks with a given \n* danceability score that falls in the range passed in as the arguments. Adds\n* that array to tracks state.\n* @param {float} lowerLimit - lowerLimit of range for danceability score\n* @param {float} upperLimit - upperLimit of range for danceability score\n*/\nexport function getDanceabilityTracks(lowerLimit, upperLimit) {\n\n  return async function(dispatch) {\n    try {\n      const tracks = await BackendCall.getDanceabilityTracks({lowerLimit, upperLimit});\n\n      if (!tracks.length) {\n        dispatch(addTracks(\"\"));\n        return;\n      };\n\n      for (let track of tracks) {\n        track[\"hasLyrics\"] = true;\n        track[\"inDatabase\"] = true;\n      };\n\n      dispatch(addTracks(tracks));\n    } catch(e) {\n      dispatch(updateGeneralError(true));\n    };\n  };\n};\n\nfunction addTracks(tracks) {\n  return {type: GET_TRACKS, tracks};\n};\n\nfunction updateGeneralError(generalError) {\n  return {type: UPDATE_GENERAL_ERROR, generalError};\n};","import React,  {useState} from 'react';\nimport { Spring } from 'react-spring/renderprops';\nimport './sass/mysass.scss';\n//COMPONENT IMPORTS\nimport DanceabilitySlider from \"./DanceabilitySlider\";\nimport Tracks from \"./Tracks\";\n//REDUX IMPORTS\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {getDanceabilityTracks} from \"./actionCreators/BrowseRoute/Danceability/getDanceabilityTracksCreator\";\n\nfunction DanceabilitySearch() {\n  const [sliderVal, setSliderVal] = useState(0);\n  const dispatch = useDispatch();\n  const tracks = useSelector(store => store.tracks);\n\n////////////////////////////////////////////////////  HANDLE SLIDER MOVE FUNCTIONS  ////////////////////////////////////////////////////\n\n  const handleSliderMouseMove = async (val) => {\n    setSliderVal(val);\n    let upperLimit = (val + 0.01).toFixed(2);\n    dispatch(getDanceabilityTracks(val, upperLimit));\n  };\n\n////////////////////////////////////////////////////  RETURN  ////////////////////////////////////////////////////\n\n  return (\n    <Spring\n      from={{opacity: 0}}\n      to={{opacity: 1}}\n      config={{delay: 300, duration: 300}}\n    >\n      {props => (\n        <div style={props}>\n\n          <div className=\"Browse-Danceability-v2\">\n            <h1>{(sliderVal * 100).toFixed(0)}</h1>\n            <DanceabilitySlider handleSliderMouseMove={handleSliderMouseMove}/>\n            {!tracks && <><div className=\"Danceability-No-Results-Container\"><p className=\"Danceability-No-Results\">KEEP SLIDING!</p></div><div className=\"Pagination-Slider-Placeholder-v2\"></div></>}\n            {tracks && <Tracks results={tracks} typeOfResults={\"danceability-results\"} itemsPerPage={1} animateIn={false}/>}\n          </div>\n\n        </div>\n      )}\n    </Spring>\n  );\n};\n\nexport default DanceabilitySearch;","import React,  {useState, useRef, useEffect, useCallback} from 'react';\nimport {useSpring, animated} from 'react-spring';\nimport './sass/mysass.scss';\n//COMPONENT IMPORTS\nimport LyricsTranslation from \"./LyricsTranslation\";\nimport LanguageSelect from \"./LanguageSelect\";\nimport DanceabilitySearch from \"./DanceabilitySearch\";\nimport Categories from \"./BrowseCategories\";\nimport FlashMessage from \"./FlashMessage\";\nimport ToTopArrow from \"./ToTopArrow\";\n//REDUX IMPORTS\nimport {useSelector, useDispatch} from \"react-redux\";\nimport {resetLanguageError, resetTranslationError, resetLyricsError, resetGeneralError} from \"./actionCreators/handleErrorsCreator\";\n//CUSTOM HOOK IMPORTS\nimport useOnScreen from \"./hooks/useOnScreen\";\n\nfunction BrowseByDanceability() {\n  //STATE FOR ANIMATIONS\n  const [bgColor, setBgColor] = useState(\"#4e1eff\");\n  //REDUX STORE\n  const lyrics = useSelector(store => store.lyrics);\n  const selectedTrackId = useSelector(store => store.selectedTrack.trackId);\n  const translation = useSelector(store => store.translation);\n  const translationError = useSelector(store => store.errors.translationError);\n  const languageError = useSelector(store => store.errors.languageError);\n  const lyricsError = useSelector(store => store.errors.lyricsError);\n  const generalError = useSelector(store => store.errors.generalError);\n  const dispatch = useDispatch();\n  //REFS FOR PAGE TRAVERSAL\n  const categoryRef = useRef();\n  const DanceabilitySearchRef = useRef();\n  const selectLanguageRef = useRef();\n  const showLyricsTranslationRef = useRef();\n  //STATE FOR FLASH MESSAGES\n  const [noLyricsFlashMessage, setNoLyricsFlashMessage] = useState(false);\n  const [languageNotFoundFlashMessage, setLanguageNotFoundFlashMessage] = useState(false);\n  const [translationErrorFlashMessage, setTranslationErrorFlashMessage] = useState(false);\n  const [generalErrorFlashMessage, setGeneralErrorFlashMessage] = useState(false);\n\n////////////////////////////////////////////////////  USE EFFECTS  ////////////////////////////////////////////////////\n\n  //LISTENS FOR ANY CHANGES IN ERRORS IN STATE AND WILL TRIGGER FLASH MESSAGES ACCORDINGLY\n  useEffect(() => {\n    const displayFlashMessage = () => {\n\n        if (lyricsError) {\n          setNoLyricsFlashMessage(true);\n          dispatch(resetLyricsError());\n        };\n        if (languageError) {\n          setLanguageNotFoundFlashMessage(true);\n          dispatch(resetLanguageError());\n        };\n        if (translationError) {\n          setTranslationErrorFlashMessage(true);\n          dispatch(resetTranslationError());\n        };\n        if (generalError) {\n          setGeneralErrorFlashMessage(true);\n          dispatch(resetGeneralError());\n        };\n    };\n    displayFlashMessage();\n  }, [languageError, translationError, lyricsError, generalError, dispatch]);\n\n  //SKIP OVER THE CATEGORIES SINCE THE USER NEEDED TO SEE THAT IN ORDER TO GET TO THIS COMPONENT\n  useEffect(() => {\n\n    const scrollPastCategories = () => {\n      DanceabilitySearchRef.current.scrollIntoView({behavior: \"smooth\"});\n    }\n    scrollPastCategories();\n  }, []);\n\n  //FUNCTION TO BE CALLED IN BELOW USE-EFFECTS TO SCROLL TO NEXT DIV AFTER CLICK\n  const scrollToNextDiv = useCallback(async (state, ref) => {\n\n    if (state && state !== \"Could not read language value\") {\n      ref.current.scrollIntoView({behavior: \"smooth\"});\n    };\n  }, []);\n\n  //SCROLL DOWN TO LANGUAGE SEARCH BAR WHEN SELECTED TRACK HAS BE SET IN STATE\n  useEffect(() => {scrollToNextDiv(lyrics, selectLanguageRef);}, [lyrics, selectLanguageRef, scrollToNextDiv]);\n\n  //SCROLL DOWN TO SHOW LYRICS AND TRANSLATION WHEN TRANSLATION HAS BE SET IN STATE\n  useEffect(() => {scrollToNextDiv(translation, showLyricsTranslationRef);}, [translation, showLyricsTranslationRef, scrollToNextDiv]);\n\n////////////////////////////////////////////////////  ANIMATION FOR BACKGROUND COLOR  ////////////////////////////////////////////////////\n\n  const categoriesInView = useOnScreen(categoryRef, {threshold: 0.7});\n  const danceabilitySearchInView = useOnScreen(DanceabilitySearchRef, {threshold: 0.7});\n  const selectLanguageInView = useOnScreen(selectLanguageRef, {threshold: 0.7});\n  const lyricsTranslationInView = useOnScreen(showLyricsTranslationRef, {threshold: 0.7});\n\n  useEffect(() => {\n    const changeInView = (selectLanguageInView, lyricsTranslationInView, danceabilitySearchInView, categoriesInView) => {\n\n      if (categoriesInView) {\n        setBgColor(\"#4e1eff\");\n      } else if (danceabilitySearchInView) {\n        setBgColor(\"#7c75fc\");\n      } else if (selectLanguageInView) {\n        setBgColor(\"#9eb5fa\");\n      } else if (lyricsTranslationInView) {\n        setBgColor(\"#c1f7f7\");\n      };\n    };\n  changeInView(selectLanguageInView, lyricsTranslationInView, danceabilitySearchInView, categoriesInView);\n  }, [selectLanguageInView, lyricsTranslationInView, danceabilitySearchInView, categoriesInView]);\n\n  const springProps = useSpring({\n    backgroundColor: bgColor,\n    config: {duration: 300}\n  });\n\n////////////////////////////////////////////////////  CLICK EVENTS  ////////////////////////////////////////////////////\n\n  const scrollToDanceability = () => {\n    DanceabilitySearchRef.current.scrollIntoView({behavior: \"smooth\"});\n  };\n\n////////////////////////////////////////////////////  JSX VARIABLES  ////////////////////////////////////////////////////\n\n  //DISPLAY THE THREE CATEGORIES\n  const ChooseCategoryDiv = (\n    <animated.div onClick={scrollToDanceability} style={springProps} ref={categoryRef}>\n      <Categories needAnimation={false}/>\n    </animated.div>\n  );\n\n  //DISPLAY DANCEABILITY SEARCH BAR\n  const DanceabilitySearchDiv = (\n    <animated.div style={springProps} ref={DanceabilitySearchRef}>\n      <DanceabilitySearch />\n    </animated.div>\n  );\n\n  //DISPLAY LANGUAGE SELECTION SEARCH BAR\n  let LanguageSelectDiv;\n\n  if (lyrics) LanguageSelectDiv = (\n    <animated.div style={springProps} ref={selectLanguageRef}>\n      <LanguageSelect selectedTrackId={selectedTrackId} typeOfSearch=\"danceability-language\"/>\n    </animated.div>\n  );\n\n  //DISPLAY LYRICS AND TRANSLATION\n  let LyricsTranslationDiv;\n  \n  if (translation && translation !== \"Could not read language value\") LyricsTranslationDiv = (\n    <animated.div style={springProps}>\n      <div className=\"inViewPlaceholder\" ref={showLyricsTranslationRef}></div>\n      <ToTopArrow topRef={categoryRef} topInView={categoriesInView}/>\n      <LyricsTranslation typeOfLyricsTranslation=\"danceability\"/>\n    </animated.div>\n  );\n\n////////////////////////////////////////////////////  RETURN  ////////////////////////////////////////////////////\n\n  return (\n    <>\n      <div className=\"Flash-Messages-Container\">\n        {noLyricsFlashMessage && (<FlashMessage setState={setNoLyricsFlashMessage} message=\"Unfortunately there are no Lyrics for that song yet.\"/> )}\n        {languageNotFoundFlashMessage && (<FlashMessage setState={setLanguageNotFoundFlashMessage} message=\"That Language was not found, please try again.\"/> )}\n        {translationErrorFlashMessage && (<FlashMessage setState={setTranslationErrorFlashMessage} message=\"Sorry, we couldn't get a translation at this moment.\"/> )}\n        {generalErrorFlashMessage && (<FlashMessage setState={setGeneralErrorFlashMessage} message=\"Uh oh, something went wrong. Please try again.\"/> )}\n      </div>\n      {ChooseCategoryDiv}\n      {DanceabilitySearchDiv}\n      {LanguageSelectDiv}\n      {LyricsTranslationDiv}\n    </>\n  );\n};\n\nexport default BrowseByDanceability;","import React from 'react';\nimport {Redirect, Route, Switch} from 'react-router-dom';\nimport Search from './Search';\nimport Browse from \"./Browse\";\nimport BrowseByArtists from \"./BrowseByArtists\";\nimport BrowseByGenre from \"./BrowseByGenre\";\nimport BrowseByDanceability from \"./BrowseByDanceability\";\n\nconst Routes = () => {\n\n  return (\n    <div className=\"main\">\n      <Switch>\n        <Route exact path=\"/\"><Search/></Route>\n        <Route exact path=\"/browse\"><Browse/></Route>\n        <Route exact path=\"/browse/artists\"><BrowseByArtists/></Route>\n        <Route exact path=\"/browse/genres\"><BrowseByGenre/></Route>\n        <Route exact path=\"/browse/danceability\"><BrowseByDanceability/></Route>\n        <Redirect to=\"/\"/>\n      </Switch>\n    </div>\n  );\n};\n\nexport default Routes;","import React, {useEffect, useState} from \"react\";\nimport {NavLink, useHistory, useLocation} from \"react-router-dom\";\nimport {resetStore} from \"./actionCreators/resetStoreCreator\";\nimport {useDispatch} from \"react-redux\";\nimport MdMenu from 'react-ionicons/lib/MdMenu';\nimport Hover from \"./Hover\";\nimport './sass/mysass.scss';\n\n\nconst NavBar = () => {\n  const [browseMode, setBrowseMode] = useState(false);\n  const history = useHistory();\n  const location = useLocation();\n  const dispatch = useDispatch();\n\n////////////////////////////////////////////////////  USE EFFECT  ////////////////////////////////////////////////////\n\n  useEffect(() => {\n\n    const updateBrowseMode = () => {\n      if (location.pathname === \"/browse\") setBrowseMode(true);\n      if (location.pathname === \"/browse/artists\") setBrowseMode(true);\n      if (location.pathname === \"/browse/genres\") setBrowseMode(true);\n      if (location.pathname === \"/browse/danceability\") setBrowseMode(true);\n      if (location.pathname === \"/\") setBrowseMode(false);\n    };\n    updateBrowseMode();\n  }, [location.pathname, setBrowseMode]);\n\n////////////////////////////////////////////////////  HANDLE CLICK FUNCTIONS  ////////////////////////////////////////////////////\n\n  const handleBrowseClickFromHome = () => {\n    history.push(\"/browse\");\n    setBrowseMode(mode => !mode);\n    dispatch(resetStore(\"artists\", \"albums\", \"tracks\", \"lyrics\", \"translation\", \"searchResults\", \"selectedTrack\"));\n  };\n\n  const handleBrowseClickFromBrowse = () => {\n    dispatch(resetStore(\"lyrics\", \"translation\", \"searchResults\"));\n    history.push(\"/\");\n    setBrowseMode(mode => !mode);\n    dispatch(resetStore(\"artists\", \"albums\", \"tracks\", \"lyrics\", \"translation\", \"searchResults\", \"selectedTrack\"));\n  };\n\n  const handleHomeClick = () => {\n    history.push(\"/\");\n    setBrowseMode(false);\n    dispatch(resetStore(\"artists\", \"albums\", \"tracks\", \"lyrics\", \"translation\", \"searchResults\", \"selectedTrack\"));\n  };\n\n\n////////////////////////////////////////////////////  RETURN  ////////////////////////////////////////////////////\n\n  return (\n    <>\n      <div className=\"Navbar-Container-Left\">\n        <div className=\"Navbar-Search-Box\">\n          <Hover scale={1.15}>\n            <NavLink  className=\"Navbar-Search\" exact to=\"/\" onClick={() => handleHomeClick()}>LYRCS</NavLink>\n          </Hover>\n        </div>\n      </div>\n      <div className=\"Navbar-Container-Right\">\n        <div className=\"Navbar-Browse-Box\">\n          <Hover scale={1.20}>\n            {!browseMode && <MdMenu className=\"Navbar-Browse\" onClick={() => handleBrowseClickFromHome()} fontSize=\"35px\" color=\"#fff\"/>}\n            {browseMode && <i  className=\"fa fa-search icon Navbar-Browse\" onClick={() => handleBrowseClickFromBrowse()} color=\"#fff\"></i>}\n          </Hover>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default NavBar;","import {GET_LANGUAGES, UPDATE_GENERAL_ERROR} from \"../actionTypes\";\nimport IBMWatsonAPI from \"../IBMWatsonAPI\";\n\n/**\n* Makes a call to the IBM API to get the array of approved target\n* languages we can translate to.\n*/\nexport function getLanguages() {\n\n  return async function(dispatch) {\n    try {\n      const languages = await IBMWatsonAPI.getLanguages();\n      dispatch(addLanguages(languages));\n    } catch(e) {\n      dispatch(addLanguages([{language:\"\"}]));\n      dispatch(updateGeneralError(true));\n    };\n  };\n};\n\nfunction addLanguages(languages) {\n  return {type: GET_LANGUAGES, languages};\n};\n\nfunction updateGeneralError(generalError) {\n  return {type: UPDATE_GENERAL_ERROR, generalError};\n};","import React, {useEffect} from 'react';\nimport './sass/mysass.scss';\n//COMPONENT IMPORTS\nimport Routes from \"./Routes\";\nimport Navbar from \"./Navbar\";\n//REDUX IMPORTS\nimport {useDispatch} from \"react-redux\";\nimport {getLanguages} from \"./actionCreators/getLanguagesCreator\";\n\nfunction App() {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n\n    async function getSeedData() {\n      //GET AVAILABLE LANGUAGES TO TRANSLATE LYRICS TO FROM IBM API\n      dispatch(getLanguages());\n    };\n    getSeedData();\n  }, [dispatch]);\n\n  return (\n    <div className=\"App\">\n      <Navbar />\n      <Routes />\n    </div>\n  );\n};\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  };\n};\n\nexport default reportWebVitals;","import {UPDATE_TRANSLATION_ERRORS, UPDATE_LYRICS_ERROR, UPDATE_SEARCH_ERROR, RESET_LYRICS_ERROR, RESET_LANGUAGE_ERROR, RESET_TRANSLATION_ERROR, RESET_SEARCH_ERROR, UPDATE_GENERAL_ERROR, RESET_GENERAL_ERROR} from \"../actionTypes\";\nconst INITIAL_STATE = {generalError: false, searchError: false, lyricsError: false, languageError: false, translationError: false};\n\nexport default function errorsReducer(state=INITIAL_STATE, action) {\n  switch(action.type) {\n    //UPDATE ERROR VALUES IN CASE ANY ERROR WERE CAUGHT IN ACTION CREATORS\n    case UPDATE_TRANSLATION_ERRORS:\n      return {...state, languageError: action.errors.languageError, translationError: action.errors.translationError};\n    case UPDATE_LYRICS_ERROR:\n      return {...state, lyricsError: action.lyricsError};\n    case UPDATE_SEARCH_ERROR:\n      return {...state, searchError: action.searchError};\n    case UPDATE_GENERAL_ERROR:\n      return {...state, generalError: action.generalError};\n    //RESET ERROR VALUES BACK TO FALSE AFTER TRIGGERING A FLASH MESSAGE\n    case RESET_LANGUAGE_ERROR:\n      return {...state, languageError: false};\n    case RESET_TRANSLATION_ERROR:\n      return {...state, translationError: false};\n    case RESET_LYRICS_ERROR:\n      return {...state, lyricsError: false};\n    case RESET_SEARCH_ERROR:\n      return {...state, searchError: false};\n    case RESET_GENERAL_ERROR:\n      return {...state, generalError: false};\n    default:\n      return state;\n  };\n};","import {combineReducers} from \"redux\";\nimport translationReducer from \"./translationReducer\";\nimport errorsReducer from \"./errorsReducer\";\nimport lyricsReducer from \"./lyricsReducer\";\nimport resultsReducer from \"./resultsReducer\";\nimport albumsReducer from \"./BrowseRoute/albumsReducer\";\nimport tracksReducer from \"./BrowseRoute/tracksReducer\";\nimport languagesReducer from \"./languagesReducer\";\nimport artistsReducer from \"./BrowseRoute/artistsReducer\";\nimport allArtistsReducer from \"./BrowseRoute/allArtistsReducer\";\nimport genresReducer from \"./BrowseRoute/genresReducer\";\nimport selectedTrackReducer from \"./selectedTrackReducer\";\nimport setInViewReducer from \"./setInViewReducer\";\n\nconst rootReducer = combineReducers({\n  results: resultsReducer, \n  translation: translationReducer, \n  lyrics: lyricsReducer, \n  errors: errorsReducer,\n  albums: albumsReducer,\n  tracks: tracksReducer,\n  languages: languagesReducer,\n  artists: artistsReducer,\n  allArtists: allArtistsReducer,\n  genres: genresReducer,\n  selectedTrack: selectedTrackReducer,\n  inView: setInViewReducer\n});\n\nexport default rootReducer;","import {GET_RESULTS, RESET_SEARCH_RESULTS} from \"../actionTypes\";\nconst INITIAL_STATE = \"\";\n\nexport default function resultsReducer(state=INITIAL_STATE, action) {\n  switch(action.type) {\n    case GET_RESULTS:\n      return action.results;\n    case RESET_SEARCH_RESULTS:\n      return \"\";\n    default:\n      return state;\n  };\n};","import {GET_TRANSLATION, RESET_TRANSLATION} from \"../actionTypes\";\nconst INITIAL_STATE = \"\";\n\nexport default function translationReducer(state=INITIAL_STATE, action) {\n  switch(action.type) {\n    case GET_TRANSLATION:\n      return action.translation;\n    case RESET_TRANSLATION:\n      return \"\";\n    default:\n      return state;\n  };\n};","import {GET_LYRICS, RESET_LYRICS} from \"../actionTypes\";\nconst INITIAL_STATE = \"\";\n\nexport default function lyricsReducer(state=INITIAL_STATE, action) {\n  switch(action.type) {\n    case GET_LYRICS:\n      return action.lyrics;\n    case RESET_LYRICS:\n      return \"\";\n    default:\n      return state;\n  };\n};","import {GET_ALBUMS, RESET_ALBUMS} from \"../../actionTypes\";\nconst INITIAL_STATE = \"\";\n\nexport default function albumsRedcuer(state=INITIAL_STATE, action) {\n  switch(action.type) {\n    case GET_ALBUMS:\n      return action.albums;\n    case RESET_ALBUMS:\n      return \"\";\n    default:\n      return state;\n  };\n};","import {GET_TRACKS, RESET_TRACKS} from \"../../actionTypes\";\nconst INITIAL_STATE = \"\";\n\nexport default function tracksReducer(state=INITIAL_STATE, action) {\n  switch(action.type) {\n    case GET_TRACKS:\n      return action.tracks;\n    case RESET_TRACKS:\n      return \"\";\n    default:\n      return state;\n  };\n};\n\n","import {GET_LANGUAGES} from \"../actionTypes\";\nconst INITIAL_STATE = \"\";\n\nexport default function languagesReducer(state=INITIAL_STATE, action) {\n  switch(action.type) {\n    case GET_LANGUAGES:\n      return action.languages;\n    default:\n      return state;\n  };\n};","import {GET_ARTISTS, RESET_ARTISTS} from \"../../actionTypes\";\nconst INITIAL_STATE = \"\";\n\nexport default function artistsReducer(state=INITIAL_STATE, action) {\n  switch(action.type) {\n    case GET_ARTISTS:\n      return action.artists;\n    case RESET_ARTISTS:\n      return \"\";\n    default:\n      return state;\n  };\n};","import {GET_ALL_ARTISTS} from \"../../actionTypes\";\nconst INITIAL_STATE = \"\";\n\nexport default function allArtistsReducer(state=INITIAL_STATE, action) {\n  switch(action.type) {\n    case GET_ALL_ARTISTS:\n      return action.artists;\n    default:\n      return state;\n  };\n};","import {GET_GENRES} from \"../../actionTypes\";\nconst INITIAL_STATE = \"\";\n\nexport default function genresReducer(state=INITIAL_STATE, action) {\n  switch(action.type) {\n    case GET_GENRES:\n      return action.genres;\n    default:\n      return state;\n  };\n};","import {ADD_TRACK, RESET_SELECTED_TRACK} from \"../actionTypes\";\nconst INITIAL_STATE = \"\";\n\nexport default function selectedTrackReducer(state=INITIAL_STATE, action) {\n  switch(action.type) {\n    case ADD_TRACK:\n      return action.track;\n    case RESET_SELECTED_TRACK:\n      return \"\";\n    default:\n      return state;\n  };\n};","import {SET_IN_VIEW} from \"../actionTypes\";\nconst INITIAL_STATE = \"\";\n\nexport default function bgColorReducer(state=INITIAL_STATE, action) {\n  switch(action.type) {\n    case SET_IN_VIEW:\n      return action.component;\n    default:\n      return state;\n  };\n};","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {applyMiddleware, createStore, compose} from \"redux\";\nimport {Provider} from 'react-redux';\nimport rootReducer from \"./reducers/rootReducer\";\nimport {BrowserRouter} from 'react-router-dom';\nimport thunk from \"redux-thunk\";\nimport './sass/mysass.scss';\n\n// // FOR DEVELOPMENT / THERE ARE ISSUES WITH SOME BROWSERS WHEN USING REDUX DEVTOOLS\n// const store = createStore(\n//   rootReducer,\n//   compose(\n//     applyMiddleware(thunk),\n//     window.__REDUX_DEVTOOLS_EXTENSION__\n//     && window.__REDUX_DEVTOOLS_EXTENSION__()\n//   )\n// );\n\n// FOR PRODUCTION\nconst store = createStore(\n  rootReducer,\n  applyMiddleware(thunk)\n);\n\nReactDOM.render(\n  <Provider store={store}>\n    <BrowserRouter>\n      <React.StrictMode>\n        <App/>\n      </React.StrictMode>\n    </BrowserRouter>\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nreportWebVitals();"],"sourceRoot":""}